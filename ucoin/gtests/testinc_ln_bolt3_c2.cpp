
/*
    Appendix C: Commitment and HTLC Transaction Test Vectors
        を適当に見て回る。

    https://github.com/lightningnetwork/lightning-rfc/blob/master/03-transactions.md#appendix-c-commitment-and-htlc-transaction-test-vectors

    simple commitment tx with no HTLCs
        committx2
    commitment tx with all 5 htlcs untrimmed (minimum feerate)
        committx7min_commit
        committx7min_success_to
*/

////////////////////////////////////////////////////////////////////////
//FAKE関数

//FAKE_VALUE_FUNC(int, external_function, int);

////////////////////////////////////////////////////////////////////////

#if 0
namespace {

//////////////////////////////////////////////////
static const uint8_t TXID_FUND[] = {
    0xbe, 0xf6, 0x7e, 0x4e, 0x2f, 0xb9, 0xdd, 0xee,
    0xb3, 0x46, 0x19, 0x73, 0xcd, 0x4c, 0x62, 0xab,
    0xb3, 0x50, 0x50, 0xb1, 0xad, 0xd7, 0x72, 0x99,
    0x5b, 0x82, 0x0b, 0x58, 0x4a, 0x48, 0x84, 0x89,
};
static const uint32_t TXID_FUND_INDEX = 0;
static const uint64_t SATOSHI_FUNDING = 10000000LL;
static const int COMMITMENT_NUMBER = 42;
static const int LOCAL_DELAY = 144;
static const uint64_t DUST_LIMIT_SATOSHIS = 546;


static const uint8_t LOCAL_PAYMENT_BASEPOINT[] = {
    0x03, 0x4f, 0x35, 0x5b, 0xdc, 0xb7, 0xcc, 0x0a,
    0xf7, 0x28, 0xef, 0x3c, 0xce, 0xb9, 0x61, 0x5d,
    0x90, 0x68, 0x4b, 0xb5, 0xb2, 0xca, 0x5f, 0x85,
    0x9a, 0xb0, 0xf0, 0xb7, 0x04, 0x07, 0x58, 0x71,
    0xaa,
};
static const uint8_t REMOTE_PAYMENT_BASEPOINT[] = {
    0x03, 0x2c, 0x0b, 0x7c, 0xf9, 0x53, 0x24, 0xa0,
    0x7d, 0x05, 0x39, 0x8b, 0x24, 0x01, 0x74, 0xdc,
    0x0c, 0x2b, 0xe4, 0x44, 0xd9, 0x6b, 0x15, 0x9a,
    0xa6, 0xc7, 0xf7, 0xb1, 0xe6, 0x68, 0x68, 0x09,
    0x91,
};

static const uint8_t LOCAL_FUNDING_PRIVKEY[] = {
    0x30, 0xff, 0x49, 0x56, 0xbb, 0xdd, 0x32, 0x22,
    0xd4, 0x4c, 0xc5, 0xe8, 0xa1, 0x26, 0x1d, 0xab,
    0x1e, 0x07, 0x95, 0x7b, 0xda, 0xc5, 0xae, 0x88,
    0xfe, 0x32, 0x61, 0xef, 0x32, 0x1f, 0x37, 0x49,
    0x01, 0x01      //この2byteはなに？ 最初の0x01は「圧縮された秘密鍵」と思われるが、次は誤記？
};
static const uint8_t LOCAL_FUNDING_PUBKEY[] = {
    0x02, 0x3d, 0xa0, 0x92, 0xf6, 0x98, 0x0e, 0x58,
    0xd2, 0xc0, 0x37, 0x17, 0x31, 0x80, 0xe9, 0xa4,
    0x65, 0x47, 0x60, 0x26, 0xee, 0x50, 0xf9, 0x66,
    0x95, 0x96, 0x3e, 0x8e, 0xfe, 0x43, 0x6f, 0x54,
    0xeb,
};
static const uint8_t REMOTE_FUNDING_PUBKEY[] = {
    0x03, 0x0e, 0x9f, 0x7b, 0x62, 0x3d, 0x2c, 0xcc,
    0x7c, 0x9b, 0xd4, 0x4d, 0x66, 0xd5, 0xce, 0x21,
    0xce, 0x50, 0x4c, 0x0a, 0xcf, 0x63, 0x85, 0xa1,
    0x32, 0xce, 0xc6, 0xd3, 0xc3, 0x9f, 0xa7, 0x11,
    0xc1,
};
static const uint8_t LOCAL_SECRETKEY[] = {
    0xbb, 0x13, 0xb1, 0x21, 0xcd, 0xc3, 0x57, 0xcd,
    0x2e, 0x60, 0x8b, 0x0a, 0xea, 0x29, 0x4a, 0xfc,
    0xa3, 0x6e, 0x2b, 0x34, 0xcf, 0x95, 0x8e, 0x2e,
    0x64, 0x51, 0xa2, 0xf2, 0x74, 0x69, 0x44, 0x91,
    0x01,
};
static const uint8_t LOCAL_KEY[] = {
    0x03, 0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84,
    0xf8, 0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e,
    0x57, 0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca,
    0x81, 0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39,
    0xe7,
};
static const uint8_t REMOTE_KEY[] = {
    0x03, 0x94, 0x85, 0x4a, 0xa6, 0xea, 0xb5, 0xb2,
    0xa8, 0x12, 0x2c, 0xc7, 0x26, 0xe9, 0xdd, 0xed,
    0x05, 0x3a, 0x21, 0x84, 0xd8, 0x82, 0x56, 0x81,
    0x68, 0x26, 0xd6, 0x23, 0x1c, 0x06, 0x8d, 0x4a,
    0x5b,
};
static const uint8_t LOCAL_DELAYED_KEY[] = {
    0x03, 0xfd, 0x59, 0x60, 0x52, 0x8d, 0xc1, 0x52,
    0x01, 0x49, 0x52, 0xef, 0xdb, 0x70, 0x2a, 0x88,
    0xf7, 0x1e, 0x3c, 0x16, 0x53, 0xb2, 0x31, 0x44,
    0x31, 0x70, 0x1e, 0xc7, 0x7e, 0x57, 0xfd, 0xe8,
    0x3c,
};
static const uint8_t LOCAL_REVO_KEY[] = {
    0x02, 0x12, 0xa1, 0x40, 0xcd, 0x0c, 0x65, 0x39,
    0xd0, 0x7c, 0xd0, 0x8d, 0xfe, 0x09, 0x98, 0x4d,
    0xec, 0x32, 0x51, 0xea, 0x80, 0x8b, 0x89, 0x2e,
    0xfe, 0xac, 0x3e, 0xde, 0x94, 0x02, 0xbf, 0x2b,
    0x19,
};

static const uint64_t OBSCURED_NUM = 0x2bb038521914;


//HTLC 0 : received
static const uint8_t PREIMAGE_HTLC0[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
static const uint32_t EXPIRY0 = 500;
static const uint64_t SATOSHI_HTLC0 = 1000LL;

//HTLC 1 : received
static const uint8_t PREIMAGE_HTLC1[] = {
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
};
static const uint32_t EXPIRY1 = 501;
static const uint64_t SATOSHI_HTLC1 = 2000LL;

//HTLC 2 : offered
static const uint8_t PREIMAGE_HTLC2[] = {
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
};
static const uint32_t EXPIRY2 = 502;
static const uint64_t SATOSHI_HTLC2 = 2000LL;

//HTLC 3 : offered
static const uint8_t PREIMAGE_HTLC3[] = {
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
};
static const uint32_t EXPIRY3 = 503;
static const uint64_t SATOSHI_HTLC3 = 3000LL;

//HTLC 4: received
static const uint8_t PREIMAGE_HTLC4[] = {
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
};
static const uint32_t EXPIRY4 = 504;
static const uint64_t SATOSHI_HTLC4 = 4000LL;

static uint8_t preimage_hash_htlc0[UCOIN_SZ_HASH256];
static uint8_t preimage_hash_htlc1[UCOIN_SZ_HASH256];
static uint8_t preimage_hash_htlc2[UCOIN_SZ_HASH256];
static uint8_t preimage_hash_htlc3[UCOIN_SZ_HASH256];
static uint8_t preimage_hash_htlc4[UCOIN_SZ_HASH256];
}
#endif
////////////////////////////////////////////////////////////////////////

class ln_bolt3_c2: public testing::Test {
protected:
    virtual void SetUp() {
    }

    virtual void TearDown() {
    }

    static ucoin_util_keys_t keys_local_funding;
    static ucoin_util_keys_t keys_local_commit;
    static uint8_t remote_funding_pubkey[UCOIN_SZ_PUBKEY];

    static uint64_t obscured;
    static ucoin_buf_t funding2of2;
    static ucoin_keys_sort_t key_fund_sort;

    static ucoin_tx_t tx;
    static uint8_t txid_commit[UCOIN_SZ_TXID];
    static ln_feeinfo_t   feeinfo;
    static ln_htlcinfo_t htlcinfos[5];
    static ln_htlcinfo_t **pp_htlcinfos;

public:
    static void DumpBin(const uint8_t *pData, uint16_t Len)
    {
        for (uint16_t lp = 0; lp < Len; lp++) {
            printf("%02x", pData[lp]);
        }
        printf("\n");
    }
};

ucoin_util_keys_t ln_bolt3_c2::keys_local_funding;
ucoin_util_keys_t ln_bolt3_c2::keys_local_commit;
uint8_t ln_bolt3_c2::remote_funding_pubkey[UCOIN_SZ_PUBKEY];

uint64_t ln_bolt3_c2::obscured;
ucoin_buf_t ln_bolt3_c2::funding2of2;
ucoin_keys_sort_t ln_bolt3_c2::key_fund_sort;

ucoin_tx_t ln_bolt3_c2::tx;
uint8_t ln_bolt3_c2::txid_commit[UCOIN_SZ_TXID];
ln_feeinfo_t   ln_bolt3_c2::feeinfo;
ln_htlcinfo_t ln_bolt3_c2::htlcinfos[5];
ln_htlcinfo_t** ln_bolt3_c2::pp_htlcinfos;


////////////////////////////////////////////////////////////////////////

TEST_F(ln_bolt3_c2, start)
{
    ucoin_init(UCOIN_TESTNET, true);
}


TEST_F(ln_bolt3_c2, committx1)
{
    bool ret;

    //obscured commitment number
    uint64_t obscured_base = ln_calc_obscured_txnum(LOCAL_PAYMENT_BASEPOINT, REMOTE_PAYMENT_BASEPOINT);
    ASSERT_EQ(OBSCURED_NUM, obscured_base);
    obscured = obscured_base ^ COMMITMENT_NUMBER;

    //keys
    memcpy(keys_local_funding.priv, LOCAL_FUNDING_PRIVKEY, UCOIN_SZ_PRIVKEY);
    ret = ucoin_keys_priv2pub(keys_local_funding.pub, keys_local_funding.priv);
    ASSERT_TRUE(ret);
    ASSERT_EQ(0, memcmp(keys_local_funding.pub, LOCAL_FUNDING_PUBKEY, UCOIN_SZ_PUBKEY));
    memcpy(remote_funding_pubkey, REMOTE_FUNDING_PUBKEY, UCOIN_SZ_PUBKEY);

    memcpy(keys_local_commit.priv, LOCAL_SECRETKEY, UCOIN_SZ_PRIVKEY);
    ret = ucoin_keys_priv2pub(keys_local_commit.pub, keys_local_commit.priv);
    ASSERT_TRUE(ret);
    ASSERT_EQ(0, memcmp(keys_local_commit.pub, LOCAL_KEY, UCOIN_SZ_PUBKEY));

    //input script
    ret = ucoin_util_create2of2(&funding2of2, &key_fund_sort, keys_local_funding.pub, remote_funding_pubkey);
    ASSERT_TRUE(ret);

    //preimage-hash
    ucoin_util_sha256(preimage_hash_htlc0, PREIMAGE_HTLC0, UCOIN_SZ_HASH256);
    ucoin_util_sha256(preimage_hash_htlc1, PREIMAGE_HTLC1, UCOIN_SZ_HASH256);
    ucoin_util_sha256(preimage_hash_htlc2, PREIMAGE_HTLC2, UCOIN_SZ_HASH256);
    ucoin_util_sha256(preimage_hash_htlc3, PREIMAGE_HTLC3, UCOIN_SZ_HASH256);
    ucoin_util_sha256(preimage_hash_htlc4, PREIMAGE_HTLC4, UCOIN_SZ_HASH256);

    //fee
    feeinfo.dust_limit_satoshi = DUST_LIMIT_SATOSHIS;

    for (int lp = 0; lp < 5; lp++) {
        ln_htlcinfo_init(&htlcinfos[lp]);
    }

    //HTLC info
    htlcinfos[0].type = LN_HTLCTYPE_RECEIVED;
    htlcinfos[0].expiry = EXPIRY0;
    htlcinfos[0].amount_msat = LN_SATOSHI2MSAT(SATOSHI_HTLC0);
    htlcinfos[0].preimage = PREIMAGE_HTLC0;
    htlcinfos[0].preimage_hash = preimage_hash_htlc0;
    //
    htlcinfos[1].type = LN_HTLCTYPE_RECEIVED;
    htlcinfos[1].expiry = EXPIRY1;
    htlcinfos[1].amount_msat = LN_SATOSHI2MSAT(SATOSHI_HTLC1);
    htlcinfos[1].preimage = PREIMAGE_HTLC1;
    htlcinfos[1].preimage_hash = preimage_hash_htlc1;
    //
    htlcinfos[2].type = LN_HTLCTYPE_OFFERED;
    htlcinfos[2].expiry = EXPIRY2;
    htlcinfos[2].amount_msat = LN_SATOSHI2MSAT(SATOSHI_HTLC2);
    htlcinfos[2].preimage = NULL;
    htlcinfos[2].preimage_hash = preimage_hash_htlc2;
    //
    htlcinfos[3].type = LN_HTLCTYPE_OFFERED;
    htlcinfos[3].expiry = EXPIRY3;
    htlcinfos[3].amount_msat = LN_SATOSHI2MSAT(SATOSHI_HTLC3);
    htlcinfos[3].preimage = NULL;
    htlcinfos[3].preimage_hash = preimage_hash_htlc3;
    //
    htlcinfos[4].type = LN_HTLCTYPE_RECEIVED;
    htlcinfos[4].expiry = EXPIRY4;
    htlcinfos[4].amount_msat = LN_SATOSHI2MSAT(SATOSHI_HTLC4);
    htlcinfos[4].preimage = PREIMAGE_HTLC4;
    htlcinfos[4].preimage_hash = preimage_hash_htlc4;

    pp_htlcinfos = (ln_htlcinfo_t **)malloc(sizeof(ln_htlcinfo_t*) * 5);
    for (int lp = 0; lp < 5; lp++) {
        pp_htlcinfos[lp] = &htlcinfos[lp];
    }
}


// name: commitment tx with all 5 htlcs untrimmed (minimum feerate)
//      Commitment Transaction
TEST_F(ln_bolt3_c2, committx5untrim_commit)
{
    //amounts
    const uint64_t MSAT_LOCAL = 6988000000LL;
    const uint64_t MSAT_REMOTE = 3000000000LL;


    ///////////////////////////////////////
    const uint8_t WS_HTLC0[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0xb8, 0xbc, 0xb0,
        0x7f, 0x63, 0x44, 0xb4, 0x2a, 0xb0, 0x42, 0x50,
        0xc8, 0x6a, 0x6e, 0x8b, 0x75, 0xd3, 0xfd, 0xbb,
        0xc6, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf4, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC1[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b, 0x2e,
        0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb, 0x7b,
        0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc, 0xe2,
        0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC2[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e, 0x1b,
        0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c, 0xd9,
        0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9, 0xb5,
        0xd1, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC3[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48, 0x6f,
        0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39, 0xe2,
        0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0, 0x9d,
        0x5b, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC4[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc, 0x1a,
        0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d, 0x23,
        0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27, 0x43,
        0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };

    const struct {
        const uint8_t *ws;
        size_t len;
    } SCRIPTS[] = {
        { WS_HTLC0, sizeof(WS_HTLC0) },
        { WS_HTLC1, sizeof(WS_HTLC1) },
        { WS_HTLC2, sizeof(WS_HTLC2) },
        { WS_HTLC3, sizeof(WS_HTLC3) },
        { WS_HTLC4, sizeof(WS_HTLC4) }
    };

    const uint8_t TO_LOCAL_WSCRIPT[] = {
        0x63, 0x21, 0x02, 0x12, 0xa1, 0x40, 0xcd, 0x0c,
        0x65, 0x39, 0xd0, 0x7c, 0xd0, 0x8d, 0xfe, 0x09,
        0x98, 0x4d, 0xec, 0x32, 0x51, 0xea, 0x80, 0x8b,
        0x89, 0x2e, 0xfe, 0xac, 0x3e, 0xde, 0x94, 0x02,
        0xbf, 0x2b, 0x19, 0x67, 0x02, 0x90, 0x00, 0xb2,
        0x75, 0x21, 0x03, 0xfd, 0x59, 0x60, 0x52, 0x8d,
        0xc1, 0x52, 0x01, 0x49, 0x52, 0xef, 0xdb, 0x70,
        0x2a, 0x88, 0xf7, 0x1e, 0x3c, 0x16, 0x53, 0xb2,
        0x31, 0x44, 0x31, 0x70, 0x1e, 0xc7, 0x7e, 0x57,
        0xfd, 0xe8, 0x3c, 0x68, 0xac,
    };

    const uint8_t LOCAL_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x27, 0x5b, 0x0c, 0x32,
        0x5a, 0x5e, 0x93, 0x55, 0x65, 0x0d, 0xc3, 0x0c,
        0x0e, 0xcc, 0xfb, 0xc7, 0xef, 0xb2, 0x39, 0x87,
        0xc2, 0x4b, 0x55, 0x6b, 0x9d, 0xfd, 0xd4, 0x0e,
        0xff, 0xca, 0x18, 0xd2, 0x02, 0x20, 0x6c, 0xac,
        0xeb, 0x2c, 0x06, 0x78, 0x36, 0xc5, 0x1f, 0x29,
        0x67, 0x40, 0xc7, 0xae, 0x80, 0x7f, 0xfc, 0xbf,
        0xbf, 0x1d, 0xd3, 0xa0, 0xd5, 0x6b, 0x6d, 0xe9,
        0xa5, 0xb2, 0x47, 0x98, 0x5f, 0x06, 0x01,
    };

    const uint8_t REMOTE_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x4f, 0xd4, 0x92, 0x88,
        0x35, 0xdb, 0x1c, 0xcd, 0xfc, 0x40, 0xf5, 0xc7,
        0x8c, 0xe9, 0xbd, 0x65, 0x24, 0x9b, 0x16, 0x34,
        0x8d, 0xf8, 0x1f, 0x0c, 0x44, 0x32, 0x8d, 0xcd,
        0xef, 0xc9, 0x7d, 0x63, 0x02, 0x20, 0x19, 0x4d,
        0x38, 0x69, 0xc3, 0x8b, 0xc7, 0x32, 0xdd, 0x87,
        0xd1, 0x3d, 0x29, 0x58, 0x01, 0x5e, 0x2f, 0xc1,
        0x68, 0x29, 0xe7, 0x4c, 0xd4, 0x37, 0x7f, 0x84,
        0xd2, 0x15, 0xc0, 0xb7, 0x06, 0x06, 0x01,
    };

    const uint8_t COMMIT_TX[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xbe,
        0xf6, 0x7e, 0x4e, 0x2f, 0xb9, 0xdd, 0xee, 0xb3,
        0x46, 0x19, 0x73, 0xcd, 0x4c, 0x62, 0xab, 0xb3,
        0x50, 0x50, 0xb1, 0xad, 0xd7, 0x72, 0x99, 0x5b,
        0x82, 0x0b, 0x58, 0x4a, 0x48, 0x84, 0x89, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x38, 0xb0, 0x2b, 0x80,
        0x07, 0xe8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x52, 0xbf, 0xef, 0x04,
        0x79, 0xd7, 0xb2, 0x93, 0xc2, 0x7e, 0x0f, 0x1e,
        0xb2, 0x94, 0xbe, 0xa1, 0x54, 0xc6, 0x3a, 0x32,
        0x94, 0xef, 0x09, 0x2c, 0x19, 0xaf, 0x51, 0x40,
        0x9b, 0xce, 0x0e, 0x2a, 0xd0, 0x07, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x20, 0x40,
        0x3d, 0x39, 0x47, 0x47, 0xca, 0xe4, 0x2e, 0x98,
        0xff, 0x01, 0x73, 0x4a, 0xd5, 0xc0, 0x8f, 0x82,
        0xba, 0x12, 0x3d, 0x3d, 0x9a, 0x62, 0x0a, 0xbd,
        0xa8, 0x89, 0x89, 0x65, 0x1e, 0x2a, 0xb5, 0xd0,
        0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22,
        0x00, 0x20, 0x74, 0x8e, 0xba, 0x94, 0x4f, 0xed,
        0xc8, 0x82, 0x7f, 0x6b, 0x06, 0xbc, 0x44, 0x67,
        0x8f, 0x93, 0xc0, 0xf9, 0xe6, 0x07, 0x8b, 0x35,
        0xc6, 0x33, 0x1e, 0xd3, 0x1e, 0x75, 0xf8, 0xce,
        0x0c, 0x2d, 0xb8, 0x0b, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x22, 0x00, 0x20, 0xc2, 0x0b, 0x5d,
        0x1f, 0x85, 0x84, 0xfd, 0x90, 0x44, 0x3e, 0x7b,
        0x7b, 0x72, 0x01, 0x36, 0x17, 0x4f, 0xa4, 0xb9,
        0x33, 0x3c, 0x26, 0x1d, 0x04, 0xdb, 0xbd, 0x01,
        0x26, 0x35, 0xc0, 0xf4, 0x19, 0xa0, 0x0f, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x20,
        0x8c, 0x48, 0xd1, 0x51, 0x60, 0x39, 0x7c, 0x97,
        0x31, 0xdf, 0x9b, 0xc3, 0xb2, 0x36, 0x65, 0x6e,
        0xfb, 0x66, 0x65, 0xfb, 0xfe, 0x92, 0xb4, 0xa6,
        0x87, 0x8e, 0x88, 0xa4, 0x99, 0xf7, 0x41, 0xc4,
        0xc0, 0xc6, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x16, 0x00, 0x14, 0xcc, 0xf1, 0xaf, 0x2f, 0x2a,
        0xab, 0xee, 0x14, 0xbb, 0x40, 0xfa, 0x38, 0x51,
        0xab, 0x23, 0x01, 0xde, 0x84, 0x31, 0x10, 0xe0,
        0xa0, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22,
        0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f, 0x00, 0x64,
        0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d, 0x4e, 0x7d,
        0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1, 0x1a, 0x40,
        0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d, 0x6b, 0x7d,
        0xd8, 0x0e, 0x04, 0x00, 0x47, 0x30, 0x44, 0x02,
        0x20, 0x27, 0x5b, 0x0c, 0x32, 0x5a, 0x5e, 0x93,
        0x55, 0x65, 0x0d, 0xc3, 0x0c, 0x0e, 0xcc, 0xfb,
        0xc7, 0xef, 0xb2, 0x39, 0x87, 0xc2, 0x4b, 0x55,
        0x6b, 0x9d, 0xfd, 0xd4, 0x0e, 0xff, 0xca, 0x18,
        0xd2, 0x02, 0x20, 0x6c, 0xac, 0xeb, 0x2c, 0x06,
        0x78, 0x36, 0xc5, 0x1f, 0x29, 0x67, 0x40, 0xc7,
        0xae, 0x80, 0x7f, 0xfc, 0xbf, 0xbf, 0x1d, 0xd3,
        0xa0, 0xd5, 0x6b, 0x6d, 0xe9, 0xa5, 0xb2, 0x47,
        0x98, 0x5f, 0x06, 0x01, 0x47, 0x30, 0x44, 0x02,
        0x20, 0x4f, 0xd4, 0x92, 0x88, 0x35, 0xdb, 0x1c,
        0xcd, 0xfc, 0x40, 0xf5, 0xc7, 0x8c, 0xe9, 0xbd,
        0x65, 0x24, 0x9b, 0x16, 0x34, 0x8d, 0xf8, 0x1f,
        0x0c, 0x44, 0x32, 0x8d, 0xcd, 0xef, 0xc9, 0x7d,
        0x63, 0x02, 0x20, 0x19, 0x4d, 0x38, 0x69, 0xc3,
        0x8b, 0xc7, 0x32, 0xdd, 0x87, 0xd1, 0x3d, 0x29,
        0x58, 0x01, 0x5e, 0x2f, 0xc1, 0x68, 0x29, 0xe7,
        0x4c, 0xd4, 0x37, 0x7f, 0x84, 0xd2, 0x15, 0xc0,
        0xb7, 0x06, 0x06, 0x01, 0x47, 0x52, 0x21, 0x02,
        0x3d, 0xa0, 0x92, 0xf6, 0x98, 0x0e, 0x58, 0xd2,
        0xc0, 0x37, 0x17, 0x31, 0x80, 0xe9, 0xa4, 0x65,
        0x47, 0x60, 0x26, 0xee, 0x50, 0xf9, 0x66, 0x95,
        0x96, 0x3e, 0x8e, 0xfe, 0x43, 0x6f, 0x54, 0xeb,
        0x21, 0x03, 0x0e, 0x9f, 0x7b, 0x62, 0x3d, 0x2c,
        0xcc, 0x7c, 0x9b, 0xd4, 0x4d, 0x66, 0xd5, 0xce,
        0x21, 0xce, 0x50, 0x4c, 0x0a, 0xcf, 0x63, 0x85,
        0xa1, 0x32, 0xce, 0xc6, 0xd3, 0xc3, 0x9f, 0xa7,
        0x11, 0xc1, 0x52, 0xae, 0x3e, 0x19, 0x52, 0x20,
    };
    ///////////////////////////////////////

#if 1
    ///////////////////////////////////////////////////////////
    const uint8_t REMOTE_SIG0[] = {
        0x30, 0x44, 0x02, 0x20, 0x6a, 0x6e, 0x59, 0xf1,
        0x87, 0x64, 0xa5, 0xbf, 0x8d, 0x4f, 0xa4, 0x5e,
        0xeb, 0xc5, 0x91, 0x56, 0x66, 0x89, 0x44, 0x12,
        0x29, 0xc9, 0x18, 0xb4, 0x80, 0xfb, 0x2a, 0xf8,
        0xcc, 0x6a, 0x4a, 0xeb, 0x02, 0x20, 0x52, 0x48,
        0xf2, 0x73, 0xbe, 0x44, 0x76, 0x84, 0xb3, 0x3e,
        0x3c, 0x8d, 0x1d, 0x85, 0xa8, 0xe0, 0xca, 0x9f,
        0xa0, 0xba, 0xe9, 0xae, 0x33, 0xf0, 0x52, 0x7a,
        0xda, 0x9c, 0x16, 0x29, 0x19, 0xa6, 0x01
    };
    const uint8_t REMOTE_SIG1[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xd5, 0x27, 0x5b,
        0x36, 0x19, 0x95, 0x3c, 0xb0, 0xc3, 0xb5, 0xaa,
        0x57, 0x7f, 0x04, 0xbc, 0x51, 0x23, 0x80, 0xe6,
        0x0f, 0xa5, 0x51, 0x76, 0x2c, 0xe3, 0xd7, 0xa1,
        0xbb, 0x74, 0x01, 0xcf, 0xf9, 0x02, 0x20, 0x37,
        0x23, 0x7a, 0xb0, 0xda, 0xc3, 0xfe, 0x10, 0x0c,
        0xde, 0x09, 0x4e, 0x82, 0xe2, 0xbe, 0xd9, 0xba,
        0x0e, 0xd1, 0xbb, 0x40, 0x15, 0x4b, 0x48, 0xe5,
        0x6a, 0xa7, 0x0f, 0x25, 0x9e, 0x60, 0x8b,
    };
    const uint8_t REMOTE_SIG2[] = {
        0x30, 0x44, 0x02, 0x20, 0x1b, 0x63, 0xec, 0x80,
        0x77, 0x71, 0xba, 0xf4, 0xfd, 0xff, 0x52, 0x3c,
        0x64, 0x40, 0x80, 0xde, 0x17, 0xf1, 0xda, 0x47,
        0x89, 0x89, 0x30, 0x8a, 0xd1, 0x3a, 0x58, 0xb5,
        0x1d, 0xb9, 0x1d, 0x36, 0x02, 0x20, 0x56, 0x89,
        0x39, 0xd3, 0x8c, 0x9c, 0xe2, 0x95, 0xad, 0xba,
        0x15, 0x66, 0x5f, 0xa6, 0x8f, 0x51, 0xd9, 0x67,
        0xe8, 0xed, 0x14, 0xa0, 0x07, 0xb7, 0x51, 0x54,
        0x0a, 0x80, 0xb3, 0x25, 0xf2, 0x02,
    };
    const uint8_t REMOTE_SIG3[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xda, 0xee, 0x18,
        0x08, 0xf9, 0x86, 0x1b, 0x6c, 0x3e, 0xcd, 0x14,
        0xf7, 0xb7, 0x07, 0xec, 0xa0, 0x2d, 0xd6, 0xbd,
        0xfc, 0x71, 0x4b, 0xa2, 0xf3, 0x3b, 0xc8, 0xcd,
        0xba, 0x50, 0x7b, 0xb1, 0x82, 0x02, 0x20, 0x26,
        0x65, 0x4b, 0xf8, 0x86, 0x3a, 0xf7, 0x7d, 0x74,
        0xf5, 0x1f, 0x4e, 0x0b, 0x62, 0xd4, 0x61, 0xa0,
        0x19, 0x56, 0x1b, 0xb1, 0x2a, 0xcb, 0x12, 0x0d,
        0x3f, 0x71, 0x95, 0xd1, 0x48, 0xa5, 0x54,
    };
    const uint8_t REMOTE_SIG4[] = {
        0x30, 0x44, 0x02, 0x20, 0x7e, 0x04, 0x10, 0xe4,
        0x54, 0x54, 0xb0, 0x97, 0x8a, 0x62, 0x3f, 0x36,
        0xa1, 0x06, 0x26, 0xef, 0x17, 0xb2, 0x7d, 0x9a,
        0xd4, 0x4e, 0x27, 0x60, 0xf9, 0x8c, 0xfa, 0x3e,
        0xfb, 0x37, 0x92, 0x4f, 0x02, 0x20, 0x22, 0x0b,
        0xd8, 0xac, 0xd4, 0x3e, 0xca, 0xa9, 0x16, 0xa8,
        0x0b, 0xd4, 0xf9, 0x19, 0xc4, 0x95, 0xa2, 0xc5,
        0x89, 0x82, 0xce, 0x7c, 0x86, 0x25, 0x15, 0x3f,
        0x85, 0x96, 0x69, 0x2a, 0x80, 0x1d,
    };

    bool ret;

    ln_self_t self;
    uint8_t sigs[LN_SZ_SIGNATURE * 5];

    memset(&self, 0, sizeof(self));

    self.our_msat = MSAT_LOCAL;
    self.their_msat = MSAT_REMOTE;

    memcpy(self.funding_local.txid, TXID_FUND, UCOIN_SZ_TXID);
    self.funding_local.txindex = TXID_FUND_INDEX;

    //local_funding_privkey
    memcpy(self.funding_local.keys[MSG_FUNDIDX_FUNDING].priv, LOCAL_FUNDING_PRIVKEY, UCOIN_SZ_PRIVKEY);
    //local_funding_pubkey
    ucoin_keys_priv2pub(self.funding_local.keys[MSG_FUNDIDX_FUNDING].pub, self.funding_local.keys[MSG_FUNDIDX_FUNDING].priv);
    //remote_funding_pubkey
    memcpy(self.funding_remote.pubkeys[MSG_FUNDIDX_FUNDING], REMOTE_FUNDING_PUBKEY, UCOIN_SZ_PUBKEY);

    //local_secretkey
    //localkey
    memcpy(self.funding_local.scriptpubkeys[MSG_SCRIPTIDX_LOCALKEY], LOCAL_KEY, UCOIN_SZ_PUBKEY);
    //remotekey
    memcpy(self.funding_local.scriptpubkeys[MSG_SCRIPTIDX_REMOTEKEY], REMOTE_KEY, UCOIN_SZ_PUBKEY);
    //local_delayedkey
    memcpy(self.funding_local.scriptpubkeys[MSG_SCRIPTIDX_DELAYED], LOCAL_DELAYED_KEY, UCOIN_SZ_PUBKEY);
    //local_revocation_key
    memcpy(self.funding_local.scriptpubkeys[MSG_SCRIPTIDX_REVOCATION], LOCAL_REVO_KEY, UCOIN_SZ_PUBKEY);

    self.funding_sat = SATOSHI_FUNDING;
    self.obscured = OBSCURED_NUM;
    self.commit_num = COMMITMENT_NUMBER;

    //0
    self.cnl_add_htlc[0].id = 0;
    self.cnl_add_htlc[0].amount_msat = LN_SATOSHI2MSAT(SATOSHI_HTLC0);
    self.cnl_add_htlc[0].cltv_expiry = EXPIRY0;
    ln_calc_preimage_hash(self.cnl_add_htlc[0].payment_sha256, PREIMAGE_HTLC0);
    self.cnl_add_htlc[0].flag = LN_HTLC_FLAG_RECV;
    //1
    self.cnl_add_htlc[1].id = 1;
    self.cnl_add_htlc[1].amount_msat = LN_SATOSHI2MSAT(SATOSHI_HTLC1);
    self.cnl_add_htlc[1].cltv_expiry = EXPIRY1;
    ln_calc_preimage_hash(self.cnl_add_htlc[1].payment_sha256, PREIMAGE_HTLC1);
    self.cnl_add_htlc[1].flag = LN_HTLC_FLAG_RECV;
    //2
    self.cnl_add_htlc[2].id = 2;
    self.cnl_add_htlc[2].amount_msat = LN_SATOSHI2MSAT(SATOSHI_HTLC2);
    self.cnl_add_htlc[2].cltv_expiry = EXPIRY2;
    ln_calc_preimage_hash(self.cnl_add_htlc[2].payment_sha256, PREIMAGE_HTLC2);
    self.cnl_add_htlc[2].flag = LN_HTLC_FLAG_SEND;
    //3
    self.cnl_add_htlc[3].id = 3;
    self.cnl_add_htlc[3].amount_msat = LN_SATOSHI2MSAT(SATOSHI_HTLC3);
    self.cnl_add_htlc[3].cltv_expiry = EXPIRY3;
    ln_calc_preimage_hash(self.cnl_add_htlc[3].payment_sha256, PREIMAGE_HTLC3);
    self.cnl_add_htlc[3].flag = LN_HTLC_FLAG_SEND;
    //4
    self.cnl_add_htlc[4].id = 4;
    self.cnl_add_htlc[4].amount_msat = LN_SATOSHI2MSAT(SATOSHI_HTLC4);
    self.cnl_add_htlc[4].cltv_expiry = EXPIRY4;
    ln_calc_preimage_hash(self.cnl_add_htlc[4].payment_sha256, PREIMAGE_HTLC4);
    self.cnl_add_htlc[4].flag = LN_HTLC_FLAG_RECV;
    //
    self.htlc_num = 5;
    //
    ln_misc_sigtrim(sigs, REMOTE_SIG0);
    ln_misc_sigtrim(sigs + LN_SZ_SIGNATURE, REMOTE_SIG1);
    ln_misc_sigtrim(sigs + LN_SZ_SIGNATURE * 2, REMOTE_SIG2);
    ln_misc_sigtrim(sigs + LN_SZ_SIGNATURE * 3, REMOTE_SIG3);
    ln_misc_sigtrim(sigs + LN_SZ_SIGNATURE * 4, REMOTE_SIG4);
    //
    ln_misc_sigtrim(self.commit_remote.signature, REMOTE_SIGNATURE);
    //
    ucoin_util_create2of2(&self.redeem_fund, &self.key_fund_sort, LOCAL_FUNDING_PUBKEY, REMOTE_FUNDING_PUBKEY);
    self.tx_funding.vout[self.funding_local.txindex].script

    //ln_fundin_t fundin;
    //memset(&fundin, 0, sizeof(fundin));
    //fundin.p_txid =
    //fundin.index = 0;
    //fundin.amount = ;
    //fundin.p_change_pubkey = ;
    //fundin.p_change_addr = ;
    //fundin.p_keys = ;
    //fundin.b_native = ;

    //ln_establish_t est;
    //memset(&est, 0, sizeof(est));
    //est.cnl_open.funding_sat = SATOSHI_FUNDING;
    //est.cnl_open.feerate_per_kw
    //est.p_fundin = &fundin;
    //est.estprm = ;

    //self.p_establish = &est;
    //create_funding_tx(&self);

    ret = create_to_local(&self, sigs,
                self.htlc_num,
                LOCAL_DELAY,
                DUST_LIMIT_SATOSHIS);
    ASSERT_TRUE(ret);

#else
    ucoin_tx_init(&tx);

    bool ret;


    feeinfo.feerate_per_kw = 0;
    uint64_t fee_act = ln_fee_calc(&feeinfo, (const ln_htlcinfo_t **)pp_htlcinfos, 5);

    ASSERT_EQ(0, feeinfo.htlc_success);
    ASSERT_EQ(0, feeinfo.htlc_timeout);
    ASSERT_EQ(0, feeinfo.commit);
    ASSERT_EQ(0, fee_act);

    ln_create_htlcinfo((ln_htlcinfo_t **)pp_htlcinfos, 5, LOCAL_KEY, LOCAL_REVO_KEY, REMOTE_KEY);

    for (int lp = 0; lp < 5; lp++) {
        ASSERT_EQ(0, memcmp(SCRIPTS[lp].ws, htlcinfos[lp].script.buf, SCRIPTS[lp].len));
        ASSERT_EQ(SCRIPTS[lp].len, htlcinfos[lp].script.len);
    }


    //to-local wscript
    ucoin_buf_t ws_local_buf;

    ln_create_script_local(&ws_local_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);
    ASSERT_EQ(0, memcmp(TO_LOCAL_WSCRIPT, ws_local_buf.buf, sizeof(TO_LOCAL_WSCRIPT)));
    ASSERT_EQ(sizeof(TO_LOCAL_WSCRIPT), ws_local_buf.len);


    //tx

    ln_tx_cmt_t lntx_commit;
    lntx_commit.fund.txid = TXID_FUND;
    lntx_commit.fund.txid_index = TXID_FUND_INDEX;
    lntx_commit.fund.satoshi = UCOIN_MBTC2SATOSHI(100);
    lntx_commit.fund.p_script = &funding2of2;
    lntx_commit.fund.p_keys = &keys_local_funding;
    lntx_commit.local.satoshi = LN_MSAT2SATOSHI(MSAT_LOCAL);
    lntx_commit.local.p_script = &ws_local_buf;
    lntx_commit.remote.satoshi = LN_MSAT2SATOSHI(MSAT_REMOTE);
    lntx_commit.remote.pubkey = REMOTE_KEY;
    lntx_commit.obscured = obscured;
    lntx_commit.p_feeinfo = &feeinfo;
    lntx_commit.pp_htlcinfo = pp_htlcinfos;
    lntx_commit.htlcinfo_num = 5;
    ucoin_buf_t buf_sig_local;

    ret = ln_create_commit_tx(&tx, &buf_sig_local, &lntx_commit, true);
    ASSERT_TRUE(ret);

    ASSERT_EQ(0, memcmp(LOCAL_SIGNATURE, buf_sig_local.buf, sizeof(LOCAL_SIGNATURE)));
    ASSERT_EQ(sizeof(LOCAL_SIGNATURE), buf_sig_local.len);

    ucoin_buf_t buf_sig_remote;
    ucoin_buf_alloccopy(&buf_sig_remote, REMOTE_SIGNATURE, sizeof(REMOTE_SIGNATURE));
    ret = ucoin_util_sign_p2wsh_3_2of2(&tx, 0, key_fund_sort,
                &buf_sig_local,
                &buf_sig_remote,
                &funding2of2);
    ASSERT_TRUE(ret);
    ucoin_buf_free(&buf_sig_local);
    ucoin_buf_free(&buf_sig_remote);

    //ucoin_print_tx(&tx);

    //TestVectorとのチェック

    ucoin_buf_t tx_buf;

    ucoin_tx_create(&tx_buf, &tx);
    ASSERT_EQ(0, memcmp(COMMIT_TX, tx_buf.buf, sizeof(COMMIT_TX)));
    ASSERT_EQ(sizeof(COMMIT_TX), tx_buf.len);
    ret = ucoin_tx_txid(txid_commit, &tx);
    ASSERT_TRUE(ret);
    ucoin_buf_free(&tx_buf);

    ucoin_buf_free(&ws_local_buf);
#endif
}


// name: commitment tx with all 5 htlcs untrimmed (minimum feerate)
//      HTLC-success Transaction
TEST_F(ln_bolt3_c2, committx5untrim_success_to)
{
#if 0
    ///////////////////////////////////////////////////////////
    const uint8_t REMOTE_SIG0[] = {
        0x30, 0x44, 0x02, 0x20, 0x6a, 0x6e, 0x59, 0xf1,
        0x87, 0x64, 0xa5, 0xbf, 0x8d, 0x4f, 0xa4, 0x5e,
        0xeb, 0xc5, 0x91, 0x56, 0x66, 0x89, 0x44, 0x12,
        0x29, 0xc9, 0x18, 0xb4, 0x80, 0xfb, 0x2a, 0xf8,
        0xcc, 0x6a, 0x4a, 0xeb, 0x02, 0x20, 0x52, 0x48,
        0xf2, 0x73, 0xbe, 0x44, 0x76, 0x84, 0xb3, 0x3e,
        0x3c, 0x8d, 0x1d, 0x85, 0xa8, 0xe0, 0xca, 0x9f,
        0xa0, 0xba, 0xe9, 0xae, 0x33, 0xf0, 0x52, 0x7a,
        0xda, 0x9c, 0x16, 0x29, 0x19, 0xa6, 0x01
    };
    const uint8_t REMOTE_SIG1[] = {
        0x30, 0x44, 0x02, 0x20, 0x1b, 0x63, 0xec, 0x80,
        0x77, 0x71, 0xba, 0xf4, 0xfd, 0xff, 0x52, 0x3c,
        0x64, 0x40, 0x80, 0xde, 0x17, 0xf1, 0xda, 0x47,
        0x89, 0x89, 0x30, 0x8a, 0xd1, 0x3a, 0x58, 0xb5,
        0x1d, 0xb9, 0x1d, 0x36, 0x02, 0x20, 0x56, 0x89,
        0x39, 0xd3, 0x8c, 0x9c, 0xe2, 0x95, 0xad, 0xba,
        0x15, 0x66, 0x5f, 0xa6, 0x8f, 0x51, 0xd9, 0x67,
        0xe8, 0xed, 0x14, 0xa0, 0x07, 0xb7, 0x51, 0x54,
        0x0a, 0x80, 0xb3, 0x25, 0xf2, 0x02, 0x01,
    };
    const uint8_t REMOTE_SIG2[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xd5, 0x27, 0x5b,
        0x36, 0x19, 0x95, 0x3c, 0xb0, 0xc3, 0xb5, 0xaa,
        0x57, 0x7f, 0x04, 0xbc, 0x51, 0x23, 0x80, 0xe6,
        0x0f, 0xa5, 0x51, 0x76, 0x2c, 0xe3, 0xd7, 0xa1,
        0xbb, 0x74, 0x01, 0xcf, 0xf9, 0x02, 0x20, 0x37,
        0x23, 0x7a, 0xb0, 0xda, 0xc3, 0xfe, 0x10, 0x0c,
        0xde, 0x09, 0x4e, 0x82, 0xe2, 0xbe, 0xd9, 0xba,
        0x0e, 0xd1, 0xbb, 0x40, 0x15, 0x4b, 0x48, 0xe5,
        0x6a, 0xa7, 0x0f, 0x25, 0x9e, 0x60, 0x8b, 0x01,
    };
    const uint8_t REMOTE_SIG3[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xda, 0xee, 0x18,
        0x08, 0xf9, 0x86, 0x1b, 0x6c, 0x3e, 0xcd, 0x14,
        0xf7, 0xb7, 0x07, 0xec, 0xa0, 0x2d, 0xd6, 0xbd,
        0xfc, 0x71, 0x4b, 0xa2, 0xf3, 0x3b, 0xc8, 0xcd,
        0xba, 0x50, 0x7b, 0xb1, 0x82, 0x02, 0x20, 0x26,
        0x65, 0x4b, 0xf8, 0x86, 0x3a, 0xf7, 0x7d, 0x74,
        0xf5, 0x1f, 0x4e, 0x0b, 0x62, 0xd4, 0x61, 0xa0,
        0x19, 0x56, 0x1b, 0xb1, 0x2a, 0xcb, 0x12, 0x0d,
        0x3f, 0x71, 0x95, 0xd1, 0x48, 0xa5, 0x54, 0x01,
    };
    const uint8_t REMOTE_SIG4[] = {
        0x30, 0x44, 0x02, 0x20, 0x7e, 0x04, 0x10, 0xe4,
        0x54, 0x54, 0xb0, 0x97, 0x8a, 0x62, 0x3f, 0x36,
        0xa1, 0x06, 0x26, 0xef, 0x17, 0xb2, 0x7d, 0x9a,
        0xd4, 0x4e, 0x27, 0x60, 0xf9, 0x8c, 0xfa, 0x3e,
        0xfb, 0x37, 0x92, 0x4f, 0x02, 0x20, 0x22, 0x0b,
        0xd8, 0xac, 0xd4, 0x3e, 0xca, 0xa9, 0x16, 0xa8,
        0x0b, 0xd4, 0xf9, 0x19, 0xc4, 0x95, 0xa2, 0xc5,
        0x89, 0x82, 0xce, 0x7c, 0x86, 0x25, 0x15, 0x3f,
        0x85, 0x96, 0x69, 0x2a, 0x80, 0x1d, 0x01,
    };
    const struct {
        const uint8_t *sig;
        size_t len;
    } REMOTE_SIGS[] = {
        { REMOTE_SIG0, sizeof(REMOTE_SIG0) },
        { REMOTE_SIG1, sizeof(REMOTE_SIG1) },
        { REMOTE_SIG2, sizeof(REMOTE_SIG2) },
        { REMOTE_SIG3, sizeof(REMOTE_SIG3) },
        { REMOTE_SIG4, sizeof(REMOTE_SIG4) },
    };

    const uint8_t HS0[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x81,
        0x54, 0xec, 0xcc, 0xf1, 0x1a, 0x5f, 0xb5, 0x6c,
        0x39, 0x65, 0x4c, 0x4d, 0xeb, 0x4d, 0x22, 0x96,
        0xf8, 0x3c, 0x69, 0x26, 0x82, 0x80, 0xb9, 0x4d,
        0x02, 0x13, 0x70, 0xc9, 0x4e, 0x21, 0x97, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xe8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x6a, 0x6e, 0x59, 0xf1, 0x87,
        0x64, 0xa5, 0xbf, 0x8d, 0x4f, 0xa4, 0x5e, 0xeb,
        0xc5, 0x91, 0x56, 0x66, 0x89, 0x44, 0x12, 0x29,
        0xc9, 0x18, 0xb4, 0x80, 0xfb, 0x2a, 0xf8, 0xcc,
        0x6a, 0x4a, 0xeb, 0x02, 0x20, 0x52, 0x48, 0xf2,
        0x73, 0xbe, 0x44, 0x76, 0x84, 0xb3, 0x3e, 0x3c,
        0x8d, 0x1d, 0x85, 0xa8, 0xe0, 0xca, 0x9f, 0xa0,
        0xba, 0xe9, 0xae, 0x33, 0xf0, 0x52, 0x7a, 0xda,
        0x9c, 0x16, 0x29, 0x19, 0xa6, 0x01, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x7c, 0xb3, 0x24, 0xfa, 0x0d,
        0xe8, 0x8f, 0x45, 0x2f, 0xfa, 0x93, 0x89, 0x67,
        0x81, 0x27, 0xeb, 0xcf, 0x4c, 0xab, 0xe1, 0xdd,
        0x84, 0x8b, 0x8e, 0x07, 0x6c, 0x1a, 0x19, 0x62,
        0xbf, 0x34, 0x72, 0x02, 0x20, 0x11, 0x6e, 0xd9,
        0x22, 0xb1, 0x23, 0x11, 0xbd, 0x60, 0x2d, 0x67,
        0xe6, 0x0d, 0x25, 0x29, 0x91, 0x7f, 0x21, 0xc5,
        0xb8, 0x2f, 0x25, 0xff, 0x65, 0x06, 0xc0, 0xf8,
        0x78, 0x86, 0xb4, 0xdf, 0xd5, 0x01, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8a,
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0xb8, 0xbc, 0xb0,
        0x7f, 0x63, 0x44, 0xb4, 0x2a, 0xb0, 0x42, 0x50,
        0xc8, 0x6a, 0x6e, 0x8b, 0x75, 0xd3, 0xfd, 0xbb,
        0xc6, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf4, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const uint8_t HS1[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x81,
        0x54, 0xec, 0xcc, 0xf1, 0x1a, 0x5f, 0xb5, 0x6c,
        0x39, 0x65, 0x4c, 0x4d, 0xeb, 0x4d, 0x22, 0x96,
        0xf8, 0x3c, 0x69, 0x26, 0x82, 0x80, 0xb9, 0x4d,
        0x02, 0x13, 0x70, 0xc9, 0x4e, 0x21, 0x97, 0x02,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xd0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x1b, 0x63, 0xec, 0x80, 0x77,
        0x71, 0xba, 0xf4, 0xfd, 0xff, 0x52, 0x3c, 0x64,
        0x40, 0x80, 0xde, 0x17, 0xf1, 0xda, 0x47, 0x89,
        0x89, 0x30, 0x8a, 0xd1, 0x3a, 0x58, 0xb5, 0x1d,
        0xb9, 0x1d, 0x36, 0x02, 0x20, 0x56, 0x89, 0x39,
        0xd3, 0x8c, 0x9c, 0xe2, 0x95, 0xad, 0xba, 0x15,
        0x66, 0x5f, 0xa6, 0x8f, 0x51, 0xd9, 0x67, 0xe8,
        0xed, 0x14, 0xa0, 0x07, 0xb7, 0x51, 0x54, 0x0a,
        0x80, 0xb3, 0x25, 0xf2, 0x02, 0x01, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xde, 0xf3, 0x89, 0xde,
        0xab, 0x09, 0xce, 0xe6, 0x9e, 0xaa, 0x1e, 0xc1,
        0x4d, 0x94, 0x28, 0x77, 0x0e, 0x45, 0xbc, 0xbe,
        0x9f, 0xeb, 0x46, 0x46, 0x8e, 0xcf, 0x48, 0x13,
        0x71, 0x16, 0x5c, 0x2f, 0x02, 0x20, 0x15, 0xd2,
        0xe3, 0xc4, 0x66, 0x00, 0xb2, 0xeb, 0xba, 0x8d,
        0xcc, 0x89, 0x97, 0x68, 0x87, 0x4c, 0xc6, 0x85,
        0x1f, 0xd1, 0xec, 0xb3, 0xff, 0xfd, 0x15, 0xdb,
        0x1c, 0xc3, 0xde, 0x7e, 0x10, 0xda, 0x01, 0x20,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x8a, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b,
        0x2e, 0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb,
        0x7b, 0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc,
        0xe2, 0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d,
        0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d,
        0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97,
        0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e,
        0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52,
        0xae, 0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75,
        0xac, 0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const uint8_t HS2[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x81,
        0x54, 0xec, 0xcc, 0xf1, 0x1a, 0x5f, 0xb5, 0x6c,
        0x39, 0x65, 0x4c, 0x4d, 0xeb, 0x4d, 0x22, 0x96,
        0xf8, 0x3c, 0x69, 0x26, 0x82, 0x80, 0xb9, 0x4d,
        0x02, 0x13, 0x70, 0xc9, 0x4e, 0x21, 0x97, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xd0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xd5, 0x27, 0x5b, 0x36,
        0x19, 0x95, 0x3c, 0xb0, 0xc3, 0xb5, 0xaa, 0x57,
        0x7f, 0x04, 0xbc, 0x51, 0x23, 0x80, 0xe6, 0x0f,
        0xa5, 0x51, 0x76, 0x2c, 0xe3, 0xd7, 0xa1, 0xbb,
        0x74, 0x01, 0xcf, 0xf9, 0x02, 0x20, 0x37, 0x23,
        0x7a, 0xb0, 0xda, 0xc3, 0xfe, 0x10, 0x0c, 0xde,
        0x09, 0x4e, 0x82, 0xe2, 0xbe, 0xd9, 0xba, 0x0e,
        0xd1, 0xbb, 0x40, 0x15, 0x4b, 0x48, 0xe5, 0x6a,
        0xa7, 0x0f, 0x25, 0x9e, 0x60, 0x8b, 0x01, 0x48,
        0x30, 0x45, 0x02, 0x21, 0x00, 0xc8, 0x91, 0x72,
        0x09, 0x95, 0x07, 0xff, 0x50, 0xf4, 0xc9, 0x25,
        0xe6, 0xc5, 0x15, 0x0e, 0x87, 0x1f, 0xb6, 0xe8,
        0x3d, 0xd7, 0x3f, 0xf9, 0xfb, 0xb7, 0x2f, 0x6c,
        0xe8, 0x29, 0xa9, 0x63, 0x3f, 0x02, 0x20, 0x3a,
        0x63, 0x82, 0x1d, 0x91, 0x62, 0xe9, 0x9f, 0x9b,
        0xe7, 0x12, 0xa6, 0x8f, 0x9e, 0x58, 0x94, 0x83,
        0x99, 0x4f, 0xea, 0xe2, 0x66, 0x1e, 0x45, 0x46,
        0xcd, 0x5b, 0x6c, 0xec, 0x00, 0x7b, 0xe5, 0x01,
        0x00, 0x85, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f,
        0x72, 0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98,
        0x6c, 0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7,
        0xb5, 0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94,
        0x85, 0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12,
        0x2c, 0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a,
        0x21, 0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26,
        0xd6, 0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c,
        0x82, 0x01, 0x20, 0x87, 0x64, 0x75, 0x52, 0x7c,
        0x21, 0x03, 0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63,
        0x84, 0xf8, 0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c,
        0x5e, 0x57, 0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda,
        0xca, 0x81, 0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06,
        0x39, 0xe7, 0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4,
        0x3e, 0x1b, 0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f,
        0x7c, 0xd9, 0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3,
        0xa9, 0xb5, 0xd1, 0x88, 0xac, 0x68, 0x68, 0xf6,
        0x01, 0x00, 0x00,
    };
    const uint8_t HS3[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x81,
        0x54, 0xec, 0xcc, 0xf1, 0x1a, 0x5f, 0xb5, 0x6c,
        0x39, 0x65, 0x4c, 0x4d, 0xeb, 0x4d, 0x22, 0x96,
        0xf8, 0x3c, 0x69, 0x26, 0x82, 0x80, 0xb9, 0x4d,
        0x02, 0x13, 0x70, 0xc9, 0x4e, 0x21, 0x97, 0x03,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xb8, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xda, 0xee, 0x18, 0x08,
        0xf9, 0x86, 0x1b, 0x6c, 0x3e, 0xcd, 0x14, 0xf7,
        0xb7, 0x07, 0xec, 0xa0, 0x2d, 0xd6, 0xbd, 0xfc,
        0x71, 0x4b, 0xa2, 0xf3, 0x3b, 0xc8, 0xcd, 0xba,
        0x50, 0x7b, 0xb1, 0x82, 0x02, 0x20, 0x26, 0x65,
        0x4b, 0xf8, 0x86, 0x3a, 0xf7, 0x7d, 0x74, 0xf5,
        0x1f, 0x4e, 0x0b, 0x62, 0xd4, 0x61, 0xa0, 0x19,
        0x56, 0x1b, 0xb1, 0x2a, 0xcb, 0x12, 0x0d, 0x3f,
        0x71, 0x95, 0xd1, 0x48, 0xa5, 0x54, 0x01, 0x47,
        0x30, 0x44, 0x02, 0x20, 0x64, 0x3a, 0xac, 0xb1,
        0x9b, 0xbb, 0x72, 0xbd, 0x2b, 0x63, 0x5b, 0xc3,
        0xf7, 0x37, 0x54, 0x81, 0xf5, 0x98, 0x1b, 0xac,
        0xe7, 0x8c, 0xdd, 0x83, 0x19, 0xb2, 0x98, 0x8f,
        0xfc, 0xc6, 0x70, 0x42, 0x02, 0x20, 0x3d, 0x27,
        0x78, 0x4e, 0xc8, 0xad, 0x51, 0xed, 0x3b, 0xd5,
        0x17, 0xa0, 0x55, 0x25, 0xa5, 0x13, 0x9b, 0xb0,
        0xb7, 0x55, 0xdd, 0x71, 0x9e, 0x00, 0x54, 0x33,
        0x2d, 0x18, 0x6a, 0xc0, 0x87, 0x27, 0x01, 0x00,
        0x85, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21,
        0x03, 0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84,
        0xf8, 0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e,
        0x57, 0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca,
        0x81, 0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39,
        0xe7, 0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48,
        0x6f, 0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39,
        0xe2, 0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0,
        0x9d, 0x5b, 0x88, 0xac, 0x68, 0x68, 0xf7, 0x01,
        0x00, 0x00,
    };
    const uint8_t HS4[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x81,
        0x54, 0xec, 0xcc, 0xf1, 0x1a, 0x5f, 0xb5, 0x6c,
        0x39, 0x65, 0x4c, 0x4d, 0xeb, 0x4d, 0x22, 0x96,
        0xf8, 0x3c, 0x69, 0x26, 0x82, 0x80, 0xb9, 0x4d,
        0x02, 0x13, 0x70, 0xc9, 0x4e, 0x21, 0x97, 0x04,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xa0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x7e, 0x04, 0x10, 0xe4, 0x54,
        0x54, 0xb0, 0x97, 0x8a, 0x62, 0x3f, 0x36, 0xa1,
        0x06, 0x26, 0xef, 0x17, 0xb2, 0x7d, 0x9a, 0xd4,
        0x4e, 0x27, 0x60, 0xf9, 0x8c, 0xfa, 0x3e, 0xfb,
        0x37, 0x92, 0x4f, 0x02, 0x20, 0x22, 0x0b, 0xd8,
        0xac, 0xd4, 0x3e, 0xca, 0xa9, 0x16, 0xa8, 0x0b,
        0xd4, 0xf9, 0x19, 0xc4, 0x95, 0xa2, 0xc5, 0x89,
        0x82, 0xce, 0x7c, 0x86, 0x25, 0x15, 0x3f, 0x85,
        0x96, 0x69, 0x2a, 0x80, 0x1d, 0x01, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x54, 0x9e, 0x80, 0xb4, 0x49,
        0x68, 0x03, 0xcb, 0xc4, 0xa1, 0xd0, 0x9d, 0x46,
        0xdf, 0x50, 0x10, 0x9f, 0x54, 0x6d, 0x43, 0xfb,
        0xbf, 0x86, 0xcd, 0x90, 0xb1, 0x74, 0xb1, 0x48,
        0x4a, 0xcd, 0x54, 0x02, 0x20, 0x5f, 0x12, 0xa4,
        0xf9, 0x95, 0xcb, 0x9b, 0xde, 0xd5, 0x97, 0xea,
        0xbf, 0xee, 0x19, 0x5a, 0x28, 0x59, 0x86, 0xaa,
        0x6d, 0x93, 0xae, 0x5b, 0xb7, 0x25, 0x07, 0xeb,
        0xc6, 0xa4, 0xe2, 0x34, 0x9e, 0x01, 0x20, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x8a,
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc, 0x1a,
        0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d, 0x23,
        0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27, 0x43,
        0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const struct {
        const uint8_t *tx;
        size_t len;
    } HTLC_TX[] = {
        { HS0, sizeof(HS0) },
        { HS1, sizeof(HS1) },
        { HS2, sizeof(HS2) },
        { HS3, sizeof(HS3) },
        { HS4, sizeof(HS4) },
    };
    ///////////////////////////////////////////////////////////


    bool ret;
    int index;


    //各HTLCのsuccess transaction作成
    ucoin_tx_t tx2;

    ucoin_buf_t ws_buf;
    ln_create_script_success(&ws_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);

    //どのHTLCxがVOUTにいるか(ない場合は-1)
    //どのVOUTがどのHTLCなのかは、どうやって見つけるべきなのだろう？
    //                    HTLC0     HTLC1       HTLC2       HTLC3       HTLC4
    const int VOUTS[] = { 0,        2,          1,          3,          4 };

    ucoin_buf_t local_sig;
    ucoin_buf_init(&local_sig);
    for (int lp = 0; lp < 5; lp++) {
        uint64_t fee = (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? feeinfo.htlc_timeout : feeinfo.htlc_success;
        index = VOUTS[lp];
        if ((index >= 0) && (tx.vout[index].value >= feeinfo.dust_limit_satoshi + fee)) {
            ucoin_tx_init(&tx2);

            //vout
            ucoin_sw_add_vout_p2wsh(&tx2, tx.vout[index].value - fee, &ws_buf);
            tx2.vout[tx2.vout_cnt - 1].opt = htlcinfos[lp].type;
            //vin
            ucoin_tx_add_vin(&tx2, txid_commit, index);

            const ucoin_buf_t remote_sig = { (uint8_t *)REMOTE_SIGS[lp].sig, (uint16_t)REMOTE_SIGS[lp].len };
            printf("[%d]%s\n", lp, (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? "offered" : "received");
            ret = ln_sign_htlc_tx(&tx2,
                        &local_sig,
                        tx.vout[index].value,
                        &keys_local_commit,
                        &remote_sig,
                        htlcinfos[lp].preimage,
                        htlcinfos[lp].expiry,
                        &htlcinfos[lp].script);
            ASSERT_TRUE(ret);
            ucoin_buf_t hs;
            ucoin_tx_create(&hs, &tx2);
            //ucoin_print_tx(&tx2);
            //ucoin_print_rawtx(HTLC_TX[lp].tx, HTLC_TX[lp].len);
            ASSERT_EQ(0, memcmp(HTLC_TX[lp].tx, hs.buf, HTLC_TX[lp].len));
            ASSERT_EQ(HTLC_TX[lp].len, hs.len);
            ucoin_buf_free(&local_sig);
            ucoin_buf_free(&hs);
            ucoin_tx_free(&tx2);
        }
    }

    for (int lp = 0; lp < 5; lp++) {
        ucoin_buf_free((ucoin_buf_t *)&htlcinfos[lp].script);
    }
    ucoin_buf_free(&ws_buf);
    ucoin_tx_free(&tx2);
#endif

    ucoin_tx_free(&tx);
}


TEST_F(ln_bolt3_c2, fin)
{
    ucoin_buf_free(&funding2of2);
    ucoin_term();

    free(pp_htlcinfos);
    for (int lp = 0; lp < 5; lp++) {
        ln_htlcinfo_free(&htlcinfos[lp]);
    }
    printf("★★ %d[%d]\n", ucoin_dbg_malloc_cnt(), __LINE__);

    ASSERT_EQ(0, ucoin_dbg_malloc_cnt());
}
