////////////////////////////////////////////////////////////////////////
//FAKE関数

//FAKE_VALUE_FUNC(int, external_function, int);

////////////////////////////////////////////////////////////////////////

class bolt8test: public testing::Test {
protected:
    virtual void SetUp() {
        //RESET_FAKE(external_function)
        utl_dbg_malloc_cnt_reset();
        btc_init(BTC_BLOCK_CHAIN_BTCTEST, true);
    }

    virtual void TearDown() {
        ASSERT_EQ(0, utl_dbg_malloc_cnt());
        btc_term();
    }

public:
    static void DumpBin(const uint8_t *pData, uint16_t Len)
    {
        for (uint16_t lp = 0; lp < Len; lp++) {
            printf("%02x", pData[lp]);
        }
        printf("\n");
    }
};

////////////////////////////////////////////////////////////////////////

TEST_F(bolt8test, initiator)
{
    bool ret;
    ln_noise_t noise;

    //vector
    const uint8_t LS_PRIV[] = {
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
    };
    //const uint8_t RS_PRIV[] = {
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //};
    const uint8_t RS_PUB[] = {
        0x02, 0x8d, 0x75, 0x00, 0xdd, 0x4c, 0x12, 0x68,
        0x5d, 0x1f, 0x56, 0x8b, 0x4c, 0x2b, 0x50, 0x48,
        0xe8, 0x53, 0x4b, 0x87, 0x33, 0x19, 0xf3, 0xa8,
        0xda, 0xa6, 0x12, 0xb4, 0x69, 0x13, 0x2e, 0xc7,
        0xf7,
    };

    ln_node_setkey(LS_PRIV);

    ret = ln_noise_handshake_init(&noise, RS_PUB);
    ASSERT_TRUE(ret);
    struct bolt8_t *pBolt = (struct bolt8_t *)noise.p_handshake;
    ASSERT_EQ(START_INITIATOR, pBolt->state);
    ASSERT_TRUE(ln_noise_handshake_state(&noise));

    //ephemeralの差し替え
    const uint8_t EPRIV[] = {
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
    };
    const uint8_t EPUB[] = {
        0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c, 0xe5,
        0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80, 0x70,
        0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d, 0x9c,
        0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff, 0x73,
        0xf7,
    };
    memcpy(pBolt->e.priv, EPRIV, sizeof(EPRIV));
    memcpy(pBolt->e.pub, EPUB, sizeof(EPUB));
    noise.send_ctx.nonce = 10;
    noise.recv_ctx.nonce = 10;

    //Act One send
    utl_buf_t buf = UTL_BUF_INIT;
    ret = ln_noise_handshake_start(&noise, &buf, RS_PUB);
    ASSERT_TRUE(ret);
    ASSERT_EQ(10, noise.send_ctx.nonce);
    ASSERT_EQ(10, noise.recv_ctx.nonce);
    ASSERT_TRUE(ln_noise_handshake_state(&noise));

    const uint8_t OUTPUT_1S[50] = {
        0x00, 0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c,
        0xe5, 0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80,
        0x70, 0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d,
        0x9c, 0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff,
        0x73, 0xf7, 0x0d, 0xf6, 0x08, 0x65, 0x51, 0x15,
        0x1f, 0x58, 0xb8, 0xaf, 0xe6, 0xc1, 0x95, 0x78,
        0x2c, 0x6a,
    };
    ASSERT_EQ(sizeof(OUTPUT_1S), buf.len);
    ASSERT_EQ(0, memcmp(OUTPUT_1S, buf.buf, sizeof(OUTPUT_1S)));

    utl_buf_free(&buf);


    //Act Two Receivce and Act Three Send
    //input: 0x0002466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730ae
    const uint8_t INPUT_2S[50] = {
        0x00, 0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63,
        0xe5, 0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5,
        0x80, 0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1,
        0x49, 0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae,
        0x3f, 0x27, 0x6e, 0x24, 0x70, 0xb9, 0x3a, 0xac,
        0x58, 0x3c, 0x9e, 0xf6, 0xea, 0xfc, 0xa3, 0xf7,
        0x30, 0xae,
    };
    utl_buf_alloccopy(&buf, INPUT_2S, sizeof(INPUT_2S));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_TRUE(ret);
    ASSERT_FALSE(ln_noise_handshake_state(&noise));

    const uint8_t OUTPUT_2S[66] = {
        0x00, 0xb9, 0xe3, 0xa7, 0x02, 0xe9, 0x3e, 0x3a,
        0x99, 0x48, 0xc2, 0xed, 0x6e, 0x5f, 0xd7, 0x59,
        0x0a, 0x6e, 0x1c, 0x3a, 0x03, 0x44, 0xcf, 0xc9,
        0xd5, 0xb5, 0x73, 0x57, 0x04, 0x9a, 0xa2, 0x23,
        0x55, 0x36, 0x1a, 0xa0, 0x2e, 0x55, 0xa8, 0xfc,
        0x28, 0xfe, 0xf5, 0xbd, 0x6d, 0x71, 0xad, 0x0c,
        0x38, 0x22, 0x8d, 0xc6, 0x8b, 0x1c, 0x46, 0x62,
        0x63, 0xb4, 0x7f, 0xdf, 0x31, 0xe5, 0x60, 0xe1,
        0x39, 0xba,
    };
    ASSERT_EQ(sizeof(OUTPUT_2S), buf.len);
    ASSERT_EQ(0, memcmp(OUTPUT_2S, buf.buf, sizeof(OUTPUT_2S)));

    utl_buf_free(&buf);

    const uint8_t SK[] = {
        0x96, 0x9a, 0xb3, 0x1b, 0x4d, 0x28, 0x8c, 0xed,
        0xf6, 0x21, 0x88, 0x39, 0xb2, 0x7a, 0x3e, 0x21,
        0x40, 0x82, 0x70, 0x47, 0xf2, 0xc0, 0xf0, 0x1b,
        0xf5, 0xc0, 0x44, 0x35, 0xd4, 0x35, 0x11, 0xa9,
    };
    const uint8_t RK[] = {
        0xbb, 0x90, 0x20, 0xb8, 0x96, 0x5f, 0x4d, 0xf0,
        0x47, 0xe0, 0x7f, 0x95, 0x5f, 0x3c, 0x4b, 0x88,
        0x41, 0x89, 0x84, 0xaa, 0xdc, 0x5c, 0xdb, 0x35,
        0x09, 0x6b, 0x9e, 0xa8, 0xfa, 0x5c, 0x34, 0x42,
    };
    ASSERT_EQ(0, memcmp(SK, noise.send_ctx.key, sizeof(SK)));
    ASSERT_EQ(0, memcmp(RK, noise.recv_ctx.key, sizeof(RK)));
    ASSERT_EQ(0, noise.send_ctx.nonce);
    ASSERT_EQ(0, noise.recv_ctx.nonce);
    ASSERT_EQ(0, noise.p_handshake);

    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
}


//name: transport-initiator act2 short read test
TEST_F(bolt8test, initiator_fail_act2_short_read)
{
    bool ret;
    ln_noise_t noise;

    //vector
    const uint8_t LS_PRIV[] = {
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
    };
    //const uint8_t RS_PRIV[] = {
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //};
    const uint8_t RS_PUB[] = {
        0x02, 0x8d, 0x75, 0x00, 0xdd, 0x4c, 0x12, 0x68,
        0x5d, 0x1f, 0x56, 0x8b, 0x4c, 0x2b, 0x50, 0x48,
        0xe8, 0x53, 0x4b, 0x87, 0x33, 0x19, 0xf3, 0xa8,
        0xda, 0xa6, 0x12, 0xb4, 0x69, 0x13, 0x2e, 0xc7,
        0xf7,
    };

    ln_node_setkey(LS_PRIV);

    ret = ln_noise_handshake_init(&noise, RS_PUB);
    ASSERT_TRUE(ret);
    struct bolt8_t *pBolt = (struct bolt8_t *)noise.p_handshake;
    ASSERT_EQ(START_INITIATOR, pBolt->state);

    //ephemeralの差し替え
    const uint8_t EPRIV[] = {
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
    };
    const uint8_t EPUB[] = {
        0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c, 0xe5,
        0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80, 0x70,
        0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d, 0x9c,
        0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff, 0x73,
        0xf7,
    };
    memcpy(pBolt->e.priv, EPRIV, sizeof(EPRIV));
    memcpy(pBolt->e.pub, EPUB, sizeof(EPUB));

    //Act One send
    utl_buf_t buf = UTL_BUF_INIT;
    ret = ln_noise_handshake_start(&noise, &buf, RS_PUB);
    ASSERT_TRUE(ret);

    const uint8_t OUTPUT_1S[50] = {
        0x00, 0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c,
        0xe5, 0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80,
        0x70, 0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d,
        0x9c, 0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff,
        0x73, 0xf7, 0x0d, 0xf6, 0x08, 0x65, 0x51, 0x15,
        0x1f, 0x58, 0xb8, 0xaf, 0xe6, 0xc1, 0x95, 0x78,
        0x2c, 0x6a,
    };
    ASSERT_EQ(sizeof(OUTPUT_1S), buf.len);
    ASSERT_EQ(0, memcmp(OUTPUT_1S, buf.buf, sizeof(OUTPUT_1S)));

    utl_buf_free(&buf);


    //Act Two Receivce
    //input: 0x0002466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730
    const uint8_t INPUT_2S[50] = {
        0x00, 0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63,
        0xe5, 0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5,
        0x80, 0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1,
        0x49, 0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae,
        0x3f, 0x27, 0x6e, 0x24, 0x70, 0xb9, 0x3a, 0xac,
        0x58, 0x3c, 0x9e, 0xf6, 0xea, 0xfc, 0xa3, 0xf7,
        0x30,
    };
    utl_buf_alloccopy(&buf, INPUT_2S, sizeof(INPUT_2S));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
    ASSERT_EQ(0, noise.p_handshake);
    ASSERT_FALSE(ln_noise_handshake_state(&noise));

    utl_buf_free(&buf);

    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
}


//name: transport-initiator act2 bad version test
TEST_F(bolt8test, initiator_fail_act2_bad_version)
{
    bool ret;
    ln_noise_t noise;

    //vector
    const uint8_t LS_PRIV[] = {
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
    };
    //const uint8_t RS_PRIV[] = {
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //};
    const uint8_t RS_PUB[] = {
        0x02, 0x8d, 0x75, 0x00, 0xdd, 0x4c, 0x12, 0x68,
        0x5d, 0x1f, 0x56, 0x8b, 0x4c, 0x2b, 0x50, 0x48,
        0xe8, 0x53, 0x4b, 0x87, 0x33, 0x19, 0xf3, 0xa8,
        0xda, 0xa6, 0x12, 0xb4, 0x69, 0x13, 0x2e, 0xc7,
        0xf7,
    };

    ln_node_setkey(LS_PRIV);

    ret = ln_noise_handshake_init(&noise, RS_PUB);
    ASSERT_TRUE(ret);
    struct bolt8_t *pBolt = (struct bolt8_t *)noise.p_handshake;
    ASSERT_EQ(START_INITIATOR, pBolt->state);

    //ephemeralの差し替え
    const uint8_t EPRIV[] = {
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
    };
    const uint8_t EPUB[] = {
        0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c, 0xe5,
        0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80, 0x70,
        0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d, 0x9c,
        0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff, 0x73,
        0xf7,
    };
    memcpy(pBolt->e.priv, EPRIV, sizeof(EPRIV));
    memcpy(pBolt->e.pub, EPUB, sizeof(EPUB));

    //Act One send
    utl_buf_t buf = UTL_BUF_INIT;
    ret = ln_noise_handshake_start(&noise, &buf, RS_PUB);
    ASSERT_TRUE(ret);

    const uint8_t OUTPUT_1S[50] = {
        0x00, 0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c,
        0xe5, 0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80,
        0x70, 0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d,
        0x9c, 0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff,
        0x73, 0xf7, 0x0d, 0xf6, 0x08, 0x65, 0x51, 0x15,
        0x1f, 0x58, 0xb8, 0xaf, 0xe6, 0xc1, 0x95, 0x78,
        0x2c, 0x6a,
    };
    ASSERT_EQ(sizeof(OUTPUT_1S), buf.len);
    ASSERT_EQ(0, memcmp(OUTPUT_1S, buf.buf, sizeof(OUTPUT_1S)));

    utl_buf_free(&buf);


    //Act Two Receivce
    //input: 0x0102466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730ae
    const uint8_t INPUT_2S[50] = {
        0x01, 0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63,
        0xe5, 0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5,
        0x80, 0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1,
        0x49, 0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae,
        0x3f, 0x27, 0x6e, 0x24, 0x70, 0xb9, 0x3a, 0xac,
        0x58, 0x3c, 0x9e, 0xf6, 0xea, 0xfc, 0xa3, 0xf7,
        0x30, 0xae,
    };
    utl_buf_alloccopy(&buf, INPUT_2S, sizeof(INPUT_2S));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
    ASSERT_EQ(0, noise.p_handshake);
    ASSERT_FALSE(ln_noise_handshake_state(&noise));

    utl_buf_free(&buf);

    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
}


//name: transport-initiator act2 bad key serialization test
TEST_F(bolt8test, initiator_fail_act2_bad_key_serialization)
{
    bool ret;
    ln_noise_t noise;

    //vector
    const uint8_t LS_PRIV[] = {
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
    };
    //const uint8_t RS_PRIV[] = {
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //};
    const uint8_t RS_PUB[] = {
        0x02, 0x8d, 0x75, 0x00, 0xdd, 0x4c, 0x12, 0x68,
        0x5d, 0x1f, 0x56, 0x8b, 0x4c, 0x2b, 0x50, 0x48,
        0xe8, 0x53, 0x4b, 0x87, 0x33, 0x19, 0xf3, 0xa8,
        0xda, 0xa6, 0x12, 0xb4, 0x69, 0x13, 0x2e, 0xc7,
        0xf7,
    };

    ln_node_setkey(LS_PRIV);

    ret = ln_noise_handshake_init(&noise, RS_PUB);
    ASSERT_TRUE(ret);
    struct bolt8_t *pBolt = (struct bolt8_t *)noise.p_handshake;
    ASSERT_EQ(START_INITIATOR, pBolt->state);

    //ephemeralの差し替え
    const uint8_t EPRIV[] = {
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
    };
    const uint8_t EPUB[] = {
        0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c, 0xe5,
        0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80, 0x70,
        0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d, 0x9c,
        0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff, 0x73,
        0xf7,
    };
    memcpy(pBolt->e.priv, EPRIV, sizeof(EPRIV));
    memcpy(pBolt->e.pub, EPUB, sizeof(EPUB));

    //Act One send
    utl_buf_t buf = UTL_BUF_INIT;
    ret = ln_noise_handshake_start(&noise, &buf, RS_PUB);
    ASSERT_TRUE(ret);

    const uint8_t OUTPUT_1S[50] = {
        0x00, 0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c,
        0xe5, 0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80,
        0x70, 0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d,
        0x9c, 0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff,
        0x73, 0xf7, 0x0d, 0xf6, 0x08, 0x65, 0x51, 0x15,
        0x1f, 0x58, 0xb8, 0xaf, 0xe6, 0xc1, 0x95, 0x78,
        0x2c, 0x6a,
    };
    ASSERT_EQ(sizeof(OUTPUT_1S), buf.len);
    ASSERT_EQ(0, memcmp(OUTPUT_1S, buf.buf, sizeof(OUTPUT_1S)));

    utl_buf_free(&buf);


    //Act Two Receivce
    //input: 0x0004466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730ae
    const uint8_t INPUT_2S[50] = {
        0x00, 0x04, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63,
        0xe5, 0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5,
        0x80, 0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1,
        0x49, 0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae,
        0x3f, 0x27, 0x6e, 0x24, 0x70, 0xb9, 0x3a, 0xac,
        0x58, 0x3c, 0x9e, 0xf6, 0xea, 0xfc, 0xa3, 0xf7,
        0x30, 0xae,
    };
    utl_buf_alloccopy(&buf, INPUT_2S, sizeof(INPUT_2S));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
    ASSERT_EQ(0, noise.p_handshake);
    ASSERT_FALSE(ln_noise_handshake_state(&noise));

    utl_buf_free(&buf);

    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
}


//name: transport-initiator act2 bad MAC test
TEST_F(bolt8test, initiator_fail_act2_bad_mac)
{
    bool ret;
    ln_noise_t noise;

    //vector
    const uint8_t LS_PRIV[] = {
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
    };
    //const uint8_t RS_PRIV[] = {
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    //};
    const uint8_t RS_PUB[] = {
        0x02, 0x8d, 0x75, 0x00, 0xdd, 0x4c, 0x12, 0x68,
        0x5d, 0x1f, 0x56, 0x8b, 0x4c, 0x2b, 0x50, 0x48,
        0xe8, 0x53, 0x4b, 0x87, 0x33, 0x19, 0xf3, 0xa8,
        0xda, 0xa6, 0x12, 0xb4, 0x69, 0x13, 0x2e, 0xc7,
        0xf7,
    };

    ln_node_setkey(LS_PRIV);

    ret = ln_noise_handshake_init(&noise, RS_PUB);
    ASSERT_TRUE(ret);
    struct bolt8_t *pBolt = (struct bolt8_t *)noise.p_handshake;
    ASSERT_EQ(START_INITIATOR, pBolt->state);

    //ephemeralの差し替え
    const uint8_t EPRIV[] = {
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
    };
    const uint8_t EPUB[] = {
        0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c, 0xe5,
        0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80, 0x70,
        0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d, 0x9c,
        0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff, 0x73,
        0xf7,
    };
    memcpy(pBolt->e.priv, EPRIV, sizeof(EPRIV));
    memcpy(pBolt->e.pub, EPUB, sizeof(EPUB));

    //Act One send
    utl_buf_t buf = UTL_BUF_INIT;
    ret = ln_noise_handshake_start(&noise, &buf, RS_PUB);
    ASSERT_TRUE(ret);

    const uint8_t OUTPUT_1S[50] = {
        0x00, 0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c,
        0xe5, 0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80,
        0x70, 0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d,
        0x9c, 0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff,
        0x73, 0xf7, 0x0d, 0xf6, 0x08, 0x65, 0x51, 0x15,
        0x1f, 0x58, 0xb8, 0xaf, 0xe6, 0xc1, 0x95, 0x78,
        0x2c, 0x6a,
    };
    ASSERT_EQ(sizeof(OUTPUT_1S), buf.len);
    ASSERT_EQ(0, memcmp(OUTPUT_1S, buf.buf, sizeof(OUTPUT_1S)));

    utl_buf_free(&buf);


    //Act Two Receivce
    //input: 0x0002466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730af
    const uint8_t INPUT_2S[50] = {
        0x00, 0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63,
        0xe5, 0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5,
        0x80, 0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1,
        0x49, 0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae,
        0x3f, 0x27, 0x6e, 0x24, 0x70, 0xb9, 0x3a, 0xac,
        0x58, 0x3c, 0x9e, 0xf6, 0xea, 0xfc, 0xa3, 0xf7,
        0x30, 0xaf,
    };
    utl_buf_alloccopy(&buf, INPUT_2S, sizeof(INPUT_2S));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
    ASSERT_EQ(0, noise.p_handshake);
    ASSERT_FALSE(ln_noise_handshake_state(&noise));

    utl_buf_free(&buf);

    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
}


TEST_F(bolt8test, responder)
{
    bool ret;
    ln_noise_t noise;

    //vector
    const uint8_t LS_PRIV[] = {
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    };

    ln_node_setkey(LS_PRIV);

    ret = ln_noise_handshake_init(&noise, NULL);
    ASSERT_TRUE(ret);
    struct bolt8_t *pBolt = (struct bolt8_t *)noise.p_handshake;
    ASSERT_EQ(WAIT_ACT_ONE, pBolt->state);
    ASSERT_TRUE(ln_noise_handshake_state(&noise));

    //ephemeralの差し替え
    const uint8_t EPRIV[] = {
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    };
    const uint8_t EPUB[] = {
        0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63, 0xe5,
        0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5, 0x80,
        0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1, 0x49,
        0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae, 0x3f,
        0x27,
    };
    memcpy(pBolt->e.priv, EPRIV, sizeof(EPRIV));
    memcpy(pBolt->e.pub, EPUB, sizeof(EPUB));
    noise.send_ctx.nonce = 10;
    noise.recv_ctx.nonce = 10;

    //Act One Receive and Act Two Send
    //input: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a
    const uint8_t INPUT_1R[50] = {
        0x00, 0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c,
        0xe5, 0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80,
        0x70, 0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d,
        0x9c, 0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff,
        0x73, 0xf7, 0x0d, 0xf6, 0x08, 0x65, 0x51, 0x15,
        0x1f, 0x58, 0xb8, 0xaf, 0xe6, 0xc1, 0x95, 0x78,
        0x2c, 0x6a,
    };
    utl_buf_t buf = UTL_BUF_INIT;
    utl_buf_alloccopy(&buf, INPUT_1R, sizeof(INPUT_1R));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_TRUE(ret);
    ASSERT_EQ(WAIT_ACT_THREE, pBolt->state);
    ASSERT_EQ(10, noise.send_ctx.nonce);
    ASSERT_EQ(10, noise.recv_ctx.nonce);
    ASSERT_TRUE(ln_noise_handshake_state(&noise));

    //output: 0x0002466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730ae
    const uint8_t OUTPUT_1R[50] = {
        0x00, 0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63,
        0xe5, 0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5,
        0x80, 0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1,
        0x49, 0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae,
        0x3f, 0x27, 0x6e, 0x24, 0x70, 0xb9, 0x3a, 0xac,
        0x58, 0x3c, 0x9e, 0xf6, 0xea, 0xfc, 0xa3, 0xf7,
        0x30, 0xae,
    };
    ASSERT_EQ(sizeof(OUTPUT_1R), buf.len);
    ASSERT_EQ(0, memcmp(OUTPUT_1R, buf.buf, sizeof(OUTPUT_1R)));

    utl_buf_free(&buf);

    //Act Three Receive
    //input: 0x00b9e3a702e93e3a9948c2ed6e5fd7590a6e1c3a0344cfc9d5b57357049aa22355361aa02e55a8fc28fef5bd6d71ad0c38228dc68b1c466263b47fdf31e560e139ba
    const uint8_t INPUT_3R[66] = {
        0x00, 0xb9, 0xe3, 0xa7, 0x02, 0xe9, 0x3e, 0x3a,
        0x99, 0x48, 0xc2, 0xed, 0x6e, 0x5f, 0xd7, 0x59,
        0x0a, 0x6e, 0x1c, 0x3a, 0x03, 0x44, 0xcf, 0xc9,
        0xd5, 0xb5, 0x73, 0x57, 0x04, 0x9a, 0xa2, 0x23,
        0x55, 0x36, 0x1a, 0xa0, 0x2e, 0x55, 0xa8, 0xfc,
        0x28, 0xfe, 0xf5, 0xbd, 0x6d, 0x71, 0xad, 0x0c,
        0x38, 0x22, 0x8d, 0xc6, 0x8b, 0x1c, 0x46, 0x62,
        0x63, 0xb4, 0x7f, 0xdf, 0x31, 0xe5, 0x60, 0xe1,
        0x39, 0xba,
    };
    utl_buf_alloccopy(&buf, INPUT_3R, sizeof(INPUT_3R));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_TRUE(ret);
    ASSERT_FALSE(ln_noise_handshake_state(&noise));

    const uint8_t RK[] = {
        0x96, 0x9a, 0xb3, 0x1b, 0x4d, 0x28, 0x8c, 0xed,
        0xf6, 0x21, 0x88, 0x39, 0xb2, 0x7a, 0x3e, 0x21,
        0x40, 0x82, 0x70, 0x47, 0xf2, 0xc0, 0xf0, 0x1b,
        0xf5, 0xc0, 0x44, 0x35, 0xd4, 0x35, 0x11, 0xa9,
    };
    const uint8_t SK[] = {
        0xbb, 0x90, 0x20, 0xb8, 0x96, 0x5f, 0x4d, 0xf0,
        0x47, 0xe0, 0x7f, 0x95, 0x5f, 0x3c, 0x4b, 0x88,
        0x41, 0x89, 0x84, 0xaa, 0xdc, 0x5c, 0xdb, 0x35,
        0x09, 0x6b, 0x9e, 0xa8, 0xfa, 0x5c, 0x34, 0x42,
    };
    ASSERT_EQ(0, memcmp(RK, noise.recv_ctx.key, sizeof(RK)));
    ASSERT_EQ(0, memcmp(SK, noise.send_ctx.key, sizeof(SK)));
    ASSERT_EQ(0, noise.send_ctx.nonce);
    ASSERT_EQ(0, noise.recv_ctx.nonce);
    ASSERT_EQ(0, noise.p_handshake);

    utl_buf_free(&buf);

    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
}


//name: transport-responder act1 short read test
TEST_F(bolt8test, responder_act1_short_read)
{
    bool ret;
    ln_noise_t noise;

    //vector
    const uint8_t LS_PRIV[] = {
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    };

    ln_node_setkey(LS_PRIV);

    ret = ln_noise_handshake_init(&noise, NULL);
    ASSERT_TRUE(ret);
    struct bolt8_t *pBolt = (struct bolt8_t *)noise.p_handshake;
    ASSERT_EQ(WAIT_ACT_ONE, pBolt->state);

    //ephemeralの差し替え
    const uint8_t EPRIV[] = {
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    };
    const uint8_t EPUB[] = {
        0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63, 0xe5,
        0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5, 0x80,
        0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1, 0x49,
        0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae, 0x3f,
        0x27,
    };
    memcpy(pBolt->e.priv, EPRIV, sizeof(EPRIV));
    memcpy(pBolt->e.pub, EPUB, sizeof(EPUB));

    //Act One Receive
    //input: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c
    const uint8_t INPUT_1R[50] = {
        0x00, 0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c,
        0xe5, 0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80,
        0x70, 0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d,
        0x9c, 0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff,
        0x73, 0xf7, 0x0d, 0xf6, 0x08, 0x65, 0x51, 0x15,
        0x1f, 0x58, 0xb8, 0xaf, 0xe6, 0xc1, 0x95, 0x78,
        0x2c,
    };
    utl_buf_t buf = UTL_BUF_INIT;
    utl_buf_alloccopy(&buf, INPUT_1R, sizeof(INPUT_1R));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
    ASSERT_EQ(0, noise.p_handshake);

    utl_buf_free(&buf);

    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
}


//name: transport-responder act1 bad version test
TEST_F(bolt8test, responder_act1_bad_version)
{
    bool ret;
    ln_noise_t noise;

    //vector
    const uint8_t LS_PRIV[] = {
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    };

    ln_node_setkey(LS_PRIV);

    ret = ln_noise_handshake_init(&noise, NULL);
    ASSERT_TRUE(ret);
    struct bolt8_t *pBolt = (struct bolt8_t *)noise.p_handshake;
    ASSERT_EQ(WAIT_ACT_ONE, pBolt->state);

    //ephemeralの差し替え
    const uint8_t EPRIV[] = {
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    };
    const uint8_t EPUB[] = {
        0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63, 0xe5,
        0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5, 0x80,
        0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1, 0x49,
        0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae, 0x3f,
        0x27,
    };
    memcpy(pBolt->e.priv, EPRIV, sizeof(EPRIV));
    memcpy(pBolt->e.pub, EPUB, sizeof(EPUB));

    //Act One Receive
    //input: 0x01036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a
    const uint8_t INPUT_1R[50] = {
        0x01, 0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c,
        0xe5, 0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80,
        0x70, 0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d,
        0x9c, 0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff,
        0x73, 0xf7, 0x0d, 0xf6, 0x08, 0x65, 0x51, 0x15,
        0x1f, 0x58, 0xb8, 0xaf, 0xe6, 0xc1, 0x95, 0x78,
        0x2c, 0x6a,
    };
    utl_buf_t buf = UTL_BUF_INIT;
    utl_buf_alloccopy(&buf, INPUT_1R, sizeof(INPUT_1R));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
    ASSERT_EQ(0, noise.p_handshake);
    ASSERT_FALSE(ln_noise_handshake_state(&noise));

    utl_buf_free(&buf);

    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
}


//name: transport-responder act1 bad key serialization test
TEST_F(bolt8test, responder_act1_bad_key_serialization)
{
    bool ret;
    ln_noise_t noise;

    //vector
    const uint8_t LS_PRIV[] = {
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    };

    ln_node_setkey(LS_PRIV);

    ret = ln_noise_handshake_init(&noise, NULL);
    ASSERT_TRUE(ret);
    struct bolt8_t *pBolt = (struct bolt8_t *)noise.p_handshake;
    ASSERT_EQ(WAIT_ACT_ONE, pBolt->state);

    //ephemeralの差し替え
    const uint8_t EPRIV[] = {
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    };
    const uint8_t EPUB[] = {
        0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63, 0xe5,
        0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5, 0x80,
        0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1, 0x49,
        0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae, 0x3f,
        0x27,
    };
    memcpy(pBolt->e.priv, EPRIV, sizeof(EPRIV));
    memcpy(pBolt->e.pub, EPUB, sizeof(EPUB));

    //Act One Receive
    //input: 0x00046360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a
    const uint8_t INPUT_1R[50] = {
        0x00, 0x04, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c,
        0xe5, 0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80,
        0x70, 0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d,
        0x9c, 0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff,
        0x73, 0xf7, 0x0d, 0xf6, 0x08, 0x65, 0x51, 0x15,
        0x1f, 0x58, 0xb8, 0xaf, 0xe6, 0xc1, 0x95, 0x78,
        0x2c, 0x6a,
    };
    utl_buf_t buf = UTL_BUF_INIT;
    utl_buf_alloccopy(&buf, INPUT_1R, sizeof(INPUT_1R));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
    ASSERT_EQ(0, noise.p_handshake);
    ASSERT_FALSE(ln_noise_handshake_state(&noise));

    utl_buf_free(&buf);

    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
}


//name: transport-responder act1 bad MAC test
TEST_F(bolt8test, responder_act1_bad_mac)
{
    bool ret;
    ln_noise_t noise;

    //vector
    const uint8_t LS_PRIV[] = {
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    };

    ln_node_setkey(LS_PRIV);

    ret = ln_noise_handshake_init(&noise, NULL);
    ASSERT_TRUE(ret);
    struct bolt8_t *pBolt = (struct bolt8_t *)noise.p_handshake;
    ASSERT_EQ(WAIT_ACT_ONE, pBolt->state);

    //ephemeralの差し替え
    const uint8_t EPRIV[] = {
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    };
    const uint8_t EPUB[] = {
        0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63, 0xe5,
        0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5, 0x80,
        0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1, 0x49,
        0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae, 0x3f,
        0x27,
    };
    memcpy(pBolt->e.priv, EPRIV, sizeof(EPRIV));
    memcpy(pBolt->e.pub, EPUB, sizeof(EPUB));

    //Act One Receive
    //input: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6b
    const uint8_t INPUT_1R[50] = {
        0x00, 0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c,
        0xe5, 0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80,
        0x70, 0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d,
        0x9c, 0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff,
        0x73, 0xf7, 0x0d, 0xf6, 0x08, 0x65, 0x51, 0x15,
        0x1f, 0x58, 0xb8, 0xaf, 0xe6, 0xc1, 0x95, 0x78,
        0x2c, 0x6b,
    };
    utl_buf_t buf = UTL_BUF_INIT;
    utl_buf_alloccopy(&buf, INPUT_1R, sizeof(INPUT_1R));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
    ASSERT_EQ(0, noise.p_handshake);
    ASSERT_FALSE(ln_noise_handshake_state(&noise));

    utl_buf_free(&buf);

    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
}


//name: transport-responder act3 bad version test
TEST_F(bolt8test, responder_act3_bad_version)
{
    bool ret;
    ln_noise_t noise;

    //vector
    const uint8_t LS_PRIV[] = {
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    };

    ln_node_setkey(LS_PRIV);

    ret = ln_noise_handshake_init(&noise, NULL);
    ASSERT_TRUE(ret);
    struct bolt8_t *pBolt = (struct bolt8_t *)noise.p_handshake;
    ASSERT_EQ(WAIT_ACT_ONE, pBolt->state);

    //ephemeralの差し替え
    const uint8_t EPRIV[] = {
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    };
    const uint8_t EPUB[] = {
        0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63, 0xe5,
        0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5, 0x80,
        0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1, 0x49,
        0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae, 0x3f,
        0x27,
    };
    memcpy(pBolt->e.priv, EPRIV, sizeof(EPRIV));
    memcpy(pBolt->e.pub, EPUB, sizeof(EPUB));

    //Act One Receive and Act Two Send
    //input: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a
    const uint8_t INPUT_1R[50] = {
        0x00, 0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c,
        0xe5, 0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80,
        0x70, 0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d,
        0x9c, 0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff,
        0x73, 0xf7, 0x0d, 0xf6, 0x08, 0x65, 0x51, 0x15,
        0x1f, 0x58, 0xb8, 0xaf, 0xe6, 0xc1, 0x95, 0x78,
        0x2c, 0x6a,
    };
    utl_buf_t buf = UTL_BUF_INIT;
    utl_buf_alloccopy(&buf, INPUT_1R, sizeof(INPUT_1R));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_TRUE(ret);
    ASSERT_EQ(WAIT_ACT_THREE, pBolt->state);
    ASSERT_TRUE(ln_noise_handshake_state(&noise));

    //output: 0x0002466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730ae
    const uint8_t OUTPUT_1R[50] = {
        0x00, 0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63,
        0xe5, 0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5,
        0x80, 0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1,
        0x49, 0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae,
        0x3f, 0x27, 0x6e, 0x24, 0x70, 0xb9, 0x3a, 0xac,
        0x58, 0x3c, 0x9e, 0xf6, 0xea, 0xfc, 0xa3, 0xf7,
        0x30, 0xae,
    };
    ASSERT_EQ(sizeof(OUTPUT_1R), buf.len);
    ASSERT_EQ(0, memcmp(OUTPUT_1R, buf.buf, sizeof(OUTPUT_1R)));

    utl_buf_free(&buf);

    //Act Three Receive
    //input: 0x01b9e3a702e93e3a9948c2ed6e5fd7590a6e1c3a0344cfc9d5b57357049aa22355361aa02e55a8fc28fef5bd6d71ad0c38228dc68b1c466263b47fdf31e560e139ba
    const uint8_t INPUT_3R[66] = {
       0x01, 0xb9, 0xe3, 0xa7, 0x02, 0xe9, 0x3e, 0x3a,
       0x99, 0x48, 0xc2, 0xed, 0x6e, 0x5f, 0xd7, 0x59,
       0x0a, 0x6e, 0x1c, 0x3a, 0x03, 0x44, 0xcf, 0xc9,
       0xd5, 0xb5, 0x73, 0x57, 0x04, 0x9a, 0xa2, 0x23,
       0x55, 0x36, 0x1a, 0xa0, 0x2e, 0x55, 0xa8, 0xfc,
       0x28, 0xfe, 0xf5, 0xbd, 0x6d, 0x71, 0xad, 0x0c,
       0x38, 0x22, 0x8d, 0xc6, 0x8b, 0x1c, 0x46, 0x62,
       0x63, 0xb4, 0x7f, 0xdf, 0x31, 0xe5, 0x60, 0xe1,
       0x39, 0xba,
    };
    utl_buf_alloccopy(&buf, INPUT_3R, sizeof(INPUT_3R));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
    ASSERT_EQ(0, noise.p_handshake);
    ASSERT_FALSE(ln_noise_handshake_state(&noise));

    utl_buf_free(&buf);

    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
}


//name: transport-responder act3 short read test
TEST_F(bolt8test, responder_act3_short_read)
{
    bool ret;
    ln_noise_t noise;

    //vector
    const uint8_t LS_PRIV[] = {
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    };

    ln_node_setkey(LS_PRIV);

    ret = ln_noise_handshake_init(&noise, NULL);
    ASSERT_TRUE(ret);
    struct bolt8_t *pBolt = (struct bolt8_t *)noise.p_handshake;
    ASSERT_EQ(WAIT_ACT_ONE, pBolt->state);

    //ephemeralの差し替え
    const uint8_t EPRIV[] = {
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    };
    const uint8_t EPUB[] = {
        0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63, 0xe5,
        0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5, 0x80,
        0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1, 0x49,
        0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae, 0x3f,
        0x27,
    };
    memcpy(pBolt->e.priv, EPRIV, sizeof(EPRIV));
    memcpy(pBolt->e.pub, EPUB, sizeof(EPUB));

    //Act One Receive and Act Two Send
    //input: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a
    const uint8_t INPUT_1R[50] = {
        0x00, 0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c,
        0xe5, 0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80,
        0x70, 0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d,
        0x9c, 0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff,
        0x73, 0xf7, 0x0d, 0xf6, 0x08, 0x65, 0x51, 0x15,
        0x1f, 0x58, 0xb8, 0xaf, 0xe6, 0xc1, 0x95, 0x78,
        0x2c, 0x6a,
    };
    utl_buf_t buf = UTL_BUF_INIT;
    utl_buf_alloccopy(&buf, INPUT_1R, sizeof(INPUT_1R));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_TRUE(ret);
    ASSERT_EQ(WAIT_ACT_THREE, pBolt->state);
    ASSERT_TRUE(ln_noise_handshake_state(&noise));

    //output: 0x0002466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730ae
    const uint8_t OUTPUT_1R[50] = {
        0x00, 0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63,
        0xe5, 0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5,
        0x80, 0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1,
        0x49, 0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae,
        0x3f, 0x27, 0x6e, 0x24, 0x70, 0xb9, 0x3a, 0xac,
        0x58, 0x3c, 0x9e, 0xf6, 0xea, 0xfc, 0xa3, 0xf7,
        0x30, 0xae,
    };
    ASSERT_EQ(sizeof(OUTPUT_1R), buf.len);
    ASSERT_EQ(0, memcmp(OUTPUT_1R, buf.buf, sizeof(OUTPUT_1R)));

    utl_buf_free(&buf);

    //Act Three Receive
    //input: 0x00b9e3a702e93e3a9948c2ed6e5fd7590a6e1c3a0344cfc9d5b57357049aa22355361aa02e55a8fc28fef5bd6d71ad0c38228dc68b1c466263b47fdf31e560e139
    const uint8_t INPUT_3R[66] = {
       0x00, 0xb9, 0xe3, 0xa7, 0x02, 0xe9, 0x3e, 0x3a,
       0x99, 0x48, 0xc2, 0xed, 0x6e, 0x5f, 0xd7, 0x59,
       0x0a, 0x6e, 0x1c, 0x3a, 0x03, 0x44, 0xcf, 0xc9,
       0xd5, 0xb5, 0x73, 0x57, 0x04, 0x9a, 0xa2, 0x23,
       0x55, 0x36, 0x1a, 0xa0, 0x2e, 0x55, 0xa8, 0xfc,
       0x28, 0xfe, 0xf5, 0xbd, 0x6d, 0x71, 0xad, 0x0c,
       0x38, 0x22, 0x8d, 0xc6, 0x8b, 0x1c, 0x46, 0x62,
       0x63, 0xb4, 0x7f, 0xdf, 0x31, 0xe5, 0x60, 0xe1,
       0x39,
    };
    utl_buf_alloccopy(&buf, INPUT_3R, sizeof(INPUT_3R));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
    ASSERT_EQ(0, noise.p_handshake);
    ASSERT_FALSE(ln_noise_handshake_state(&noise));

    utl_buf_free(&buf);

    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
}


//name: transport-responder act3 bad MAC for ciphertext test
TEST_F(bolt8test, responder_act3_bad_mac_cipher)
{
    bool ret;
    ln_noise_t noise;

    //vector
    const uint8_t LS_PRIV[] = {
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    };

    ln_node_setkey(LS_PRIV);

    ret = ln_noise_handshake_init(&noise, NULL);
    ASSERT_TRUE(ret);
    struct bolt8_t *pBolt = (struct bolt8_t *)noise.p_handshake;
    ASSERT_EQ(WAIT_ACT_ONE, pBolt->state);

    //ephemeralの差し替え
    const uint8_t EPRIV[] = {
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    };
    const uint8_t EPUB[] = {
        0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63, 0xe5,
        0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5, 0x80,
        0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1, 0x49,
        0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae, 0x3f,
        0x27,
    };
    memcpy(pBolt->e.priv, EPRIV, sizeof(EPRIV));
    memcpy(pBolt->e.pub, EPUB, sizeof(EPUB));

    //Act One Receive and Act Two Send
    //input: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a
    const uint8_t INPUT_1R[50] = {
        0x00, 0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c,
        0xe5, 0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80,
        0x70, 0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d,
        0x9c, 0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff,
        0x73, 0xf7, 0x0d, 0xf6, 0x08, 0x65, 0x51, 0x15,
        0x1f, 0x58, 0xb8, 0xaf, 0xe6, 0xc1, 0x95, 0x78,
        0x2c, 0x6a,
    };
    utl_buf_t buf = UTL_BUF_INIT;
    utl_buf_alloccopy(&buf, INPUT_1R, sizeof(INPUT_1R));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_TRUE(ret);
    ASSERT_EQ(WAIT_ACT_THREE, pBolt->state);
    ASSERT_TRUE(ln_noise_handshake_state(&noise));

    //output: 0x0002466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730ae
    const uint8_t OUTPUT_1R[50] = {
        0x00, 0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63,
        0xe5, 0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5,
        0x80, 0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1,
        0x49, 0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae,
        0x3f, 0x27, 0x6e, 0x24, 0x70, 0xb9, 0x3a, 0xac,
        0x58, 0x3c, 0x9e, 0xf6, 0xea, 0xfc, 0xa3, 0xf7,
        0x30, 0xae,
    };
    ASSERT_EQ(sizeof(OUTPUT_1R), buf.len);
    ASSERT_EQ(0, memcmp(OUTPUT_1R, buf.buf, sizeof(OUTPUT_1R)));

    utl_buf_free(&buf);

    //Act Three Receive
    //input: 0x00c9e3a702e93e3a9948c2ed6e5fd7590a6e1c3a0344cfc9d5b57357049aa22355361aa02e55a8fc28fef5bd6d71ad0c38228dc68b1c466263b47fdf31e560e139ba
    const uint8_t INPUT_3R[66] = {
       0x00, 0xc9, 0xe3, 0xa7, 0x02, 0xe9, 0x3e, 0x3a,
       0x99, 0x48, 0xc2, 0xed, 0x6e, 0x5f, 0xd7, 0x59,
       0x0a, 0x6e, 0x1c, 0x3a, 0x03, 0x44, 0xcf, 0xc9,
       0xd5, 0xb5, 0x73, 0x57, 0x04, 0x9a, 0xa2, 0x23,
       0x55, 0x36, 0x1a, 0xa0, 0x2e, 0x55, 0xa8, 0xfc,
       0x28, 0xfe, 0xf5, 0xbd, 0x6d, 0x71, 0xad, 0x0c,
       0x38, 0x22, 0x8d, 0xc6, 0x8b, 0x1c, 0x46, 0x62,
       0x63, 0xb4, 0x7f, 0xdf, 0x31, 0xe5, 0x60, 0xe1,
       0x39, 0xba,
    };
    utl_buf_alloccopy(&buf, INPUT_3R, sizeof(INPUT_3R));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
    ASSERT_EQ(0, noise.p_handshake);
    ASSERT_FALSE(ln_noise_handshake_state(&noise));

    utl_buf_free(&buf);

    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
}


//name: transport-responder act3 bad rs test
TEST_F(bolt8test, responder_act3_bad_rs)
{
    bool ret;
    ln_noise_t noise;

    //vector
    const uint8_t LS_PRIV[] = {
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    };

    ln_node_setkey(LS_PRIV);

    ret = ln_noise_handshake_init(&noise, NULL);
    ASSERT_TRUE(ret);
    struct bolt8_t *pBolt = (struct bolt8_t *)noise.p_handshake;
    ASSERT_EQ(WAIT_ACT_ONE, pBolt->state);

    //ephemeralの差し替え
    const uint8_t EPRIV[] = {
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    };
    const uint8_t EPUB[] = {
        0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63, 0xe5,
        0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5, 0x80,
        0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1, 0x49,
        0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae, 0x3f,
        0x27,
    };
    memcpy(pBolt->e.priv, EPRIV, sizeof(EPRIV));
    memcpy(pBolt->e.pub, EPUB, sizeof(EPUB));

    //Act One Receive and Act Two Send
    //input: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a
    const uint8_t INPUT_1R[50] = {
        0x00, 0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c,
        0xe5, 0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80,
        0x70, 0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d,
        0x9c, 0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff,
        0x73, 0xf7, 0x0d, 0xf6, 0x08, 0x65, 0x51, 0x15,
        0x1f, 0x58, 0xb8, 0xaf, 0xe6, 0xc1, 0x95, 0x78,
        0x2c, 0x6a,
    };
    utl_buf_t buf = UTL_BUF_INIT;
    utl_buf_alloccopy(&buf, INPUT_1R, sizeof(INPUT_1R));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_TRUE(ret);
    ASSERT_EQ(WAIT_ACT_THREE, pBolt->state);

    //output: 0x0002466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730ae
    const uint8_t OUTPUT_1R[50] = {
        0x00, 0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63,
        0xe5, 0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5,
        0x80, 0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1,
        0x49, 0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae,
        0x3f, 0x27, 0x6e, 0x24, 0x70, 0xb9, 0x3a, 0xac,
        0x58, 0x3c, 0x9e, 0xf6, 0xea, 0xfc, 0xa3, 0xf7,
        0x30, 0xae,
    };
    ASSERT_EQ(sizeof(OUTPUT_1R), buf.len);
    ASSERT_EQ(0, memcmp(OUTPUT_1R, buf.buf, sizeof(OUTPUT_1R)));
    ASSERT_TRUE(ln_noise_handshake_state(&noise));

    utl_buf_free(&buf);

    //Act Three Receive
    //input: 0x00bfe3a702e93e3a9948c2ed6e5fd7590a6e1c3a0344cfc9d5b57357049aa2235536ad09a8ee351870c2bb7f78b754a26c6cef79a98d25139c856d7efd252c2ae73c
    const uint8_t INPUT_3R[66] = {
       0x00, 0xbf, 0xe3, 0xa7, 0x02, 0xe9, 0x3e, 0x3a,
       0x99, 0x48, 0xc2, 0xed, 0x6e, 0x5f, 0xd7, 0x59,
       0x0a, 0x6e, 0x1c, 0x3a, 0x03, 0x44, 0xcf, 0xc9,
       0xd5, 0xb5, 0x73, 0x57, 0x04, 0x9a, 0xa2, 0x23,
       0x55, 0x36, 0xad, 0x09, 0xa8, 0xee, 0x35, 0x18,
       0x70, 0xc2, 0xbb, 0x7f, 0x78, 0xb7, 0x54, 0xa2,
       0x6c, 0x6c, 0xef, 0x79, 0xa9, 0x8d, 0x25, 0x13,
       0x9c, 0x85, 0x6d, 0x7e, 0xfd, 0x25, 0x2c, 0x2a,
       0xe7, 0x3c,
    };
    utl_buf_alloccopy(&buf, INPUT_3R, sizeof(INPUT_3R));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
    ASSERT_EQ(0, noise.p_handshake);
    ASSERT_FALSE(ln_noise_handshake_state(&noise));

    utl_buf_free(&buf);

    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
}


//name: transport-responder act3 bad MAC test
TEST_F(bolt8test, responder_act3_bad_mac)
{
    bool ret;
    ln_noise_t noise;

    //vector
    const uint8_t LS_PRIV[] = {
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    };

    ln_node_setkey(LS_PRIV);

    ret = ln_noise_handshake_init(&noise, NULL);
    ASSERT_TRUE(ret);
    struct bolt8_t *pBolt = (struct bolt8_t *)noise.p_handshake;
    ASSERT_EQ(WAIT_ACT_ONE, pBolt->state);

    //ephemeralの差し替え
    const uint8_t EPRIV[] = {
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    };
    const uint8_t EPUB[] = {
        0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63, 0xe5,
        0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5, 0x80,
        0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1, 0x49,
        0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae, 0x3f,
        0x27,
    };
    memcpy(pBolt->e.priv, EPRIV, sizeof(EPRIV));
    memcpy(pBolt->e.pub, EPUB, sizeof(EPUB));

    //Act One Receive and Act Two Send
    //input: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a
    const uint8_t INPUT_1R[50] = {
        0x00, 0x03, 0x63, 0x60, 0xe8, 0x56, 0x31, 0x0c,
        0xe5, 0xd2, 0x94, 0xe8, 0xbe, 0x33, 0xfc, 0x80,
        0x70, 0x77, 0xdc, 0x56, 0xac, 0x80, 0xd9, 0x5d,
        0x9c, 0xd4, 0xdd, 0xbd, 0x21, 0x32, 0x5e, 0xff,
        0x73, 0xf7, 0x0d, 0xf6, 0x08, 0x65, 0x51, 0x15,
        0x1f, 0x58, 0xb8, 0xaf, 0xe6, 0xc1, 0x95, 0x78,
        0x2c, 0x6a,
    };
    utl_buf_t buf = UTL_BUF_INIT;
    utl_buf_alloccopy(&buf, INPUT_1R, sizeof(INPUT_1R));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_TRUE(ret);
    ASSERT_EQ(WAIT_ACT_THREE, pBolt->state);
    ASSERT_TRUE(ln_noise_handshake_state(&noise));

    //output: 0x0002466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730ae
    const uint8_t OUTPUT_1R[50] = {
        0x00, 0x02, 0x46, 0x6d, 0x7f, 0xca, 0xe5, 0x63,
        0xe5, 0xcb, 0x09, 0xa0, 0xd1, 0x87, 0x0b, 0xb5,
        0x80, 0x34, 0x48, 0x04, 0x61, 0x78, 0x79, 0xa1,
        0x49, 0x49, 0xcf, 0x22, 0x28, 0x5f, 0x1b, 0xae,
        0x3f, 0x27, 0x6e, 0x24, 0x70, 0xb9, 0x3a, 0xac,
        0x58, 0x3c, 0x9e, 0xf6, 0xea, 0xfc, 0xa3, 0xf7,
        0x30, 0xae,
    };
    ASSERT_EQ(sizeof(OUTPUT_1R), buf.len);
    ASSERT_EQ(0, memcmp(OUTPUT_1R, buf.buf, sizeof(OUTPUT_1R)));

    utl_buf_free(&buf);

    //Act Three Receive
    //input: 0x00b9e3a702e93e3a9948c2ed6e5fd7590a6e1c3a0344cfc9d5b57357049aa22355361aa02e55a8fc28fef5bd6d71ad0c38228dc68b1c466263b47fdf31e560e139bb
    const uint8_t INPUT_3R[66] = {
       0x00, 0xb9, 0xe3, 0xa7, 0x02, 0xe9, 0x3e, 0x3a,
       0x99, 0x48, 0xc2, 0xed, 0x6e, 0x5f, 0xd7, 0x59,
       0x0a, 0x6e, 0x1c, 0x3a, 0x03, 0x44, 0xcf, 0xc9,
       0xd5, 0xb5, 0x73, 0x57, 0x04, 0x9a, 0xa2, 0x23,
       0x55, 0x36, 0x1a, 0xa0, 0x2e, 0x55, 0xa8, 0xfc,
       0x28, 0xfe, 0xf5, 0xbd, 0x6d, 0x71, 0xad, 0x0c,
       0x38, 0x22, 0x8d, 0xc6, 0x8b, 0x1c, 0x46, 0x62,
       0x63, 0xb4, 0x7f, 0xdf, 0x31, 0xe5, 0x60, 0xe1,
       0x39, 0xbb,
    };
    utl_buf_alloccopy(&buf, INPUT_3R, sizeof(INPUT_3R));
    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
    ASSERT_EQ(0, noise.p_handshake);
    ASSERT_FALSE(ln_noise_handshake_state(&noise));

    utl_buf_free(&buf);

    ret = ln_noise_handshake_recv(&noise, &buf);
    ASSERT_FALSE(ret);
}


TEST_F(bolt8test, enc_dec)
{
    bool ret;
    ln_noise_t noise;
    ln_noise_t noise_dec;

    const uint8_t SK[] = {
        0x96, 0x9a, 0xb3, 0x1b, 0x4d, 0x28, 0x8c, 0xed,
        0xf6, 0x21, 0x88, 0x39, 0xb2, 0x7a, 0x3e, 0x21,
        0x40, 0x82, 0x70, 0x47, 0xf2, 0xc0, 0xf0, 0x1b,
        0xf5, 0xc0, 0x44, 0x35, 0xd4, 0x35, 0x11, 0xa9,
    };
    const uint8_t RK[] = {
        0xbb, 0x90, 0x20, 0xb8, 0x96, 0x5f, 0x4d, 0xf0,
        0x47, 0xe0, 0x7f, 0x95, 0x5f, 0x3c, 0x4b, 0x88,
        0x41, 0x89, 0x84, 0xaa, 0xdc, 0x5c, 0xdb, 0x35,
        0x09, 0x6b, 0x9e, 0xa8, 0xfa, 0x5c, 0x34, 0x42,
    };
    const uint8_t CK[] = {
        0x91, 0x92, 0x19, 0xdb, 0xb2, 0x92, 0x0a, 0xfa,
        0x8d, 0xb8, 0x0f, 0x9a, 0x51, 0x78, 0x7a, 0x84,
        0x0b, 0xcf, 0x11, 0x1e, 0xd8, 0xd5, 0x88, 0xca,
        0xf9, 0xab, 0x4b, 0xe7, 0x16, 0xe4, 0x2b, 0x01,
    };

    memcpy(noise.send_ctx.key, SK, sizeof(SK));
    memcpy(noise.recv_ctx.key, RK, sizeof(RK));
    memcpy(noise.send_ctx.ck, CK, sizeof(CK));
    memcpy(noise.recv_ctx.ck, CK, sizeof(CK));
    noise.send_ctx.nonce = 0;
    noise.recv_ctx.nonce = 0;

    memcpy(noise_dec.send_ctx.key, RK, sizeof(RK));
    memcpy(noise_dec.recv_ctx.key, SK, sizeof(SK));
    memcpy(noise_dec.send_ctx.ck, CK, sizeof(CK));
    memcpy(noise_dec.recv_ctx.ck, CK, sizeof(CK));
    noise_dec.send_ctx.nonce = 0;
    noise_dec.recv_ctx.nonce = 0;

    utl_buf_t bufin = UTL_BUF_INIT;
    utl_buf_t buf = UTL_BUF_INIT;
    utl_buf_t buf_dec = UTL_BUF_INIT;
    uint16_t len;

    utl_buf_alloccopy(&bufin, (const uint8_t *)"hello", 5);

    // 0
    ret = ln_noise_enc(&noise, &buf, &bufin);
    ASSERT_TRUE(ret);

    const uint8_t OUTPUT0[] = {
        0xcf, 0x2b, 0x30, 0xdd, 0xf0, 0xcf, 0x3f, 0x80,
        0xe7, 0xc3, 0x5a, 0x6e, 0x67, 0x30, 0xb5, 0x9f,
        0xe8, 0x02, 0x47, 0x31, 0x80, 0xf3, 0x96, 0xd8,
        0x8a, 0x8f, 0xb0, 0xdb, 0x8c, 0xbc, 0xf2, 0x5d,
        0x2f, 0x21, 0x4c, 0xf9, 0xea, 0x1d, 0x95,
    };
    ASSERT_EQ(sizeof(OUTPUT0), buf.len);
    ASSERT_EQ(0, memcmp(OUTPUT0, buf.buf, sizeof(OUTPUT0)));
    utl_buf_free(&buf);

    //dec
    len = ln_noise_dec_len(&noise_dec, OUTPUT0, LN_SZ_NOISE_HEADER);
    ASSERT_EQ(5 + 16, len);
    utl_buf_alloccopy(&buf_dec, OUTPUT0 + LN_SZ_NOISE_HEADER, len);
    ret = ln_noise_dec_msg(&noise_dec, &buf_dec);
    ASSERT_TRUE(ret);
    ASSERT_EQ(5, buf_dec.len);
    ASSERT_EQ(0, memcmp(buf_dec.buf, "hello", 5));
    utl_buf_free(&buf_dec);


    int count = 0;

    // 1
    ret = ln_noise_enc(&noise, &buf, &bufin);
    ASSERT_TRUE(ret);

    const uint8_t OUTPUT1[] = {
        0x72, 0x88, 0x70, 0x22, 0x10, 0x1f, 0x0b, 0x67,
        0x53, 0xe0, 0xc7, 0xde, 0x21, 0x65, 0x7d, 0x35,
        0xa4, 0xcb, 0x2a, 0x1f, 0x5c, 0xde, 0x26, 0x50,
        0x52, 0x8b, 0xbc, 0x8f, 0x83, 0x7d, 0x0f, 0x0d,
        0x7a, 0xd8, 0x33, 0xb1, 0xa2, 0x56, 0xa1,
    };
    ASSERT_EQ(sizeof(OUTPUT1), buf.len);
    ASSERT_EQ(0, memcmp(OUTPUT1, buf.buf, sizeof(OUTPUT1)));
    utl_buf_free(&buf);

    //dec
    len = ln_noise_dec_len(&noise_dec, OUTPUT1, LN_SZ_NOISE_HEADER);
    ASSERT_EQ(5 + 16, len);
    utl_buf_alloccopy(&buf_dec, OUTPUT1 + LN_SZ_NOISE_HEADER, len);
    ret = ln_noise_dec_msg(&noise_dec, &buf_dec);
    ASSERT_TRUE(ret);
    ASSERT_EQ(5, buf_dec.len);
    ASSERT_EQ(0, memcmp(buf_dec.buf, "hello", 5));
    utl_buf_free(&buf_dec);

    count++;
    ASSERT_EQ(1, count);

    // 2-499
    for (int lp = 2; lp <= 499; lp++) {
        ret = ln_noise_enc(&noise, &buf, &bufin);
        ASSERT_TRUE(ret);

        //dec
        len = ln_noise_dec_len(&noise_dec, buf.buf, LN_SZ_NOISE_HEADER);
        ASSERT_EQ(5 + 16, len);
        utl_buf_alloccopy(&buf_dec, buf.buf + LN_SZ_NOISE_HEADER, len);
        ret = ln_noise_dec_msg(&noise_dec, &buf_dec);
        ASSERT_TRUE(ret);
        ASSERT_EQ(5, buf_dec.len);
        ASSERT_EQ(0, memcmp(buf_dec.buf, "hello", 5));
        utl_buf_free(&buf_dec);

        utl_buf_free(&buf);
        count++;
    }

    // key rotation
    //  ck', k' = HKDF(ck, k)
    // HKDF(ck= 0x919219dbb2920afa8db80f9a51787a840bcf111ed8d588caf9ab4be716e42b01
    //      k = 0x969ab31b4d288cedf6218839b27a3e2140827047f2c0f01bf5c04435d43511a9
    // ck'= 0xcc2c6e467efc8067720c2d09c139d1f77731893aad1defa14f9bf3c48d3f1d31
    // k' = 0x3fbdc101abd1132ca3a0ae34a669d8d9ba69a587e0bb4ddd59524541cf4813d8

    // 500
    ret = ln_noise_enc(&noise, &buf, &bufin);
    ASSERT_TRUE(ret);

    const uint8_t OUTPUT500[] = {
        0x17, 0x8c, 0xb9, 0xd7, 0x38, 0x71, 0x90, 0xfa,
        0x34, 0xdb, 0x9c, 0x2d, 0x50, 0x02, 0x7d, 0x21,
        0x79, 0x3c, 0x9b, 0xc2, 0xd4, 0x0b, 0x1e, 0x14,
        0xdc, 0xf3, 0x0e, 0xbe, 0xee, 0xb2, 0x20, 0xf4,
        0x83, 0x64, 0xf7, 0xa4, 0xc6, 0x8b, 0xf8,
    };
    ASSERT_EQ(sizeof(OUTPUT500), buf.len);
    ASSERT_EQ(0, memcmp(OUTPUT500, buf.buf, sizeof(OUTPUT500)));
    utl_buf_free(&buf);

    //dec
    len = ln_noise_dec_len(&noise_dec, OUTPUT500, LN_SZ_NOISE_HEADER);
    ASSERT_EQ(5 + 16, len);
    utl_buf_alloccopy(&buf_dec, OUTPUT500 + LN_SZ_NOISE_HEADER, len);
    ret = ln_noise_dec_msg(&noise_dec, &buf_dec);
    ASSERT_TRUE(ret);
    ASSERT_EQ(5, buf_dec.len);
    ASSERT_EQ(0, memcmp(buf_dec.buf, "hello", 5));
    utl_buf_free(&buf_dec);

    count++;
    ASSERT_EQ(500, count);

    // 501
    ret = ln_noise_enc(&noise, &buf, &bufin);
    ASSERT_TRUE(ret);

    const uint8_t OUTPUT501[] = {
        0x1b, 0x18, 0x6c, 0x57, 0xd4, 0x4e, 0xb6, 0xde,
        0x4c, 0x05, 0x7c, 0x49, 0x94, 0x0d, 0x79, 0xbb,
        0x83, 0x8a, 0x14, 0x5c, 0xb5, 0x28, 0xd6, 0xe8,
        0xfd, 0x26, 0xdb, 0xe5, 0x0a, 0x60, 0xca, 0x2c,
        0x10, 0x4b, 0x56, 0xb6, 0x0e, 0x45, 0xbd,
    };
    ASSERT_EQ(sizeof(OUTPUT501), buf.len);
    ASSERT_EQ(0, memcmp(OUTPUT501, buf.buf, sizeof(OUTPUT501)));
    utl_buf_free(&buf);

    //dec
    len = ln_noise_dec_len(&noise_dec, OUTPUT501, LN_SZ_NOISE_HEADER);
    ASSERT_EQ(5 + 16, len);
    utl_buf_alloccopy(&buf_dec, OUTPUT501 + LN_SZ_NOISE_HEADER, len);
    ret = ln_noise_dec_msg(&noise_dec, &buf_dec);
    ASSERT_TRUE(ret);
    ASSERT_EQ(5, buf_dec.len);
    ASSERT_EQ(0, memcmp(buf_dec.buf, "hello", 5));
    utl_buf_free(&buf_dec);

    count++;
    ASSERT_EQ(501, count);

    // 502-999
    for (int lp = 502; lp <= 999; lp++) {
        ret = ln_noise_enc(&noise, &buf, &bufin);
        ASSERT_TRUE(ret);

        //dec
        len = ln_noise_dec_len(&noise_dec, buf.buf, LN_SZ_NOISE_HEADER);
        ASSERT_EQ(5 + 16, len);
        utl_buf_alloccopy(&buf_dec, buf.buf + LN_SZ_NOISE_HEADER, len);
        ret = ln_noise_dec_msg(&noise_dec, &buf_dec);
        ASSERT_TRUE(ret);
        ASSERT_EQ(5, buf_dec.len);
        ASSERT_EQ(0, memcmp(buf_dec.buf, "hello", 5));
        utl_buf_free(&buf_dec);

        utl_buf_free(&buf);
        count++;
    }

    // HKDF(ck=0xcc2c6e467efc8067720c2d09c139d1f77731893aad1defa14f9bf3c48d3f1d31
    //      k =0x3fbdc101abd1132ca3a0ae34a669d8d9ba69a587e0bb4ddd59524541cf4813d8
    // ck'=0x728366ed68565dc17cf6dd97330a859a6a56e87e2beef3bd828a4c4a54d8df06
    // k' =0x9e0477f9850dca41e42db0e4d154e3a098e5a000d995e421849fcd5df27882bd

    // 1000
    ret = ln_noise_enc(&noise, &buf, &bufin);
    ASSERT_TRUE(ret);

    const uint8_t OUTPUT1000[] = {
        0x4a, 0x2f, 0x3c, 0xc3, 0xb5, 0xe7, 0x8d, 0xdb,
        0x83, 0xdc, 0xb4, 0x26, 0xd9, 0x86, 0x3d, 0x9d,
        0x9a, 0x72, 0x3b, 0x03, 0x37, 0xc8, 0x9d, 0xd0,
        0xb0, 0x05, 0xd8, 0x9f, 0x8d, 0x3c, 0x05, 0xc5,
        0x2b, 0x76, 0xb2, 0x9b, 0x74, 0x0f, 0x09,
    };
    ASSERT_EQ(sizeof(OUTPUT1000), buf.len);
    ASSERT_EQ(0, memcmp(OUTPUT1000, buf.buf, sizeof(OUTPUT1000)));
    utl_buf_free(&buf);

    //dec
    len = ln_noise_dec_len(&noise_dec, OUTPUT1000, LN_SZ_NOISE_HEADER);
    ASSERT_EQ(5 + 16, len);
    utl_buf_alloccopy(&buf_dec, OUTPUT1000 + LN_SZ_NOISE_HEADER, len);
    ret = ln_noise_dec_msg(&noise_dec, &buf_dec);
    ASSERT_TRUE(ret);
    ASSERT_EQ(5, buf_dec.len);
    ASSERT_EQ(0, memcmp(buf_dec.buf, "hello", 5));
    utl_buf_free(&buf_dec);

    count++;
    ASSERT_EQ(1000, count);

    // 1001
    ret = ln_noise_enc(&noise, &buf, &bufin);
    ASSERT_TRUE(ret);

    const uint8_t OUTPUT1001[] = {
        0x2e, 0xcd, 0x8c, 0x8a, 0x56, 0x29, 0xd0, 0xd0,
        0x2a, 0xb4, 0x57, 0xa0, 0xfd, 0xd0, 0xf7, 0xb9,
        0x0a, 0x19, 0x2c, 0xd4, 0x6b, 0xe5, 0xec, 0xb6,
        0xca, 0x57, 0x0b, 0xfc, 0x5e, 0x26, 0x83, 0x38,
        0xb1, 0xa1, 0x6c, 0xf4, 0xef, 0x2d, 0x36,
    };
    ASSERT_EQ(sizeof(OUTPUT1001), buf.len);
    ASSERT_EQ(0, memcmp(OUTPUT1001, buf.buf, sizeof(OUTPUT1001)));
    utl_buf_free(&buf);

    //dec
    len = ln_noise_dec_len(&noise_dec, OUTPUT1001, LN_SZ_NOISE_HEADER);
    ASSERT_EQ(5 + 16, len);
    utl_buf_alloccopy(&buf_dec, OUTPUT1001 + LN_SZ_NOISE_HEADER, len);
    ret = ln_noise_dec_msg(&noise_dec, &buf_dec);
    ASSERT_TRUE(ret);
    ASSERT_EQ(5, buf_dec.len);
    ASSERT_EQ(0, memcmp(buf_dec.buf, "hello", 5));
    utl_buf_free(&buf_dec);

    count++;
    ASSERT_EQ(1001, count);

    utl_buf_free(&bufin);
}
