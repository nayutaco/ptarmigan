#include "gtest/gtest.h"
#include <string.h>
#include "tests/fff.h"
DEFINE_FFF_GLOBALS;


extern "C" {
#include "../../utl/utl_log.c"
#undef LOG_TAG
#include "../../utl/utl_dbg.c"
#include "../../utl/utl_buf.c"
#include "../../utl/utl_push.c"
#include "../../utl/utl_time.c"
#include "../../utl/utl_int.c"
#include "../../utl/utl_str.c"

#undef LOG_TAG
#include "../../btc/btc.c"
#include "../../btc/btc_buf.c"
// #include "../../btc/btc_extkey.c"
// #include "../../btc/btc_keys.c"
// #include "../../btc/btc_sw.c"
//#include "../../btc/btc_sig.c"
// #include "../../btc/btc_script.c"
// #include "../../btc/btc_tx.c"
// #include "../../btc/btc_tx_buf.c"
#include "../../btc/btc_crypto.c"
// #include "../../btc/segwit_addr.c"
// #include "../../btc/btc_segwit_addr.c"
// #include "../../btc/btc_test_util.c"

#undef LOG_TAG
#include "ln_msg_anno.c"
#include "ln.c"
}

////////////////////////////////////////////////////////////////////////
//FAKE関数

FAKE_VALUE_FUNC(int, deflateInit_, z_streamp , int, const char *, int );
FAKE_VALUE_FUNC(int, deflate, z_streamp , int );
FAKE_VALUE_FUNC(int, deflateEnd, z_streamp);

FAKE_VALUE_FUNC(int, inflateInit_, z_streamp , const char *, int );
FAKE_VALUE_FUNC(int, inflate, z_streamp , int );
FAKE_VALUE_FUNC(int, inflateEnd, z_streamp);

////////////////////////////////////////////////////////////////////////

namespace LN_DUMMY {
}


////////////////////////////////////////////////////////////////////////

class ln: public testing::Test {
protected:
    virtual void SetUp() {
        //utl_log_init_stderr();
        RESET_FAKE(deflateInit_)
        RESET_FAKE(deflate)
        RESET_FAKE(inflateInit_)
        RESET_FAKE(inflate)
        utl_dbg_malloc_cnt_reset();
    }

    virtual void TearDown() {
        ASSERT_EQ(0, utl_dbg_malloc_cnt());
    }

public:
    static void DumpBin(const uint8_t *pData, uint16_t Len)
    {
        for (uint16_t lp = 0; lp < Len; lp++) {
            printf("%02x", pData[lp]);
        }
        printf("\n");
    }
    static bool DumpCheck(const void *pData, uint32_t Len, uint8_t Fill)
    {
        bool ret = true;
        const uint8_t *p = (const uint8_t *)pData;
        for (uint32_t lp = 0; lp < Len; lp++) {
            if (p[lp] != Fill) {
                ret = false;
                break;
            }
        }
        return ret;
    }
};

////////////////////////////////////////////////////////////////////////

namespace {
    uint64_t DECODED_IDS[] = {
        0x13a7b50000660000,  //0
        0x13a8030001040000,  //1
        0x13a8080000550001,  //2
        0x13a8430000fa0000,  //3
        0x13a84c0001470001,  //4
        0x13a8530000c30001,  //5
        0x13a85f0000c60001,  //6
        0x13a86100009d0000,  //7
        0x13a86100009e0000,  //8
        0x13a86b0001010000,  //9
        0x13a8a60000290001,  //10
        0x13a8b30000120000,  //11
        0x13a8b30001130000,  //12
        0x13a8c300003c0000,  //13
        0x13a9060000a20000,  //14
        0x13a9090000030000,  //15
        0x13a90e0000030000,  //16
        0x13a9130000d40000,  //17
        0x13a9160000040000,  //18
        0x13a91c0000060000,  //19
        0x13a91d0000050000,  //20
        0x13a91e0000180000,  //21
        0x13a92500002d0000,  //22
        0x13a92c00008d0000,  //23
        0x13a9300000b80000,  //24
        0x13a9310000640000,  //25
        0x13a93700000b0000,  //26
        0x13a93b0001350000,  //27
        0x13a9400000050000,  //28
        0x13a97a0000170000,  //29
        0x13a97c0000520001,  //30
        0x13a97c00006d0000,  //31
        0x13a97f00002d0000,  //32
        0x13a99e0000400001,  //33
        0x13a9a00000510000,  //34
        0x13a9a300004b0000,  //35
        0x13a9bd00000a0000,  //36
        0x13a9c30000250000,  //37
        0x13a9cc00007d0000,  //38
        0x13a9d30000da0000,  //39
        0x13a9dd00007b0000,  //40
        0x13a9f70000510000,  //41
        0x13aa0900010d0000,  //42
        0x13aa1d0000240000,  //43
        0x13aa1d0004230000,  //44
        0x13aa1e0000720000,  //45
        0x13aa1e0000740000,  //46
        0x13aa1e0000750000,  //47
        0x13aa210000250000,  //48
        0x13aa210000260000,  //49
        0x13aa230000640000,  //50
        0x13aa230000650001,  //51
        0x13aa2500007e0001,  //52
        0x13aa2700002b0000,  //53
        0x13aa270000970000,  //54
        0x13aa2d0000160000,  //55
        0x13aa350000160000,  //56
        0x13aa460000030000,  //57
        0x13aa4d0000140000,  //58
        0x13aa500000030000,  //59
        0x13aa560000020000,  //60
        0x13aa560000540000,  //61
        0x13aa580000480000,  //62
        0x13aa590000030000,  //63
        0x13aa5b0000010000,  //64
        0x13aa6f0000040000,  //65
        0x13aa760000040000,  //66
        0x13aa800000020000,  //67
        0x13aa880000440001,  //68
        0x13aaa50000b20000,  //69
        0x13aab70000510001,  //70
        0x13aab70000830000,  //71
        0x13aab70000840000,  //72
        0x13aac40000690000,  //73
        0x13aaca0000380000,  //74
        0x13aad000005a0000,  //75
        0x13aae30000100000,  //76
        0x13aaf70000ce0000,  //77
        0x13aaf800005a0000,  //78
        0x13ab020000cd0000,  //79
        0x13ab1f0001160001,  //80
        0x13ab2300002d0000,  //81
        0x13ab4200010f0000,  //82
        0x13ab600000b80000,  //83
        0x13ab660000460000,  //84
        0x13ab690000cb0001,  //85
        0x13ab8c00007f0001,  //86
        0x13ab8f0000910000,  //87
        0x13ab8f0000950000,  //88
        0x13ab920000670000,  //89
        0x13ab920000830000,  //90
        0x13ab920000850000,  //91
        0x13ab9500006e0000,  //92
        0x13abb100003d0000,  //93
        0x13abb40000560000,  //94
        0x13abb800002c0000,  //95
        0x13abd60000a10000,  //96
        0x13abd70000060000,  //97
        0x13abd70000c20000,  //98
        0x13abd800013d0000,  //99
        0x13abda0002b80001,  //100
        0x13ac2200000d0000,  //101
        0x13ac2600000a0000,  //102
        0x13ac7e00006e0000,  //103
        0x13ac8300004b0001,  //104
        0x13acaa0000ce0000,  //105
        0x13acaa00021a0000,  //106
        0x13acb80001ad0000,  //107
        0x13acd600014d0000,  //108
        0x13ad000000260000,  //109
        0x13ad000000a90000,  //110
        0x13ad430004910000,  //111
        0x13ad930000630000,  //112
        0x13adbf0000630001,  //113
        0x13addf0000650000,  //114
        0x13ade80000030000,  //115
        0x13ae0a00041c0000,  //116
        0x13ae340000770000,  //117
        0x13ae6c0000f10000,  //118
        0x13aea500007e0000,  //119
        0x13aedf0000920001,  //120
        0x13aeeb0000670000,  //121
        0x13aeed0000260001,  //122
        0x13aeed00002a0000,  //123
        0x13aeed00002c0000,  //124
        0x13aeed00002f0000,  //125
        0x13aef200000e0000,  //126
        0x13aef400000d0001,  //127
        0x13aefd0000070001,  //128
    };

    const uint8_t ENCODED_IDS[] = {
        0x01, 0x78, 0xda, 0x2d, 0xd2, 0x5b, 0x88, 0xcd,
        0x51, 0x14, 0xc7, 0xf1, 0xef, 0x3e, 0x73, 0x0c,
        0x33, 0x32, 0xe4, 0xaf, 0x43, 0x1a, 0xc4, 0x31,
        0xa3, 0xe1, 0x08, 0x65, 0xa2, 0x50, 0x93, 0xd1,
        0x50, 0x28, 0x97, 0x31, 0xb9, 0x3c, 0x0c, 0xb9,
        0x25, 0xb7, 0x92, 0x4b, 0xb9, 0xcc, 0xa8, 0x43,
        0x79, 0x20, 0x19, 0xc9, 0x13, 0xb9, 0x34, 0xcc,
        0xf9, 0x9f, 0x4b, 0x31, 0x64, 0x5e, 0x34, 0x35,
        0x23, 0x0f, 0x6e, 0x29, 0x1a, 0x9a, 0x92, 0x07,
        0x2f, 0x4a, 0x1e, 0x48, 0x91, 0x52, 0xd6, 0xef,
        0xec, 0xfd, 0xf4, 0xf9, 0xaf, 0x7d, 0x59, 0x7b,
        0xed, 0xff, 0xda, 0xd1, 0xfd, 0xc7, 0xb0, 0x07,
        0xa2, 0x9e, 0x0a, 0x5c, 0x52, 0x8e, 0x82, 0x4d,
        0xb8, 0xa8, 0xa7, 0x19, 0xfe, 0x2a, 0x5e, 0x83,
        0x5b, 0xa9, 0x78, 0x23, 0x0c, 0xca, 0x76, 0x78,
        0x2e, 0x77, 0xc0, 0x0d, 0xcd, 0x9b, 0x37, 0xe5,
        0x7e, 0x9c, 0x93, 0xf7, 0xa0, 0x41, 0xf3, 0xbd,
        0x30, 0x5e, 0x71, 0xaf, 0x05, 0x72, 0x10, 0x96,
        0x9a, 0xb9, 0x4a, 0xb8, 0x23, 0xab, 0xa0, 0x42,
        0xd6, 0x04, 0x6d, 0xd1, 0x7b, 0x99, 0x02, 0xd5,
        0x91, 0xab, 0x85, 0x4a, 0x39, 0x05, 0x46, 0xc8,
        0xa9, 0x30, 0x49, 0xd6, 0xc1, 0x5c, 0x99, 0x81,
        0x4b, 0x72, 0x3e, 0xf4, 0xc9, 0x05, 0xb0, 0x4b,
        0x2e, 0x82, 0xd1, 0x72, 0x09, 0xae, 0x51, 0x36,
        0x85, 0xfd, 0x27, 0x61, 0xa2, 0x3c, 0x0d, 0x1b,
        0xac, 0x24, 0x79, 0x50, 0x71, 0x67, 0xc8, 0x67,
        0x97, 0x68, 0xd2, 0xf8, 0x2d, 0x58, 0xaf, 0xf8,
        0x2e, 0xac, 0x96, 0x4f, 0xa1, 0x5a, 0x5a, 0xfd,
        0x75, 0xf2, 0x15, 0x9c, 0x91, 0xef, 0x60, 0x58,
        0x7e, 0x82, 0x53, 0xf2, 0xb7, 0xdf, 0x17, 0x57,
        0xe1, 0xc6, 0x48, 0xab, 0x7b, 0xa6, 0x37, 0x99,
        0x96, 0x56, 0xff, 0x91, 0xe0, 0xd1, 0xe0, 0x31,
        0x39, 0xdd, 0xe7, 0x95, 0xf5, 0x32, 0xed, 0xef,
        0x21, 0x77, 0x5b, 0x3d, 0xb1, 0x4d, 0x76, 0xc8,
        0x59, 0x30, 0x47, 0xe3, 0xe6, 0x75, 0x69, 0x45,
        0xa7, 0x64, 0x63, 0xb0, 0xc5, 0xff, 0xc7, 0x78,
        0x2d, 0x4c, 0x90, 0xeb, 0x42, 0xdc, 0x06, 0x89,
        0x60, 0xab, 0xdc, 0x0c, 0xab, 0xe4, 0x96, 0x30,
        0xbf, 0x0d, 0xd4, 0xb7, 0xf8, 0xb0, 0xff, 0xef,
        0xf1, 0xf1, 0xe0, 0xd9, 0xb0, 0xef, 0x02, 0xac,
        0xd0, 0xf9, 0xdd, 0xf0, 0x50, 0xf1, 0x13, 0xdd,
        0xd3, 0x95, 0xcd, 0x86, 0xf8, 0x9c, 0x7c, 0x06,
        0xfb, 0xe4, 0x0b, 0x58, 0x2c, 0xdf, 0xc2, 0x56,
        0xf9, 0x05, 0xc6, 0x49, 0xfb, 0x3f, 0x6f, 0xe4,
        0x1f, 0x3f, 0x9e, 0xb7, 0xe4, 0xaf, 0xe5, 0x34,
        0x5c, 0xca, 0xf2, 0xe5, 0xd3, 0xbe, 0x0f, 0xf9,
        0xe5, 0xb8, 0xb1, 0x72, 0xbb, 0xef, 0x6b, 0xde,
        0x1e, 0x67, 0x8b, 0xb4, 0xe4, 0x2f, 0xb5, 0xee,
        0x22, 0x74, 0xca, 0xcb, 0x70, 0x45, 0xe3, 0xe6,
        0x35, 0xd9, 0x05, 0x7b, 0x83, 0xd9, 0xe0, 0x79,
        0x69, 0x93, 0x87, 0xe4, 0x03, 0x58, 0x26, 0x1f,
        0x41, 0x9b, 0xb4, 0xe4, 0x19, 0x39, 0x04, 0xb7,
        0xe5, 0x07, 0xff, 0xde, 0xe4, 0x80, 0xfc, 0x88,
        0x2b, 0xaf, 0x1f, 0x26, 0xd1, 0x67, 0xe7, 0x15,
        0x66, 0x80, 0xfa, 0x5a, 0xa8, 0xf7, 0xef, 0xa1,
        0xd0, 0xe1, 0xf3, 0x16, 0xb2, 0x7a, 0x27, 0x36,
        0x1f, 0xfb, 0xfb, 0x99, 0x89, 0xc9, 0xd2, 0x36,
        0x15, 0xe5, 0x10, 0xce, 0x5a, 0x12, 0xd9, 0x77,
        0xb9, 0xbf, 0x32, 0x27, 0x9b, 0x49, 0xaa, 0xfe,
        0xe2, 0x55, 0xd8, 0x29, 0xfb, 0xa5, 0x8b, 0x8a,
        0x9f, 0xd5, 0x77, 0x8b, 0xbf, 0xfa, 0xfe, 0x94,
        0xaa, 0x49, 0xd6, 0xca, 0x85, 0x70, 0x42, 0x1e,
        0x80, 0x1f, 0xb2, 0x5b, 0xef, 0xc2, 0xb4, 0xf5,
        0x5d, 0xb6, 0xaf, 0xf4, 0xcd, 0xdf, 0xbf, 0xf4,
        0x5d, 0xe7, 0xb8, 0xb2, 0xb3, 0x43, 0x9c, 0x09,
        0xce, 0x93, 0x3f, 0xa1, 0x46, 0xfe, 0xd2, 0x7d,
        0x6c, 0xdd, 0x3f, 0x18, 0x89, 0xfb, 0x0f, 0x2a,
        0xc4, 0xc5, 0x5a,
    };
} // name


TEST_F(ln, zlib_enc_init)
{
    bool ret;

    deflateInit__fake.return_val = 1;

    utl_buf_t enc = UTL_BUF_INIT;
    ret = ln_msg_gossip_ids_encode(&enc, DECODED_IDS, sizeof(DECODED_IDS) / sizeof(uint64_t));
    ASSERT_FALSE(ret);
    ASSERT_EQ(0, deflate_fake.call_count);
    ASSERT_EQ(0, deflateEnd_fake.call_count);
}


TEST_F(ln, zlib_enc_defrate)
{
    bool ret;

    deflate_fake.return_val = Z_STREAM_ERROR;

    utl_buf_t enc = UTL_BUF_INIT;
    ret = ln_msg_gossip_ids_encode(&enc, DECODED_IDS, sizeof(DECODED_IDS) / sizeof(uint64_t));
    ASSERT_FALSE(ret);
    ASSERT_EQ(1, deflate_fake.call_count);
    ASSERT_EQ(1, deflateEnd_fake.call_count);
}


TEST_F(ln, zlib_dec_init)
{
    bool ret;

    inflateInit__fake.return_val = 1;

    uint64_t *p_short_ids = NULL;
    size_t num = 0;
    ret = ln_msg_gossip_ids_decode(&p_short_ids, &num, ENCODED_IDS, sizeof(ENCODED_IDS));
    ASSERT_FALSE(ret);
    ASSERT_EQ(0, inflate_fake.call_count);
    ASSERT_EQ(0, inflateEnd_fake.call_count);
}


TEST_F(ln, zlib_dec_infrate)
{
    bool ret;

    inflate_fake.return_val = Z_STREAM_ERROR;

    uint64_t *p_short_ids = NULL;
    size_t num = 0;
    ret = ln_msg_gossip_ids_decode(&p_short_ids, &num, ENCODED_IDS, sizeof(ENCODED_IDS));
    ASSERT_FALSE(ret);
    ASSERT_EQ(1, inflate_fake.call_count);
    ASSERT_EQ(1, inflateEnd_fake.call_count);
}
