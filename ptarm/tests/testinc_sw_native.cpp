////////////////////////////////////////////////////////////////////////
//FAKE関数

//FAKE_VALUE_FUNC(int, external_function, int);

////////////////////////////////////////////////////////////////////////

class sw_native: public testing::Test {
protected:
    virtual void SetUp() {
        //RESET_FAKE(external_function)
        ptarm_init(PTARM_TESTNET, true);
    }

    virtual void TearDown() {
        ASSERT_EQ(0, ptarm_dbg_malloc_cnt());
        ptarm_term();
    }

public:
    static void DumpBin(const uint8_t *pData, uint16_t Len)
    {
        for (uint16_t lp = 0; lp < Len; lp++) {
            printf("%02x", pData[lp]);
        }
        printf("\n");
    }
};

////////////////////////////////////////////////////////////////////////

TEST_F(sw_native, init)
{
    const uint8_t TXID[] = {
        0x4e, 0x1d, 0xcd, 0x4a, 0x4e, 0x10, 0xdb, 0x68,
        0x00, 0x3d, 0xe7, 0x84, 0x2b, 0x76, 0x9b, 0xa6,
        0x2a, 0x67, 0x7a, 0xfe, 0xec, 0xf8, 0x06, 0x0b,
        0xd6, 0x32, 0xca, 0xe6, 0xa4, 0x85, 0x78, 0x61,
    };
    const uint8_t SIG[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xfa, 0x1b, 0x5c,
        0xd8, 0x34, 0x08, 0xb1, 0x30, 0xae, 0x41, 0x10,
        0x66, 0x16, 0xf5, 0x24, 0x35, 0xdb, 0x3a, 0xa2,
        0x8b, 0x8a, 0xf3, 0x9d, 0x23, 0x71, 0x24, 0x37,
        0xc2, 0x81, 0x34, 0x51, 0xf8, 0x02, 0x20, 0x4b,
        0xe4, 0x97, 0xa2, 0x97, 0x48, 0x6e, 0xd8, 0xde,
        0x66, 0x60, 0x7d, 0x0f, 0x54, 0x66, 0x4b, 0xbe,
        0x71, 0x95, 0xb6, 0xf4, 0x6b, 0x14, 0x73, 0x26,
        0xef, 0x9c, 0x55, 0xaa, 0x09, 0x05, 0x6e, 0x01,
    };
    const ptarm_buf_t sig = { (uint8_t *)SIG, sizeof(SIG) };
    const uint8_t PUB[] = {
        0x02, 0x81, 0x00, 0xca, 0x14, 0xc4, 0x4e, 0x2f,
        0xe3, 0x63, 0xf9, 0x6c, 0xff, 0x64, 0x98, 0x5d,
        0xd6, 0xda, 0x11, 0xe0, 0x52, 0x0e, 0xb4, 0x79,
        0x59, 0x1b, 0xd1, 0x41, 0xde, 0x27, 0x65, 0x66,
        0x24,
    };
    ptarm_tx_t tx;
    ptarm_tx_init(&tx);

    ptarm_vin_t *vin;
    ptarm_tx_add_vin(&tx, TXID, 5);
    bool ret = ptarm_sw_set_vin_p2wpkh(&tx, 0, &sig, PUB);
    ASSERT_TRUE(ret);
    ASSERT_EQ(1, tx.vin_cnt);
    vin = &tx.vin[0];
    ASSERT_EQ(0, vin->script.len);
    ASSERT_EQ(2, vin->wit_cnt);
    ASSERT_EQ(0, memcmp(SIG, vin->witness[0].buf, sizeof(SIG)));
    ASSERT_EQ(sizeof(SIG), vin->witness[0].len);
    ASSERT_EQ(0, memcmp(PUB, vin->witness[1].buf, sizeof(PUB)));
    ASSERT_EQ(sizeof(PUB), vin->witness[1].len);

    ptarm_tx_free(&tx);
}
