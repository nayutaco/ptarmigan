// https://github.com/lightningnetwork/lightning-rfc/blob/master/04-onion-routing.md#test-vector

////////////////////////////////////////////////////////////////////////
//FAKE関数

//FAKE_VALUE_FUNC(int, external_function, int);

////////////////////////////////////////////////////////////////////////

ptarm_buf_t sOnionBuffer;
uint8_t *spEphPubkey = NULL;
uint8_t *spShdSecret = NULL;
uint8_t *spBlindFactor = NULL;


class onion: public testing::Test {
protected:
    virtual void SetUp() {
        //RESET_FAKE(external_function)
        ptarm_init(PTARM_TESTNET, true);
        ptarm_buf_init(&sOnionBuffer);
        spEphPubkey = NULL;
        spShdSecret = NULL;
        spBlindFactor = NULL;
    }

    virtual void TearDown() {
        ptarm_buf_free(&sOnionBuffer);
        M_FREE(spEphPubkey);
        M_FREE(spShdSecret);
        M_FREE(spBlindFactor);

        ASSERT_EQ(0, ptarm_dbg_malloc_cnt());
        ptarm_term();
    }

public:
    static void DumpBin(const uint8_t *pData, uint16_t Len)
    {
        for (uint16_t lp = 0; lp < Len; lp++) {
            printf("%02x", pData[lp]);
        }
        printf("\n");
    }
};


////////////////////////////////////////////////////////////////////////

TEST_F(onion, testvector)
{
    const uint8_t PUB[][PTARM_SZ_PUBKEY] = {
        {
            0x02, 0xee, 0xc7, 0x24, 0x5d, 0x6b, 0x7d, 0x2c,
            0xcb, 0x30, 0x38, 0x0b, 0xfb, 0xe2, 0xa3, 0x64,
            0x8c, 0xd7, 0xa9, 0x42, 0x65, 0x3f, 0x5a, 0xa3,
            0x40, 0xed, 0xce, 0xa1, 0xf2, 0x83, 0x68, 0x66,
            0x19,
        },
        {
            0x03, 0x24, 0x65, 0x3e, 0xac, 0x43, 0x44, 0x88,
            0x00, 0x2c, 0xc0, 0x6b, 0xbf, 0xb7, 0xf1, 0x0f,
            0xe1, 0x89, 0x91, 0xe3, 0x5f, 0x9f, 0xe4, 0x30,
            0x2d, 0xbe, 0xa6, 0xd2, 0x35, 0x3d, 0xc0, 0xab,
            0x1c,
        },
        {
            0x02, 0x7f, 0x31, 0xeb, 0xc5, 0x46, 0x2c, 0x1f,
            0xdc, 0xe1, 0xb7, 0x37, 0xec, 0xff, 0x52, 0xd3,
            0x7d, 0x75, 0xde, 0xa4, 0x3c, 0xe1, 0x1c, 0x74,
            0xd2, 0x5a, 0xa2, 0x97, 0x16, 0x5f, 0xaa, 0x20,
            0x07,
        },
        {
            0x03, 0x2c, 0x0b, 0x7c, 0xf9, 0x53, 0x24, 0xa0,
            0x7d, 0x05, 0x39, 0x8b, 0x24, 0x01, 0x74, 0xdc,
            0x0c, 0x2b, 0xe4, 0x44, 0xd9, 0x6b, 0x15, 0x9a,
            0xa6, 0xc7, 0xf7, 0xb1, 0xe6, 0x68, 0x68, 0x09,
            0x91,
        },
        {
            0x02, 0xed, 0xab, 0xbd, 0x16, 0xb4, 0x1c, 0x83,
            0x71, 0xb9, 0x2e, 0xf2, 0xf0, 0x4c, 0x11, 0x85,
            0xb4, 0xf0, 0x3b, 0x6d, 0xcd, 0x52, 0xba, 0x9b,
            0x78, 0xd9, 0xd7, 0xc8, 0x9c, 0x8f, 0x22, 0x11,
            0x45,
        }
    };
    const uint8_t SESSIONKEY[] = {
        0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
        0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
        0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
        0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    };
    const uint8_t ASSOC[] = {
        0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
        0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
        0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
        0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
    };

    uint8_t packet[LN_SZ_ONION_ROUTE];
    ln_hop_datain_t hop_datain[5];

    for (int lp = 0; lp < 5; lp++) {
        hop_datain[lp].short_channel_id = (((uint64_t)lp << 56) | ((uint64_t)lp << 48) | ((uint64_t)lp << 40) | ((uint64_t)lp << 32) | ((uint64_t)lp << 24) | ((uint64_t)lp << 16) | ((uint64_t)lp << 8) | (uint64_t)lp);
        //amt_to_forwardが64bitになったため、位置がずれる
        //      OLD [0-7][8-11][12-15][16-]
        //      NEW [0-7][8-15][16-19][20-]
        //hop_datain[lp].amt_to_forward = lp;
        //hop_datain[lp].outgoing_cltv_value = lp;
        hop_datain[lp].amt_to_forward = ((uint64_t)lp << 32) | lp;
        hop_datain[lp].outgoing_cltv_value = 0;
        memcpy(hop_datain[lp].pubkey, PUB[lp], PTARM_SZ_PUBKEY);
    }
    bool ret = ln_onion_create_packet(packet, NULL, hop_datain, 5, SESSIONKEY, ASSOC, sizeof(ASSOC));
    ASSERT_TRUE(ret);

    const uint8_t SHDSECRET[] = {
        //0
        0x53, 0xeb, 0x63, 0xea, 0x8a, 0x3f, 0xec, 0x3b,
        0x3c, 0xd4, 0x33, 0xb8, 0x5c, 0xd6, 0x2a, 0x4b,
        0x14, 0x5e, 0x1d, 0xda, 0x09, 0x39, 0x1b, 0x34,
        0x8c, 0x4e, 0x1c, 0xd3, 0x6a, 0x03, 0xea, 0x66,
        //1
        0xa6, 0x51, 0x9e, 0x98, 0x83, 0x2a, 0x0b, 0x17,
        0x9f, 0x62, 0x12, 0x3b, 0x35, 0x67, 0xc1, 0x06,
        0xdb, 0x99, 0xee, 0x37, 0xbe, 0xf0, 0x36, 0xe7,
        0x83, 0x26, 0x36, 0x02, 0xf3, 0x48, 0x8f, 0xae,
        //2
        0x3a, 0x6b, 0x41, 0x25, 0x48, 0x76, 0x2f, 0x0d,
        0xbc, 0xcc, 0xe5, 0xc7, 0xae, 0x7b, 0xb8, 0x14,
        0x7d, 0x1c, 0xaf, 0x9b, 0x54, 0x71, 0xc3, 0x41,
        0x20, 0xb3, 0x0b, 0xc9, 0xc0, 0x48, 0x91, 0xcc,
        //3
        0x21, 0xe1, 0x3c, 0x2d, 0x7c, 0xfe, 0x7e, 0x18,
        0x83, 0x6d, 0xf5, 0x08, 0x72, 0x46, 0x61, 0x17,
        0xa2, 0x95, 0x78, 0x3a, 0xb8, 0xaa, 0xb0, 0xe7,
        0xec, 0xc8, 0xc7, 0x25, 0x50, 0x3a, 0xd0, 0x2d,
        //4
        0xb5, 0x75, 0x6b, 0x9b, 0x54, 0x27, 0x27, 0xdb,
        0xaf, 0xc6, 0x76, 0x5a, 0x49, 0x48, 0x8b, 0x02,
        0x3a, 0x72, 0x5d, 0x63, 0x1a, 0xf6, 0x88, 0xfc,
        0x03, 0x12, 0x17, 0xe9, 0x07, 0x70, 0xc3, 0x28,
    };
    const uint8_t BLINDFACT[] = {
        //0
        0x2e, 0xc2, 0xe5, 0xda, 0x60, 0x57, 0x76, 0x05,
        0x41, 0x87, 0x18, 0x03, 0x43, 0x28, 0x76, 0x83,
        0xaa, 0x6a, 0x51, 0xb4, 0xb1, 0xc0, 0x4d, 0x6d,
        0xd4, 0x9c, 0x45, 0xd8, 0xcf, 0xfb, 0x3c, 0x36,
        //1
        0xbf, 0x66, 0xc2, 0x8b, 0xc2, 0x2e, 0x59, 0x8c,
        0xfd, 0x57, 0x4a, 0x19, 0x31, 0xa2, 0xba, 0xfb,
        0xca, 0x09, 0x16, 0x3d, 0xf2, 0x26, 0x1e, 0x6d,
        0x00, 0x56, 0xb2, 0x61, 0x0d, 0xab, 0x93, 0x8f,
        //2
        0xa1, 0xf2, 0xda, 0xdd, 0x18, 0x4e, 0xb1, 0x62,
        0x70, 0x49, 0x67, 0x3f, 0x18, 0xc6, 0x32, 0x58,
        0x14, 0x38, 0x4f, 0xac, 0xde, 0xe5, 0xbf, 0xd9,
        0x35, 0xd9, 0xcb, 0x03, 0x1a, 0x16, 0x98, 0xa5,
        //3
        0x7c, 0xfe, 0x0b, 0x69, 0x9f, 0x35, 0x52, 0x50,
        0x29, 0xae, 0x0f, 0xa4, 0x37, 0xc6, 0x9d, 0x0f,
        0x20, 0xf7, 0xed, 0x4e, 0x39, 0x16, 0x13, 0x3f,
        0x9c, 0xac, 0xbb, 0x13, 0xc8, 0x2f, 0xf2, 0x62,
        //4
        0xc9, 0x6e, 0x00, 0xdd, 0xda, 0xf5, 0x7e, 0x7e,
        0xdc, 0xd4, 0xfb, 0x59, 0x54, 0xbe, 0x5b, 0x65,
        0xb0, 0x9f, 0x17, 0xcb, 0x6d, 0x20, 0x65, 0x1b,
        0x4e, 0x90, 0x31, 0x5b, 0xe5, 0x77, 0x92, 0x05,
    };
    const uint8_t EPHPUBKEY[] = {
        //0
        0x02, 0xee, 0xc7, 0x24, 0x5d, 0x6b, 0x7d, 0x2c,
        0xcb, 0x30, 0x38, 0x0b, 0xfb, 0xe2, 0xa3, 0x64,
        0x8c, 0xd7, 0xa9, 0x42, 0x65, 0x3f, 0x5a, 0xa3,
        0x40, 0xed, 0xce, 0xa1, 0xf2, 0x83, 0x68, 0x66,
        0x19,
        //1
        0x02, 0x8f, 0x94, 0x38, 0xbf, 0xbf, 0x7f, 0xea,
        0xc2, 0xe1, 0x08, 0xd6, 0x77, 0xe3, 0xa8, 0x2d,
        0xa5, 0x96, 0xbe, 0x70, 0x6c, 0xc1, 0xcf, 0x34,
        0x2b, 0x75, 0xc7, 0xb7, 0xe2, 0x2b, 0xf4, 0xe6,
        0xe2,
        //2
        0x03, 0xbf, 0xd8, 0x22, 0x52, 0x41, 0xea, 0x71,
        0xcd, 0x08, 0x43, 0xdb, 0x77, 0x09, 0xf4, 0xc2,
        0x22, 0xf6, 0x2f, 0xf2, 0xd4, 0x51, 0x6f, 0xd3,
        0x8b, 0x39, 0x91, 0x4a, 0xb6, 0xb8, 0x3e, 0x0d,
        0xa0,
        //3
        0x03, 0x1d, 0xde, 0x69, 0x26, 0x38, 0x12, 0x89,
        0x67, 0x13, 0x00, 0x23, 0x9e, 0xa8, 0xe5, 0x7f,
        0xfa, 0xf9, 0xbe, 0xbd, 0x05, 0xb9, 0xa5, 0xb9,
        0x5b, 0xea, 0xf0, 0x7a, 0xf0, 0x5c, 0xd4, 0x35,
        0x95,
        //4
        0x03, 0xa2, 0x14, 0xeb, 0xd8, 0x75, 0xaa, 0xb6,
        0xdd, 0xfd, 0x77, 0xf2, 0x2c, 0x5e, 0x73, 0x11,
        0xd7, 0xf7, 0x7f, 0x17, 0xa1, 0x69, 0xe5, 0x99,
        0xf1, 0x57, 0xbb, 0xcd, 0xae, 0x8b, 0xf0, 0x71,
        0xf4,
    };
    ASSERT_EQ(0, memcmp(SHDSECRET, spShdSecret, sizeof(SHDSECRET)));
    ASSERT_EQ(0, memcmp(BLINDFACT, spBlindFactor, sizeof(BLINDFACT)));
    ASSERT_EQ(0, memcmp(EPHPUBKEY, spEphPubkey, sizeof(EPHPUBKEY)));

    const uint8_t FILLER[] = {
        0xc6, 0xb0, 0x08, 0xcf, 0x64, 0x14, 0xed, 0x6e,
        0x4c, 0x42, 0xc2, 0x91, 0xeb, 0x50, 0x5e, 0x9f,
        0x22, 0xf5, 0xfe, 0x7d, 0x0e, 0xcd, 0xd1, 0x5a,
        0x83, 0x3f, 0x4d, 0x01, 0x6a, 0xc9, 0x74, 0xd3,
        0x3a, 0xdc, 0x6e, 0xa3, 0x29, 0x3e, 0x20, 0x85,
        0x9e, 0x87, 0xeb, 0xfb, 0x93, 0x7b, 0xa4, 0x06,
        0xab, 0xd0, 0x25, 0xd1, 0x4a, 0xf6, 0x92, 0xb1,
        0x2e, 0x9c, 0x9c, 0x2a, 0xdb, 0xe3, 0x07, 0xa6,
        0x79, 0x77, 0x92, 0x59, 0x67, 0x62, 0x11, 0xc0,
        0x71, 0xe6, 0x14, 0xfd, 0xb3, 0x86, 0xd1, 0xff,
        0x02, 0xdb, 0x22, 0x3a, 0x5b, 0x2f, 0xae, 0x03,
        0xdf, 0x68, 0xd3, 0x21, 0xc7, 0xb2, 0x9f, 0x7c,
        0x72, 0x40, 0xed, 0xd3, 0xfa, 0x1b, 0x7c, 0xb6,
        0x90, 0x3f, 0x89, 0xdc, 0x01, 0xab, 0xf4, 0x1b,
        0x2e, 0xb0, 0xb4, 0x9b, 0x6b, 0x8d, 0x73, 0xbb,
        0x07, 0x74, 0xb5, 0x82, 0x04, 0xc0, 0xd0, 0xe9,
        0x6d, 0x3c, 0xce, 0x45, 0xad, 0x75, 0x40, 0x6b,
        0xe0, 0xbc, 0x00, 0x9e, 0x32, 0x7b, 0x3e, 0x71,
        0x2a, 0x4b, 0xd1, 0x78, 0x60, 0x9c, 0x00, 0xb4,
        0x1d, 0xa2, 0xda, 0xf8, 0xa4, 0xb0, 0xe1, 0x31,
        0x9f, 0x07, 0xa4, 0x92, 0xab, 0x4e, 0xfb, 0x05,
        0x6f, 0x0f, 0x59, 0x9f, 0x75, 0xe6, 0xdc, 0x7e,
        0x0d, 0x10, 0xce, 0x1c, 0xf5, 0x90, 0x88, 0xab,
        0x6e, 0x87, 0x3d, 0xe3, 0x77, 0x34, 0x38, 0x80,
        0xf7, 0xa2, 0x4f, 0x0e, 0x36, 0x73, 0x1a, 0x0b,
        0x72, 0x09, 0x2f, 0x8d, 0x5b, 0xc8, 0xcd, 0x34,
        0x67, 0x62, 0xe9, 0x3b, 0x2b, 0xf2, 0x03, 0xd0,
        0x02, 0x64, 0xe4, 0xbc, 0x13, 0x6f, 0xc1, 0x42,
        0xde, 0x8f, 0x7b, 0x69, 0x15, 0x4d, 0xeb, 0x05,
        0x85, 0x4e, 0xa8, 0x8e, 0x2d, 0x75, 0x06, 0x22,
        0x2c, 0x95, 0xba, 0x1a, 0xab, 0x06, 0x5c, 0x8a,
        0x85, 0x13, 0x91, 0x37, 0x7d, 0x34, 0x06, 0xa3,
        0x5a, 0x9a, 0xf3, 0xac,
    };
    const ptarm_buf_t buffil = { (CONST_CAST uint8_t *)FILLER, sizeof(FILLER) };
    ASSERT_TRUE(ptarm_buf_cmp(&buffil, &sOnionBuffer));

    const uint8_t PACKET[] = {
        0x00, 0x02, 0xee, 0xc7, 0x24, 0x5d, 0x6b, 0x7d,
        0x2c, 0xcb, 0x30, 0x38, 0x0b, 0xfb, 0xe2, 0xa3,
        0x64, 0x8c, 0xd7, 0xa9, 0x42, 0x65, 0x3f, 0x5a,
        0xa3, 0x40, 0xed, 0xce, 0xa1, 0xf2, 0x83, 0x68,
        0x66, 0x19, 0xe5, 0xf1, 0x43, 0x50, 0xc2, 0xa7,
        0x6f, 0xc2, 0x32, 0xb5, 0xe4, 0x6d, 0x42, 0x1e,
        0x96, 0x15, 0x47, 0x1a, 0xb9, 0xe0, 0xbc, 0x88,
        0x7b, 0xef, 0xf8, 0xc9, 0x5f, 0xdb, 0x87, 0x8f,
        0x7b, 0x3a, 0x71, 0x6a, 0x99, 0x6c, 0x78, 0x45,
        0xc9, 0x3d, 0x90, 0xe4, 0xec, 0xbb, 0x9b, 0xde,
        0x4e, 0xce, 0x2f, 0x69, 0x42, 0x5c, 0x99, 0xe4,
        0xbc, 0x82, 0x0e, 0x44, 0x48, 0x54, 0x55, 0xf1,
        0x35, 0xed, 0xc0, 0xd1, 0x0f, 0x7d, 0x61, 0xab,
        0x59, 0x05, 0x31, 0xcf, 0x08, 0x00, 0x01, 0x79,
        0xa3, 0x33, 0xa3, 0x47, 0xf8, 0xb4, 0x07, 0x2f,
        0x21, 0x64, 0x00, 0x40, 0x6b, 0xdf, 0x3b, 0xf0,
        0x38, 0x65, 0x97, 0x93, 0xd4, 0xa1, 0xfd, 0x7b,
        0x24, 0x69, 0x79, 0xe3, 0x15, 0x0a, 0x0a, 0x4c,
        0xb0, 0x52, 0xc9, 0xec, 0x69, 0xac, 0xf0, 0xf4,
        0x8c, 0x3d, 0x39, 0xcd, 0x55, 0x67, 0x5f, 0xe7,
        0x17, 0xcb, 0x7d, 0x80, 0xce, 0x72, 0x1c, 0xaa,
        0xd6, 0x93, 0x20, 0xc3, 0xa4, 0x69, 0xa2, 0x02,
        0xf1, 0xe4, 0x68, 0xc6, 0x7e, 0xaf, 0x7a, 0x7c,
        0xd8, 0x22, 0x6d, 0x0f, 0xd3, 0x2f, 0x7b, 0x48,
        0x08, 0x4d, 0xca, 0x88, 0x5d, 0x56, 0x04, 0x76,
        0x94, 0x76, 0x2b, 0x67, 0x02, 0x17, 0x13, 0xca,
        0x67, 0x39, 0x29, 0xc1, 0x63, 0xec, 0x36, 0xe0,
        0x4e, 0x40, 0xca, 0x8e, 0x1c, 0x6d, 0x17, 0x56,
        0x94, 0x19, 0xd3, 0x03, 0x9d, 0x9a, 0x1e, 0xc8,
        0x66, 0xab, 0xe0, 0x44, 0xa9, 0xad, 0x63, 0x57,
        0x78, 0xb9, 0x61, 0xfc, 0x07, 0x76, 0xdc, 0x83,
        0x2b, 0x3a, 0x45, 0x1b, 0xd5, 0xd3, 0x50, 0x72,
        0xd2, 0x26, 0x9c, 0xf9, 0xb0, 0x40, 0xf6, 0xb7,
        0xa7, 0xda, 0xd8, 0x4f, 0xb1, 0x14, 0xed, 0x41,
        0x3b, 0x14, 0x26, 0xcb, 0x96, 0xce, 0xaf, 0x83,
        0x82, 0x56, 0x65, 0xed, 0x5a, 0x1d, 0x00, 0x2c,
        0x16, 0x87, 0xf9, 0x24, 0x65, 0xb4, 0x9e, 0xd4,
        0xc7, 0xf0, 0x21, 0x8f, 0xf8, 0xc6, 0xc7, 0xdd,
        0x72, 0x21, 0xd5, 0x89, 0xc6, 0x5b, 0x3b, 0x9a,
        0xaa, 0x71, 0xa4, 0x14, 0x84, 0xb1, 0x22, 0x84,
        0x6c, 0x7c, 0x7b, 0x57, 0xe0, 0x2e, 0x67, 0x9e,
        0xa8, 0x46, 0x9b, 0x70, 0xe1, 0x4f, 0xe4, 0xf7,
        0x0f, 0xee, 0x4d, 0x87, 0xb9, 0x10, 0xcf, 0x14,
        0x4b, 0xe6, 0xfe, 0x48, 0xee, 0xf2, 0x4d, 0xa4,
        0x75, 0xc0, 0xb0, 0xbc, 0xc6, 0x56, 0x5a, 0xe8,
        0x2c, 0xd3, 0xf4, 0xe3, 0xb2, 0x4c, 0x76, 0xea,
        0xa5, 0x61, 0x6c, 0x61, 0x11, 0x34, 0x33, 0x06,
        0xab, 0x35, 0xc1, 0xfe, 0x5c, 0xa4, 0xa7, 0x7c,
        0x0e, 0x31, 0x4e, 0xd7, 0xdb, 0xa3, 0x9d, 0x6f,
        0x1e, 0x0d, 0xe7, 0x91, 0x71, 0x9c, 0x24, 0x1a,
        0x93, 0x9c, 0xc4, 0x93, 0xbe, 0xa2, 0xba, 0xe1,
        0xc1, 0xe9, 0x32, 0x67, 0x9e, 0xa9, 0x4d, 0x29,
        0x08, 0x42, 0x78, 0x51, 0x3c, 0x77, 0xb8, 0x99,
        0xcc, 0x98, 0x05, 0x9d, 0x06, 0xa2, 0x7d, 0x17,
        0x1b, 0x0d, 0xbd, 0xf6, 0xbe, 0xe1, 0x3d, 0xdc,
        0x4f, 0xc1, 0x7a, 0x0c, 0x4d, 0x28, 0x27, 0xd4,
        0x88, 0x43, 0x6b, 0x57, 0xba, 0xa1, 0x67, 0x54,
        0x41, 0x38, 0xca, 0x2e, 0x64, 0xa1, 0x1b, 0x43,
        0xac, 0x8a, 0x06, 0xcd, 0x0c, 0x2f, 0xba, 0x2d,
        0x4d, 0x90, 0x0e, 0xd2, 0xd9, 0x20, 0x53, 0x05,
        0xe2, 0xd7, 0x38, 0x3c, 0xc9, 0x8d, 0xac, 0xb0,
        0x78, 0x13, 0x3d, 0xe5, 0xf6, 0xfb, 0x6b, 0xed,
        0x2e, 0xf2, 0x6b, 0xa9, 0x2c, 0xea, 0x28, 0xaa,
        0xfc, 0x3b, 0x99, 0x48, 0xdd, 0x9a, 0xe5, 0x55,
        0x9e, 0x8b, 0xd6, 0x92, 0x0b, 0x8c, 0xea, 0x46,
        0x2a, 0xa4, 0x45, 0xca, 0x6a, 0x95, 0xe0, 0xe7,
        0xba, 0x52, 0x96, 0x1b, 0x18, 0x1c, 0x79, 0xe7,
        0x3b, 0xd5, 0x81, 0x82, 0x1d, 0xf2, 0xb1, 0x01,
        0x73, 0x72, 0x7a, 0x81, 0x0c, 0x92, 0xb8, 0x3b,
        0x5b, 0xa4, 0xa0, 0x40, 0x3e, 0xb7, 0x10, 0xd2,
        0xca, 0x10, 0x68, 0x9a, 0x35, 0xbe, 0xc6, 0xc3,
        0xa7, 0x08, 0xe9, 0xe9, 0x2f, 0x7d, 0x78, 0xff,
        0x3c, 0x5d, 0x99, 0x89, 0x57, 0x4b, 0x00, 0xc6,
        0x73, 0x6f, 0x84, 0xc1, 0x99, 0x25, 0x6e, 0x76,
        0xe1, 0x9e, 0x78, 0xf0, 0xc9, 0x8a, 0x9d, 0x58,
        0x0b, 0x4a, 0x65, 0x8c, 0x84, 0xfc, 0x8f, 0x20,
        0x96, 0xc2, 0xfb, 0xea, 0x8f, 0x5f, 0x8c, 0x59,
        0xd0, 0xfd, 0xac, 0xb3, 0xbe, 0x28, 0x02, 0xef,
        0x80, 0x2a, 0xbb, 0xec, 0xb3, 0xab, 0xa4, 0xac,
        0xaa, 0xc6, 0x9a, 0x0e, 0x96, 0x5a, 0xbd, 0x89,
        0x81, 0xe9, 0x89, 0x6b, 0x1f, 0x6e, 0xf9, 0xd6,
        0x0f, 0x7a, 0x16, 0x4b, 0x37, 0x1a, 0xf8, 0x69,
        0xfd, 0x0e, 0x48, 0x07, 0x37, 0x42, 0x82, 0x5e,
        0x94, 0x34, 0xfc, 0x54, 0xda, 0x83, 0x7e, 0x12,
        0x02, 0x66, 0xd5, 0x33, 0x02, 0x95, 0x48, 0x43,
        0x53, 0x8e, 0xa7, 0xc6, 0xc3, 0xdb, 0xfb, 0x4f,
        0xf3, 0xb2, 0xfd, 0xbe, 0x24, 0x44, 0x37, 0xf2,
        0xa1, 0x53, 0xcc, 0xf7, 0xbd, 0xb4, 0xc9, 0x2a,
        0xa0, 0x81, 0x02, 0xd4, 0xf3, 0xcf, 0xf2, 0xae,
        0x5e, 0xf8, 0x6f, 0xab, 0x46, 0x53, 0x59, 0x5e,
        0x6a, 0x58, 0x37, 0xfa, 0x2f, 0x3e, 0x29, 0xf2,
        0x7a, 0x9c, 0xde, 0x59, 0x66, 0x84, 0x3f, 0xb8,
        0x47, 0xa4, 0xa6, 0x1f, 0x1e, 0x76, 0xc2, 0x81,
        0xfe, 0x8b, 0xb2, 0xb0, 0xa1, 0x81, 0xd0, 0x96,
        0x10, 0x0d, 0xb5, 0xa1, 0xa5, 0xce, 0x7a, 0x91,
        0x02, 0x38, 0x25, 0x1a, 0x43, 0xca, 0x55, 0x67,
        0x12, 0xea, 0xad, 0xea, 0x16, 0x7f, 0xb4, 0xd7,
        0xd7, 0x58, 0x25, 0xe4, 0x40, 0xf3, 0xec, 0xd7,
        0x82, 0x03, 0x6d, 0x75, 0x74, 0xdf, 0x8b, 0xce,
        0xac, 0xb3, 0x97, 0xab, 0xef, 0xc5, 0xf5, 0x25,
        0x4d, 0x27, 0x22, 0x21, 0x5c, 0x53, 0xff, 0x54,
        0xaf, 0x82, 0x99, 0xaa, 0xaa, 0xd6, 0x42, 0xc6,
        0xd7, 0x2a, 0x14, 0xd2, 0x78, 0x82, 0xd9, 0xbb,
        0xd5, 0x39, 0xe1, 0xcc, 0x7a, 0x52, 0x75, 0x26,
        0xba, 0x89, 0xb8, 0xc0, 0x37, 0xad, 0x09, 0x12,
        0x0e, 0x98, 0xab, 0x04, 0x2d, 0x3e, 0x86, 0x52,
        0xb3, 0x1a, 0xe0, 0xe4, 0x78, 0x51, 0x6b, 0xfa,
        0xf8, 0x8e, 0xfc, 0xa9, 0xf3, 0x67, 0x6f, 0xfe,
        0x99, 0xd2, 0x81, 0x9d, 0xca, 0xeb, 0x76, 0x10,
        0xa6, 0x26, 0x69, 0x5f, 0x53, 0x11, 0x76, 0x65,
        0xd2, 0x67, 0xd3, 0xf7, 0xab, 0xeb, 0xd6, 0xbb,
        0xd6, 0x73, 0x3f, 0x64, 0x5c, 0x72, 0xc3, 0x89,
        0xf0, 0x38, 0x55, 0xbd, 0xf1, 0xe4, 0xb8, 0x07,
        0x5b, 0x51, 0x65, 0x69, 0xb1, 0x18, 0x23, 0x3a,
        0x0f, 0x09, 0x71, 0xd2, 0x4b, 0x83, 0x11, 0x3c,
        0x0b, 0x09, 0x6f, 0x52, 0x16, 0xa2, 0x07, 0xca,
        0x99, 0xa7, 0xcd, 0xdc, 0x81, 0xc1, 0x30, 0x92,
        0x3f, 0xe3, 0xd9, 0x1e, 0x75, 0x08, 0xc9, 0xac,
        0x5f, 0x2e, 0x91, 0x4f, 0xf5, 0xdc, 0xca, 0xb9,
        0xe5, 0x58, 0x56, 0x6f, 0xa1, 0x4e, 0xfb, 0x34,
        0xac, 0x98, 0xd8, 0x78, 0x58, 0x08, 0x14, 0xb9,
        0x4b, 0x73, 0xac, 0xbf, 0xde, 0x90, 0x72, 0xf3,
        0x0b, 0x88, 0x1f, 0x7f, 0x0f, 0xff, 0x42, 0xd4,
        0x04, 0x5d, 0x1a, 0xce, 0x63, 0x22, 0xd8, 0x6a,
        0x97, 0xd1, 0x64, 0xaa, 0x84, 0xd9, 0x3a, 0x60,
        0x49, 0x80, 0x65, 0xcc, 0x7c, 0x20, 0xe6, 0x36,
        0xf5, 0x86, 0x2d, 0xc8, 0x15, 0x31, 0xa8, 0x8c,
        0x60, 0x30, 0x5a, 0x2e, 0x59, 0xa9, 0x85, 0xbe,
        0x32, 0x7a, 0x69, 0x02, 0xe4, 0xbe, 0xd9, 0x86,
        0xdb, 0xf4, 0xa0, 0xb5, 0x0c, 0x21, 0x7a, 0xf0,
        0xea, 0x7f, 0xdf, 0x9a, 0xb3, 0x7f, 0x9e, 0xa1,
        0xa1, 0xaa, 0xa7, 0x2f, 0x54, 0xcf, 0x40, 0x15,
        0x4e, 0xa9, 0xb2, 0x69, 0xf1, 0xa7, 0xc0, 0x9f,
        0x9f, 0x43, 0x24, 0x51, 0x09, 0x43, 0x1a, 0x17,
        0x5d, 0x50, 0xe2, 0xdb, 0x01, 0x32, 0x33, 0x7b,
        0xaa, 0x0e, 0xf9, 0x7e, 0xed, 0x0f, 0xcf, 0x20,
        0x48, 0x9d, 0xa3, 0x6b, 0x79, 0xa1, 0x17, 0x2f,
        0xac, 0xcc, 0x2f, 0x7d, 0xed, 0x7c, 0x60, 0xe0,
        0x06, 0x94, 0x28, 0x2d, 0x93, 0x35, 0x9c, 0x46,
        0x82, 0x13, 0x56, 0x42, 0xbc, 0x81, 0xf4, 0x33,
        0x57, 0x4a, 0xa8, 0xef, 0x0c, 0x97, 0xb4, 0xad,
        0xe7, 0xca, 0x37, 0x2c, 0x5f, 0xfc, 0x23, 0xc7,
        0xed, 0xdd, 0x83, 0x9b, 0xab, 0x4e, 0x0f, 0x14,
        0xd6, 0xdf, 0x15, 0xc9, 0xdb, 0xea, 0xb1, 0x76,
        0xbe, 0xc8, 0xb5, 0x70, 0x1c, 0xf0, 0x54, 0xeb,
        0x30, 0x72, 0xf6, 0xda, 0xdc, 0x98, 0xf8, 0x88,
        0x19, 0x04, 0x2b, 0xf1, 0x0c, 0x40, 0x75, 0x16,
        0xee, 0x58, 0xbc, 0xe3, 0x3f, 0xbe, 0x3b, 0x3d,
        0x86, 0xa5, 0x42, 0x55, 0xe5, 0x77, 0xdb, 0x45,
        0x98, 0xe3, 0x0a, 0x13, 0x53, 0x61, 0x52, 0x8c,
        0x10, 0x16, 0x83, 0xa5, 0xfc, 0xde, 0x7e, 0x8b,
        0xa5, 0x3f, 0x34, 0x56, 0x25, 0x4b, 0xe8, 0xf4,
        0x5f, 0xe3, 0xa5, 0x61, 0x20, 0xae, 0x96, 0xea,
        0x37, 0x73, 0x63, 0x1f, 0xcb, 0x38, 0x73, 0xaa,
        0x3a, 0xbd, 0x91, 0xbc, 0xff, 0x00, 0xbd, 0x38,
        0xbd, 0x43, 0x69, 0x7a, 0x2e, 0x78, 0x9e, 0x00,
        0xda, 0x60, 0x77, 0x48, 0x2e, 0x7b, 0x1b, 0x1a,
        0x67, 0x7b, 0x5a, 0xfa, 0xe4, 0xc5, 0x4e, 0x6c,
        0xbd, 0xf7, 0x37, 0x7b, 0x69, 0x4e, 0xb7, 0xd7,
        0xa5, 0xb9, 0x13, 0x47, 0x6a, 0x5b, 0xe9, 0x23,
        0x32, 0x2d, 0x3d, 0xe0, 0x60, 0x60, 0xfd, 0x5e,
        0x81, 0x96, 0x35, 0x23, 0x2a, 0x2c, 0xf4, 0xf0,
        0x73, 0x1d, 0xa1, 0x3b, 0x85, 0x46, 0xd1, 0xd6,
        0xd4, 0xf8, 0xd7, 0x5b, 0x9f, 0xce, 0x6c, 0x23,
        0x41, 0xa7, 0x1b, 0x0e, 0xa6, 0xf7, 0x80, 0xdf,
        0x54, 0xbf, 0xdb, 0x0d, 0xd5, 0xcd, 0x98, 0x55,
        0x17, 0x9f, 0x60, 0x2f, 0x91, 0x72, 0x30, 0x7c,
        0x72, 0x68, 0x72, 0x4c, 0x36, 0x18, 0xe6, 0x81,
        0x7a, 0xbd, 0x79, 0x3a, 0xdc, 0x21, 0x4a, 0x0d,
        0xc0, 0xbc, 0x61, 0x68, 0x16, 0x63, 0x2f, 0x27,
        0xea, 0x33, 0x6f, 0xb5, 0x6d, 0xfd,
    };
    ASSERT_EQ(0, memcmp(PACKET, packet, sizeof(packet)));
}


TEST_F(onion, testvector_failure)
{
    ptarm_buf_t buf_failmsg;
    ptarm_buf_alloc(&buf_failmsg, 2);
    buf_failmsg.buf[0] = 0x20;
    buf_failmsg.buf[1] = 0x02;

    ptarm_buf_t buf_fail4 = PTARM_BUF_INIT;

    const uint8_t shared_secret4[] = {
        0xb5, 0x75, 0x6b, 0x9b, 0x54, 0x27, 0x27, 0xdb,
        0xaf, 0xc6, 0x76, 0x5a, 0x49, 0x48, 0x8b, 0x02,
        0x3a, 0x72, 0x5d, 0x63, 0x1a, 0xf6, 0x88, 0xfc,
        0x03, 0x12, 0x17, 0xe9, 0x07, 0x70, 0xc3, 0x28,
    };
    const ptarm_buf_t buf_shared_secret4 = { (CONST_CAST uint8_t *)shared_secret4, sizeof(shared_secret4) };
    ln_onion_failure_create(&buf_fail4, &buf_shared_secret4, &buf_failmsg);
    ptarm_buf_free(&buf_failmsg);

    const uint8_t ERR4[] = {
        0xa5, 0xe6, 0xbd, 0x0c, 0x74, 0xcb, 0x34, 0x7f,
        0x10, 0xcc, 0xe3, 0x67, 0xf9, 0x49, 0x09, 0x8f,
        0x24, 0x57, 0xd1, 0x4c, 0x04, 0x6f, 0xd8, 0xa2,
        0x2c, 0xb9, 0x6e, 0xfb, 0x30, 0xb0, 0xfd, 0xcd,
        0xa8, 0xcb, 0x91, 0x68, 0xb5, 0x0f, 0x2f, 0xd4,
        0x5e, 0xdd, 0x73, 0xc1, 0xb0, 0xc8, 0xb3, 0x30,
        0x02, 0xdf, 0x37, 0x68, 0x01, 0xff, 0x58, 0xaa,
        0xa9, 0x40, 0x00, 0xbf, 0x8a, 0x86, 0xf9, 0x26,
        0x20, 0xf3, 0x43, 0xba, 0xef, 0x38, 0xa5, 0x80,
        0x10, 0x23, 0x95, 0xae, 0x3a, 0xbf, 0x91, 0x28,
        0xd1, 0x04, 0x7a, 0x07, 0x36, 0xff, 0x9b, 0x83,
        0xd4, 0x56, 0x74, 0x0e, 0xbb, 0xb4, 0xae, 0xb3,
        0xaa, 0x97, 0x37, 0xf1, 0x8f, 0xb4, 0xaf, 0xb4,
        0xaa, 0x07, 0x4f, 0xb2, 0x6c, 0x4d, 0x70, 0x2f,
        0x42, 0x96, 0x88, 0x88, 0x55, 0x0a, 0x3b, 0xde,
        0xd8, 0xc0, 0x52, 0x47, 0xe0, 0x45, 0xb8, 0x66,
        0xba, 0xef, 0x04, 0x99, 0xf0, 0x79, 0xfd, 0xae,
        0xef, 0x65, 0x38, 0xf3, 0x1d, 0x44, 0xde, 0xaf,
        0xff, 0xdf, 0xd3, 0xaf, 0xa2, 0xfb, 0x4c, 0xa9,
        0x08, 0x2b, 0x8f, 0x1c, 0x46, 0x53, 0x71, 0xa9,
        0x89, 0x4d, 0xd8, 0xc2, 0x43, 0xfb, 0x48, 0x47,
        0xe0, 0x04, 0xf5, 0x25, 0x6b, 0x3e, 0x90, 0xe2,
        0xed, 0xde, 0x4c, 0x9f, 0xb3, 0x08, 0x2d, 0xdf,
        0xe4, 0xd1, 0xe7, 0x34, 0xca, 0xcd, 0x96, 0xef,
        0x07, 0x06, 0xbf, 0x63, 0xc9, 0x98, 0x4e, 0x22,
        0xdc, 0x98, 0x85, 0x1b, 0xcc, 0xcd, 0x1c, 0x34,
        0x94, 0x35, 0x1f, 0xeb, 0x45, 0x8c, 0x9c, 0x6a,
        0xf4, 0x1c, 0x00, 0x44, 0xbe, 0xa3, 0xc4, 0x75,
        0x52, 0xb1, 0xd9, 0x92, 0xae, 0x54, 0x2b, 0x17,
        0xa2, 0xd0, 0xbb, 0xa1, 0xa0, 0x96, 0xc7, 0x8d,
        0x16, 0x90, 0x34, 0xec, 0xb5, 0x5b, 0x6e, 0x3a,
        0x72, 0x63, 0xc2, 0x60, 0x17, 0xf0, 0x33, 0x03,
        0x12, 0x28, 0x83, 0x3c, 0x1d, 0xae, 0xfc, 0x0d,
        0xed, 0xb8, 0xcf, 0x7c, 0x3e, 0x37, 0xc9, 0xc3,
        0x7e, 0xbf, 0xe4, 0x2f, 0x32, 0x25, 0xc3, 0x26,
        0xe8, 0xbc, 0xfd, 0x33, 0x88, 0x04, 0xc1, 0x45,
        0xb1, 0x6e, 0x34, 0xe4,
    };
    ASSERT_EQ(0, memcmp(ERR4, buf_fail4.buf, buf_fail4.len));
    ASSERT_EQ(sizeof(ERR4), buf_fail4.len);


    ptarm_buf_t buf_fail3 = PTARM_BUF_INIT;

    const uint8_t shared_secret3[] = {
        0x21, 0xe1, 0x3c, 0x2d, 0x7c, 0xfe, 0x7e, 0x18,
        0x83, 0x6d, 0xf5, 0x08, 0x72, 0x46, 0x61, 0x17,
        0xa2, 0x95, 0x78, 0x3a, 0xb8, 0xaa, 0xb0, 0xe7,
        0xec, 0xc8, 0xc7, 0x25, 0x50, 0x3a, 0xd0, 0x2d,
    };
    const ptarm_buf_t buf_shared_secret3 = { (CONST_CAST uint8_t *)shared_secret3, sizeof(shared_secret3) };
    ln_onion_failure_forward(&buf_fail3, &buf_shared_secret3, &buf_fail4);
    ptarm_buf_free(&buf_fail4);

    const uint8_t ERR3[] = {
        0xc4, 0x9a, 0x1c, 0xe8, 0x16, 0x80, 0xf7, 0x8f,
        0x5f, 0x20, 0x00, 0xcd, 0xa3, 0x62, 0x68, 0xde,
        0x34, 0xa3, 0xf0, 0xa0, 0x66, 0x2f, 0x55, 0xb4,
        0xe8, 0x37, 0xc8, 0x3a, 0x87, 0x73, 0xc2, 0x2a,
        0xa0, 0x81, 0xba, 0xb1, 0x61, 0x6a, 0x00, 0x11,
        0x58, 0x53, 0x23, 0x93, 0x0f, 0xa5, 0xb9, 0xfa,
        0xe0, 0xc8, 0x57, 0x70, 0xa2, 0x27, 0x9f, 0xf5,
        0x9e, 0xc4, 0x27, 0xad, 0x1b, 0xbf, 0xf9, 0x00,
        0x1c, 0x0c, 0xd1, 0x49, 0x70, 0x04, 0xbd, 0x2a,
        0x0f, 0x68, 0xb5, 0x07, 0x04, 0xcf, 0x6d, 0x6a,
        0x4b, 0xf3, 0xc8, 0xb6, 0xa0, 0x83, 0x33, 0x99,
        0xa2, 0x4b, 0x34, 0x56, 0x96, 0x1b, 0xa0, 0x07,
        0x36, 0x78, 0x51, 0x12, 0x59, 0x4f, 0x65, 0xb6,
        0xb2, 0xd4, 0x4d, 0x9f, 0x5e, 0xa4, 0xe4, 0x9b,
        0x5e, 0x1e, 0xc2, 0xaf, 0x97, 0x8c, 0xbe, 0x31,
        0xc6, 0x71, 0x14, 0x44, 0x0a, 0xc5, 0x1a, 0x62,
        0x08, 0x1d, 0xf0, 0xed, 0x46, 0xd4, 0xa3, 0xdf,
        0x29, 0x5d, 0xa0, 0xb0, 0xfe, 0x25, 0xc0, 0x11,
        0x50, 0x19, 0xf0, 0x3f, 0x15, 0xec, 0x86, 0xfa,
        0xbb, 0x4c, 0x85, 0x2f, 0x83, 0x44, 0x9e, 0x81,
        0x2f, 0x14, 0x1a, 0x93, 0x95, 0xb3, 0xf7, 0x0b,
        0x76, 0x6e, 0xbb, 0xd4, 0xec, 0x2f, 0xae, 0x2b,
        0x69, 0x55, 0xbd, 0x8f, 0x32, 0x68, 0x4c, 0x15,
        0xab, 0xfe, 0x8f, 0xd3, 0xa6, 0x26, 0x1e, 0x52,
        0x65, 0x0e, 0x88, 0x07, 0xa9, 0x21, 0x58, 0xd9,
        0xf1, 0x46, 0x32, 0x61, 0xa9, 0x25, 0xe4, 0xbf,
        0xba, 0x44, 0xbd, 0x20, 0xb1, 0x66, 0xd5, 0x32,
        0xf0, 0x01, 0x71, 0x85, 0xc3, 0xa6, 0xac, 0x79,
        0x57, 0xad, 0xef, 0xe4, 0x55, 0x59, 0xe3, 0x07,
        0x2c, 0x8d, 0xc3, 0x5a, 0xbe, 0xba, 0x83, 0x5a,
        0x8c, 0xb0, 0x1a, 0x71, 0xa1, 0x5c, 0x73, 0x69,
        0x11, 0x12, 0x6f, 0x27, 0xd4, 0x6a, 0x36, 0x16,
        0x8c, 0xa5, 0xef, 0x7d, 0xcc, 0xd4, 0xe2, 0x88,
        0x62, 0x12, 0x60, 0x2b, 0x18, 0x14, 0x63, 0xe0,
        0xdd, 0x30, 0x18, 0x5c, 0x96, 0x34, 0x8f, 0x97,
        0x43, 0xa0, 0x2a, 0xca, 0x8e, 0xc2, 0x7c, 0x0b,
        0x90, 0xdc, 0xa2, 0x70,
    };
    ASSERT_EQ(0, memcmp(ERR3, buf_fail3.buf, buf_fail3.len));
    ASSERT_EQ(sizeof(ERR3), buf_fail3.len);


    ptarm_buf_t buf_fail2 = PTARM_BUF_INIT;

    const uint8_t shared_secret2[] = {
        0x3a, 0x6b, 0x41, 0x25, 0x48, 0x76, 0x2f, 0x0d,
        0xbc, 0xcc, 0xe5, 0xc7, 0xae, 0x7b, 0xb8, 0x14,
        0x7d, 0x1c, 0xaf, 0x9b, 0x54, 0x71, 0xc3, 0x41,
        0x20, 0xb3, 0x0b, 0xc9, 0xc0, 0x48, 0x91, 0xcc,
    };
    const ptarm_buf_t buf_shared_secret2 = { (CONST_CAST uint8_t *)shared_secret2, sizeof(shared_secret2) };
    ln_onion_failure_forward(&buf_fail2, &buf_shared_secret2, &buf_fail3);
    ptarm_buf_free(&buf_fail3);

    const uint8_t ERR2[] = {
        0xa5, 0xd3, 0xe8, 0x63, 0x4c, 0xfe, 0x78, 0xb2,
        0x30, 0x7d, 0x87, 0xc6, 0xd9, 0x0b, 0xe6, 0xfe,
        0x78, 0x55, 0xb4, 0xf2, 0xcc, 0x9b, 0x1d, 0xfb,
        0x19, 0xe9, 0x2e, 0x4b, 0x79, 0x10, 0x3f, 0x61,
        0xff, 0x9a, 0xc2, 0x5f, 0x41, 0x2d, 0xdf, 0xb7,
        0x46, 0x6e, 0x74, 0xf8, 0x1b, 0x3e, 0x54, 0x55,
        0x63, 0xcd, 0xd8, 0xf5, 0x52, 0x4d, 0xae, 0x87,
        0x3d, 0xe6, 0x1d, 0x7b, 0xdf, 0xcc, 0xd4, 0x96,
        0xaf, 0x25, 0x84, 0x93, 0x0d, 0x2b, 0x56, 0x6b,
        0x4f, 0x8d, 0x38, 0x81, 0xf8, 0xc0, 0x43, 0xdf,
        0x92, 0x22, 0x4f, 0x38, 0xcf, 0x09, 0x4c, 0xfc,
        0x09, 0xd9, 0x26, 0x55, 0x98, 0x95, 0x31, 0x52,
        0x45, 0x93, 0xec, 0x6d, 0x6c, 0xae, 0xc1, 0x86,
        0x3b, 0xdf, 0xaa, 0x79, 0x22, 0x9b, 0x50, 0x20,
        0xac, 0xc0, 0x34, 0xcd, 0x6d, 0xee, 0xea, 0x10,
        0x21, 0xc5, 0x05, 0x86, 0x94, 0x7b, 0x9b, 0x8e,
        0x6f, 0xaa, 0x83, 0xb8, 0x1f, 0xbf, 0xa6, 0x13,
        0x3c, 0x0a, 0xf5, 0xd6, 0xb0, 0x7c, 0x01, 0x7f,
        0x71, 0x58, 0xfa, 0x94, 0xf0, 0xd2, 0x06, 0xba,
        0xf1, 0x2d, 0xda, 0x6b, 0x68, 0xf7, 0x85, 0xb7,
        0x73, 0xb3, 0x60, 0xfd, 0x04, 0x97, 0xe1, 0x6c,
        0xc4, 0x02, 0xd7, 0x79, 0xc8, 0xd4, 0x8d, 0x0f,
        0xa6, 0x31, 0x55, 0x36, 0xef, 0x06, 0x60, 0xf3,
        0xf4, 0xe1, 0x86, 0x5f, 0x5b, 0x38, 0xea, 0x49,
        0xc7, 0xda, 0x4f, 0xd9, 0x59, 0xde, 0x4e, 0x83,
        0xff, 0x3a, 0xb6, 0x86, 0xf0, 0x59, 0xa4, 0x5c,
        0x65, 0xba, 0x2a, 0xf4, 0xa6, 0xa7, 0x91, 0x66,
        0xaa, 0x0f, 0x49, 0x6b, 0xf0, 0x4d, 0x06, 0x98,
        0x7b, 0x6d, 0x2e, 0xa2, 0x05, 0xbd, 0xb0, 0xd3,
        0x47, 0x71, 0x8b, 0x9a, 0xef, 0xf5, 0xb6, 0x1d,
        0xff, 0xf3, 0x44, 0x99, 0x3a, 0x27, 0x5b, 0x79,
        0x71, 0x7c, 0xd8, 0x15, 0xb6, 0xad, 0x4c, 0x0b,
        0xeb, 0x56, 0x8c, 0x4a, 0xc9, 0xc3, 0x6f, 0xf1,
        0xc3, 0x15, 0xec, 0x11, 0x19, 0xa1, 0x99, 0x3c,
        0x4b, 0x61, 0xe6, 0xea, 0xa0, 0x37, 0x5e, 0x0a,
        0xaf, 0x73, 0x8a, 0xc6, 0x91, 0xab, 0xd3, 0x26,
        0x3b, 0xf9, 0x37, 0xe3,
    };
    ASSERT_EQ(0, memcmp(ERR2, buf_fail2.buf, buf_fail2.len));
    ASSERT_EQ(sizeof(ERR2), buf_fail2.len);


    ptarm_buf_t buf_fail1 = PTARM_BUF_INIT;

    const uint8_t shared_secret1[] = {
        0xa6, 0x51, 0x9e, 0x98, 0x83, 0x2a, 0x0b, 0x17,
        0x9f, 0x62, 0x12, 0x3b, 0x35, 0x67, 0xc1, 0x06,
        0xdb, 0x99, 0xee, 0x37, 0xbe, 0xf0, 0x36, 0xe7,
        0x83, 0x26, 0x36, 0x02, 0xf3, 0x48, 0x8f, 0xae,
    };
    const ptarm_buf_t buf_shared_secret1 = { (CONST_CAST uint8_t *)shared_secret1, sizeof(shared_secret1) };
    ln_onion_failure_forward(&buf_fail1, &buf_shared_secret1, &buf_fail2);
    ptarm_buf_free(&buf_fail2);

    const uint8_t ERR1[] = {
        0xaa, 0xc3, 0x20, 0x0c, 0x49, 0x68, 0xf5, 0x6b,
        0x21, 0xf5, 0x3e, 0x5e, 0x37, 0x4e, 0x3a, 0x23,
        0x83, 0xad, 0x2b, 0x1b, 0x65, 0x01, 0xbb, 0xcc,
        0x45, 0xab, 0xc3, 0x1e, 0x59, 0xb2, 0x68, 0x81,
        0xb7, 0xdf, 0xad, 0xbb, 0x56, 0xec, 0x8d, 0xae,
        0x88, 0x57, 0xad, 0xd9, 0x4e, 0x67, 0x02, 0xfb,
        0x4c, 0x3a, 0x4d, 0xe2, 0x2e, 0x2e, 0x66, 0x9e,
        0x1e, 0xd9, 0x26, 0xb0, 0x44, 0x47, 0xfc, 0x73,
        0x03, 0x4b, 0xb7, 0x30, 0xf4, 0x93, 0x2a, 0xcd,
        0x62, 0x72, 0x7b, 0x75, 0x34, 0x8a, 0x64, 0x8a,
        0x11, 0x28, 0x74, 0x46, 0x57, 0xca, 0x6a, 0x4e,
        0x71, 0x3b, 0x9b, 0x64, 0x6c, 0x3c, 0xa6, 0x6c,
        0xac, 0x02, 0xcd, 0xab, 0x44, 0xdd, 0x34, 0x39,
        0x89, 0x0e, 0xf3, 0xaa, 0xf6, 0x17, 0x08, 0x71,
        0x4f, 0x73, 0x75, 0x34, 0x9b, 0x8d, 0xa5, 0x41,
        0xb2, 0x54, 0x8d, 0x45, 0x2d, 0x84, 0xde, 0x70,
        0x84, 0xbb, 0x95, 0xb3, 0xac, 0x23, 0x45, 0x20,
        0x1d, 0x62, 0x4d, 0x31, 0xf4, 0xd5, 0x20, 0x78,
        0xaa, 0x0f, 0xa0, 0x5a, 0x88, 0xb4, 0xe2, 0x02,
        0x02, 0xbd, 0x2b, 0x86, 0xac, 0x5b, 0x52, 0x91,
        0x9e, 0xa3, 0x05, 0xa8, 0x94, 0x9d, 0xe9, 0x5e,
        0x93, 0x5e, 0xed, 0x03, 0x19, 0xcf, 0x3c, 0xf1,
        0x9e, 0xbe, 0xa6, 0x1d, 0x76, 0xba, 0x92, 0x53,
        0x24, 0x97, 0xfc, 0xdc, 0x94, 0x11, 0xd0, 0x6b,
        0xcd, 0x42, 0x75, 0x09, 0x4d, 0x0a, 0x4a, 0x3c,
        0x5d, 0x3a, 0x94, 0x5e, 0x43, 0x30, 0x5a, 0x5a,
        0x92, 0x56, 0xe3, 0x33, 0xe1, 0xf6, 0x4d, 0xbc,
        0xa5, 0xfc, 0xd4, 0xe0, 0x3a, 0x39, 0xb9, 0x01,
        0x2d, 0x19, 0x75, 0x06, 0xe0, 0x6f, 0x29, 0x33,
        0x9d, 0xfe, 0xe3, 0x33, 0x19, 0x95, 0xb2, 0x16,
        0x15, 0x33, 0x7a, 0xe0, 0x60, 0x23, 0x3d, 0x39,
        0xbe, 0xfe, 0xa9, 0x25, 0xcc, 0x26, 0x28, 0x73,
        0xe0, 0x53, 0x04, 0x08, 0xe6, 0x99, 0x0f, 0x1c,
        0xbd, 0x23, 0x3a, 0x15, 0x0e, 0xf7, 0xb0, 0x04,
        0xff, 0x61, 0x66, 0xc7, 0x0c, 0x68, 0xd9, 0xf8,
        0xc8, 0x53, 0xc1, 0xab, 0xca, 0x64, 0x0b, 0x86,
        0x60, 0xdb, 0x29, 0x21,
    };
    ASSERT_EQ(0, memcmp(ERR1, buf_fail1.buf, buf_fail1.len));
    ASSERT_EQ(sizeof(ERR1), buf_fail1.len);


    ptarm_buf_t buf_fail0 = PTARM_BUF_INIT;

    const uint8_t shared_secret0[] = {
        0x53, 0xeb, 0x63, 0xea, 0x8a, 0x3f, 0xec, 0x3b,
        0x3c, 0xd4, 0x33, 0xb8, 0x5c, 0xd6, 0x2a, 0x4b,
        0x14, 0x5e, 0x1d, 0xda, 0x09, 0x39, 0x1b, 0x34,
        0x8c, 0x4e, 0x1c, 0xd3, 0x6a, 0x03, 0xea, 0x66,
    };
    const ptarm_buf_t buf_shared_secret0 = { (CONST_CAST uint8_t *)shared_secret0, sizeof(shared_secret0) };
    ln_onion_failure_forward(&buf_fail0, &buf_shared_secret0, &buf_fail1);
    ptarm_buf_free(&buf_fail1);

    const uint8_t ERR0[] = {
        0x9c, 0x5a, 0xdd, 0x39, 0x63, 0xfc, 0x7f, 0x6e,
        0xd7, 0xf1, 0x48, 0x62, 0x3c, 0x84, 0x13, 0x4b,
        0x56, 0x47, 0xe1, 0x30, 0x64, 0x19, 0xdb, 0xe2,
        0x17, 0x4e, 0x52, 0x3f, 0xa9, 0xe2, 0xfb, 0xed,
        0x3a, 0x06, 0xa1, 0x9f, 0x89, 0x91, 0x45, 0x61,
        0x07, 0x41, 0xc8, 0x3a, 0xd4, 0x0b, 0x77, 0x12,
        0xae, 0xfa, 0xdd, 0xec, 0x8c, 0x6b, 0xaf, 0x73,
        0x25, 0xd9, 0x2e, 0xa4, 0xca, 0x4d, 0x1d, 0xf8,
        0xbc, 0xe5, 0x17, 0xf7, 0xe5, 0x45, 0x54, 0x60,
        0x8b, 0xf2, 0xbd, 0x80, 0x71, 0xa4, 0xf5, 0x2a,
        0x7a, 0x2f, 0x7f, 0xfb, 0xb1, 0x41, 0x3e, 0xda,
        0xd8, 0x1e, 0xee, 0xa5, 0x78, 0x5a, 0xa9, 0xd9,
        0x90, 0xf2, 0x86, 0x5d, 0xc2, 0x3b, 0x4b, 0xc3,
        0xc3, 0x01, 0xa9, 0x4e, 0xec, 0x4e, 0xab, 0xeb,
        0xca, 0x66, 0xbe, 0x5c, 0xf6, 0x38, 0xf6, 0x93,
        0xec, 0x25, 0x6a, 0xec, 0x51, 0x46, 0x20, 0xcc,
        0x28, 0xee, 0x4a, 0x94, 0xbd, 0x95, 0x65, 0xbc,
        0x4d, 0x49, 0x62, 0xb9, 0xd3, 0x64, 0x1d, 0x42,
        0x78, 0xfb, 0x31, 0x9e, 0xd2, 0xb8, 0x4d, 0xe5,
        0xb6, 0x65, 0xf3, 0x07, 0xa2, 0xdb, 0x0f, 0x7f,
        0xbb, 0x75, 0x73, 0x66, 0x06, 0x7d, 0x88, 0xc5,
        0x0f, 0x7e, 0x82, 0x91, 0x38, 0xfd, 0xe4, 0xf7,
        0x8d, 0x39, 0xb5, 0xb5, 0x80, 0x2f, 0x1b, 0x92,
        0xa8, 0xa8, 0x20, 0x86, 0x5a, 0xf5, 0xcc, 0x79,
        0xf9, 0xf3, 0x0b, 0xc3, 0xf4, 0x61, 0xc6, 0x6a,
        0xf9, 0x5d, 0x13, 0xe5, 0xe1, 0xf0, 0x38, 0x1c,
        0x18, 0x45, 0x72, 0xa9, 0x1d, 0xee, 0x1c, 0x84,
        0x90, 0x48, 0xa6, 0x47, 0xa1, 0x15, 0x8c, 0xf8,
        0x84, 0x06, 0x4d, 0xed, 0xdb, 0xf1, 0xb0, 0xb8,
        0x8d, 0xfe, 0x2f, 0x79, 0x14, 0x28, 0xd0, 0xba,
        0x0f, 0x6f, 0xb2, 0xf0, 0x4e, 0x14, 0x08, 0x1f,
        0x69, 0x16, 0x5a, 0xe6, 0x6d, 0x92, 0x97, 0xc1,
        0x18, 0xf0, 0x90, 0x77, 0x05, 0xc9, 0xc4, 0x95,
        0x4a, 0x19, 0x9b, 0xae, 0x0b, 0xb9, 0x6f, 0xad,
        0x76, 0x3d, 0x69, 0x0e, 0x7d, 0xaa, 0x6c, 0xfd,
        0xa5, 0x9b, 0xa7, 0xf2, 0xc8, 0xd1, 0x14, 0x48,
        0xb6, 0x04, 0xd1, 0x2d,
    };
    ASSERT_EQ(0, memcmp(ERR0, buf_fail0.buf, buf_fail0.len));
    ASSERT_EQ(sizeof(ERR0), buf_fail0.len);


    ptarm_buf_free(&buf_fail0);
}


TEST_F(onion, testvector_failure_resolve)
{
    const uint8_t ERR0[] = {
        0x9c, 0x5a, 0xdd, 0x39, 0x63, 0xfc, 0x7f, 0x6e,
        0xd7, 0xf1, 0x48, 0x62, 0x3c, 0x84, 0x13, 0x4b,
        0x56, 0x47, 0xe1, 0x30, 0x64, 0x19, 0xdb, 0xe2,
        0x17, 0x4e, 0x52, 0x3f, 0xa9, 0xe2, 0xfb, 0xed,
        0x3a, 0x06, 0xa1, 0x9f, 0x89, 0x91, 0x45, 0x61,
        0x07, 0x41, 0xc8, 0x3a, 0xd4, 0x0b, 0x77, 0x12,
        0xae, 0xfa, 0xdd, 0xec, 0x8c, 0x6b, 0xaf, 0x73,
        0x25, 0xd9, 0x2e, 0xa4, 0xca, 0x4d, 0x1d, 0xf8,
        0xbc, 0xe5, 0x17, 0xf7, 0xe5, 0x45, 0x54, 0x60,
        0x8b, 0xf2, 0xbd, 0x80, 0x71, 0xa4, 0xf5, 0x2a,
        0x7a, 0x2f, 0x7f, 0xfb, 0xb1, 0x41, 0x3e, 0xda,
        0xd8, 0x1e, 0xee, 0xa5, 0x78, 0x5a, 0xa9, 0xd9,
        0x90, 0xf2, 0x86, 0x5d, 0xc2, 0x3b, 0x4b, 0xc3,
        0xc3, 0x01, 0xa9, 0x4e, 0xec, 0x4e, 0xab, 0xeb,
        0xca, 0x66, 0xbe, 0x5c, 0xf6, 0x38, 0xf6, 0x93,
        0xec, 0x25, 0x6a, 0xec, 0x51, 0x46, 0x20, 0xcc,
        0x28, 0xee, 0x4a, 0x94, 0xbd, 0x95, 0x65, 0xbc,
        0x4d, 0x49, 0x62, 0xb9, 0xd3, 0x64, 0x1d, 0x42,
        0x78, 0xfb, 0x31, 0x9e, 0xd2, 0xb8, 0x4d, 0xe5,
        0xb6, 0x65, 0xf3, 0x07, 0xa2, 0xdb, 0x0f, 0x7f,
        0xbb, 0x75, 0x73, 0x66, 0x06, 0x7d, 0x88, 0xc5,
        0x0f, 0x7e, 0x82, 0x91, 0x38, 0xfd, 0xe4, 0xf7,
        0x8d, 0x39, 0xb5, 0xb5, 0x80, 0x2f, 0x1b, 0x92,
        0xa8, 0xa8, 0x20, 0x86, 0x5a, 0xf5, 0xcc, 0x79,
        0xf9, 0xf3, 0x0b, 0xc3, 0xf4, 0x61, 0xc6, 0x6a,
        0xf9, 0x5d, 0x13, 0xe5, 0xe1, 0xf0, 0x38, 0x1c,
        0x18, 0x45, 0x72, 0xa9, 0x1d, 0xee, 0x1c, 0x84,
        0x90, 0x48, 0xa6, 0x47, 0xa1, 0x15, 0x8c, 0xf8,
        0x84, 0x06, 0x4d, 0xed, 0xdb, 0xf1, 0xb0, 0xb8,
        0x8d, 0xfe, 0x2f, 0x79, 0x14, 0x28, 0xd0, 0xba,
        0x0f, 0x6f, 0xb2, 0xf0, 0x4e, 0x14, 0x08, 0x1f,
        0x69, 0x16, 0x5a, 0xe6, 0x6d, 0x92, 0x97, 0xc1,
        0x18, 0xf0, 0x90, 0x77, 0x05, 0xc9, 0xc4, 0x95,
        0x4a, 0x19, 0x9b, 0xae, 0x0b, 0xb9, 0x6f, 0xad,
        0x76, 0x3d, 0x69, 0x0e, 0x7d, 0xaa, 0x6c, 0xfd,
        0xa5, 0x9b, 0xa7, 0xf2, 0xc8, 0xd1, 0x14, 0x48,
        0xb6, 0x04, 0xd1, 0x2d,
    };
    const uint8_t ERR1[] = {
        0xaa, 0xc3, 0x20, 0x0c, 0x49, 0x68, 0xf5, 0x6b,
        0x21, 0xf5, 0x3e, 0x5e, 0x37, 0x4e, 0x3a, 0x23,
        0x83, 0xad, 0x2b, 0x1b, 0x65, 0x01, 0xbb, 0xcc,
        0x45, 0xab, 0xc3, 0x1e, 0x59, 0xb2, 0x68, 0x81,
        0xb7, 0xdf, 0xad, 0xbb, 0x56, 0xec, 0x8d, 0xae,
        0x88, 0x57, 0xad, 0xd9, 0x4e, 0x67, 0x02, 0xfb,
        0x4c, 0x3a, 0x4d, 0xe2, 0x2e, 0x2e, 0x66, 0x9e,
        0x1e, 0xd9, 0x26, 0xb0, 0x44, 0x47, 0xfc, 0x73,
        0x03, 0x4b, 0xb7, 0x30, 0xf4, 0x93, 0x2a, 0xcd,
        0x62, 0x72, 0x7b, 0x75, 0x34, 0x8a, 0x64, 0x8a,
        0x11, 0x28, 0x74, 0x46, 0x57, 0xca, 0x6a, 0x4e,
        0x71, 0x3b, 0x9b, 0x64, 0x6c, 0x3c, 0xa6, 0x6c,
        0xac, 0x02, 0xcd, 0xab, 0x44, 0xdd, 0x34, 0x39,
        0x89, 0x0e, 0xf3, 0xaa, 0xf6, 0x17, 0x08, 0x71,
        0x4f, 0x73, 0x75, 0x34, 0x9b, 0x8d, 0xa5, 0x41,
        0xb2, 0x54, 0x8d, 0x45, 0x2d, 0x84, 0xde, 0x70,
        0x84, 0xbb, 0x95, 0xb3, 0xac, 0x23, 0x45, 0x20,
        0x1d, 0x62, 0x4d, 0x31, 0xf4, 0xd5, 0x20, 0x78,
        0xaa, 0x0f, 0xa0, 0x5a, 0x88, 0xb4, 0xe2, 0x02,
        0x02, 0xbd, 0x2b, 0x86, 0xac, 0x5b, 0x52, 0x91,
        0x9e, 0xa3, 0x05, 0xa8, 0x94, 0x9d, 0xe9, 0x5e,
        0x93, 0x5e, 0xed, 0x03, 0x19, 0xcf, 0x3c, 0xf1,
        0x9e, 0xbe, 0xa6, 0x1d, 0x76, 0xba, 0x92, 0x53,
        0x24, 0x97, 0xfc, 0xdc, 0x94, 0x11, 0xd0, 0x6b,
        0xcd, 0x42, 0x75, 0x09, 0x4d, 0x0a, 0x4a, 0x3c,
        0x5d, 0x3a, 0x94, 0x5e, 0x43, 0x30, 0x5a, 0x5a,
        0x92, 0x56, 0xe3, 0x33, 0xe1, 0xf6, 0x4d, 0xbc,
        0xa5, 0xfc, 0xd4, 0xe0, 0x3a, 0x39, 0xb9, 0x01,
        0x2d, 0x19, 0x75, 0x06, 0xe0, 0x6f, 0x29, 0x33,
        0x9d, 0xfe, 0xe3, 0x33, 0x19, 0x95, 0xb2, 0x16,
        0x15, 0x33, 0x7a, 0xe0, 0x60, 0x23, 0x3d, 0x39,
        0xbe, 0xfe, 0xa9, 0x25, 0xcc, 0x26, 0x28, 0x73,
        0xe0, 0x53, 0x04, 0x08, 0xe6, 0x99, 0x0f, 0x1c,
        0xbd, 0x23, 0x3a, 0x15, 0x0e, 0xf7, 0xb0, 0x04,
        0xff, 0x61, 0x66, 0xc7, 0x0c, 0x68, 0xd9, 0xf8,
        0xc8, 0x53, 0xc1, 0xab, 0xca, 0x64, 0x0b, 0x86,
        0x60, 0xdb, 0x29, 0x21,
    };
    const uint8_t ERR2[] = {
        0xa5, 0xd3, 0xe8, 0x63, 0x4c, 0xfe, 0x78, 0xb2,
        0x30, 0x7d, 0x87, 0xc6, 0xd9, 0x0b, 0xe6, 0xfe,
        0x78, 0x55, 0xb4, 0xf2, 0xcc, 0x9b, 0x1d, 0xfb,
        0x19, 0xe9, 0x2e, 0x4b, 0x79, 0x10, 0x3f, 0x61,
        0xff, 0x9a, 0xc2, 0x5f, 0x41, 0x2d, 0xdf, 0xb7,
        0x46, 0x6e, 0x74, 0xf8, 0x1b, 0x3e, 0x54, 0x55,
        0x63, 0xcd, 0xd8, 0xf5, 0x52, 0x4d, 0xae, 0x87,
        0x3d, 0xe6, 0x1d, 0x7b, 0xdf, 0xcc, 0xd4, 0x96,
        0xaf, 0x25, 0x84, 0x93, 0x0d, 0x2b, 0x56, 0x6b,
        0x4f, 0x8d, 0x38, 0x81, 0xf8, 0xc0, 0x43, 0xdf,
        0x92, 0x22, 0x4f, 0x38, 0xcf, 0x09, 0x4c, 0xfc,
        0x09, 0xd9, 0x26, 0x55, 0x98, 0x95, 0x31, 0x52,
        0x45, 0x93, 0xec, 0x6d, 0x6c, 0xae, 0xc1, 0x86,
        0x3b, 0xdf, 0xaa, 0x79, 0x22, 0x9b, 0x50, 0x20,
        0xac, 0xc0, 0x34, 0xcd, 0x6d, 0xee, 0xea, 0x10,
        0x21, 0xc5, 0x05, 0x86, 0x94, 0x7b, 0x9b, 0x8e,
        0x6f, 0xaa, 0x83, 0xb8, 0x1f, 0xbf, 0xa6, 0x13,
        0x3c, 0x0a, 0xf5, 0xd6, 0xb0, 0x7c, 0x01, 0x7f,
        0x71, 0x58, 0xfa, 0x94, 0xf0, 0xd2, 0x06, 0xba,
        0xf1, 0x2d, 0xda, 0x6b, 0x68, 0xf7, 0x85, 0xb7,
        0x73, 0xb3, 0x60, 0xfd, 0x04, 0x97, 0xe1, 0x6c,
        0xc4, 0x02, 0xd7, 0x79, 0xc8, 0xd4, 0x8d, 0x0f,
        0xa6, 0x31, 0x55, 0x36, 0xef, 0x06, 0x60, 0xf3,
        0xf4, 0xe1, 0x86, 0x5f, 0x5b, 0x38, 0xea, 0x49,
        0xc7, 0xda, 0x4f, 0xd9, 0x59, 0xde, 0x4e, 0x83,
        0xff, 0x3a, 0xb6, 0x86, 0xf0, 0x59, 0xa4, 0x5c,
        0x65, 0xba, 0x2a, 0xf4, 0xa6, 0xa7, 0x91, 0x66,
        0xaa, 0x0f, 0x49, 0x6b, 0xf0, 0x4d, 0x06, 0x98,
        0x7b, 0x6d, 0x2e, 0xa2, 0x05, 0xbd, 0xb0, 0xd3,
        0x47, 0x71, 0x8b, 0x9a, 0xef, 0xf5, 0xb6, 0x1d,
        0xff, 0xf3, 0x44, 0x99, 0x3a, 0x27, 0x5b, 0x79,
        0x71, 0x7c, 0xd8, 0x15, 0xb6, 0xad, 0x4c, 0x0b,
        0xeb, 0x56, 0x8c, 0x4a, 0xc9, 0xc3, 0x6f, 0xf1,
        0xc3, 0x15, 0xec, 0x11, 0x19, 0xa1, 0x99, 0x3c,
        0x4b, 0x61, 0xe6, 0xea, 0xa0, 0x37, 0x5e, 0x0a,
        0xaf, 0x73, 0x8a, 0xc6, 0x91, 0xab, 0xd3, 0x26,
        0x3b, 0xf9, 0x37, 0xe3,
    };
    const uint8_t ERR3[] = {
        0xc4, 0x9a, 0x1c, 0xe8, 0x16, 0x80, 0xf7, 0x8f,
        0x5f, 0x20, 0x00, 0xcd, 0xa3, 0x62, 0x68, 0xde,
        0x34, 0xa3, 0xf0, 0xa0, 0x66, 0x2f, 0x55, 0xb4,
        0xe8, 0x37, 0xc8, 0x3a, 0x87, 0x73, 0xc2, 0x2a,
        0xa0, 0x81, 0xba, 0xb1, 0x61, 0x6a, 0x00, 0x11,
        0x58, 0x53, 0x23, 0x93, 0x0f, 0xa5, 0xb9, 0xfa,
        0xe0, 0xc8, 0x57, 0x70, 0xa2, 0x27, 0x9f, 0xf5,
        0x9e, 0xc4, 0x27, 0xad, 0x1b, 0xbf, 0xf9, 0x00,
        0x1c, 0x0c, 0xd1, 0x49, 0x70, 0x04, 0xbd, 0x2a,
        0x0f, 0x68, 0xb5, 0x07, 0x04, 0xcf, 0x6d, 0x6a,
        0x4b, 0xf3, 0xc8, 0xb6, 0xa0, 0x83, 0x33, 0x99,
        0xa2, 0x4b, 0x34, 0x56, 0x96, 0x1b, 0xa0, 0x07,
        0x36, 0x78, 0x51, 0x12, 0x59, 0x4f, 0x65, 0xb6,
        0xb2, 0xd4, 0x4d, 0x9f, 0x5e, 0xa4, 0xe4, 0x9b,
        0x5e, 0x1e, 0xc2, 0xaf, 0x97, 0x8c, 0xbe, 0x31,
        0xc6, 0x71, 0x14, 0x44, 0x0a, 0xc5, 0x1a, 0x62,
        0x08, 0x1d, 0xf0, 0xed, 0x46, 0xd4, 0xa3, 0xdf,
        0x29, 0x5d, 0xa0, 0xb0, 0xfe, 0x25, 0xc0, 0x11,
        0x50, 0x19, 0xf0, 0x3f, 0x15, 0xec, 0x86, 0xfa,
        0xbb, 0x4c, 0x85, 0x2f, 0x83, 0x44, 0x9e, 0x81,
        0x2f, 0x14, 0x1a, 0x93, 0x95, 0xb3, 0xf7, 0x0b,
        0x76, 0x6e, 0xbb, 0xd4, 0xec, 0x2f, 0xae, 0x2b,
        0x69, 0x55, 0xbd, 0x8f, 0x32, 0x68, 0x4c, 0x15,
        0xab, 0xfe, 0x8f, 0xd3, 0xa6, 0x26, 0x1e, 0x52,
        0x65, 0x0e, 0x88, 0x07, 0xa9, 0x21, 0x58, 0xd9,
        0xf1, 0x46, 0x32, 0x61, 0xa9, 0x25, 0xe4, 0xbf,
        0xba, 0x44, 0xbd, 0x20, 0xb1, 0x66, 0xd5, 0x32,
        0xf0, 0x01, 0x71, 0x85, 0xc3, 0xa6, 0xac, 0x79,
        0x57, 0xad, 0xef, 0xe4, 0x55, 0x59, 0xe3, 0x07,
        0x2c, 0x8d, 0xc3, 0x5a, 0xbe, 0xba, 0x83, 0x5a,
        0x8c, 0xb0, 0x1a, 0x71, 0xa1, 0x5c, 0x73, 0x69,
        0x11, 0x12, 0x6f, 0x27, 0xd4, 0x6a, 0x36, 0x16,
        0x8c, 0xa5, 0xef, 0x7d, 0xcc, 0xd4, 0xe2, 0x88,
        0x62, 0x12, 0x60, 0x2b, 0x18, 0x14, 0x63, 0xe0,
        0xdd, 0x30, 0x18, 0x5c, 0x96, 0x34, 0x8f, 0x97,
        0x43, 0xa0, 0x2a, 0xca, 0x8e, 0xc2, 0x7c, 0x0b,
        0x90, 0xdc, 0xa2, 0x70,
    };
    const uint8_t ERR4[] = {
        0xa5, 0xe6, 0xbd, 0x0c, 0x74, 0xcb, 0x34, 0x7f,
        0x10, 0xcc, 0xe3, 0x67, 0xf9, 0x49, 0x09, 0x8f,
        0x24, 0x57, 0xd1, 0x4c, 0x04, 0x6f, 0xd8, 0xa2,
        0x2c, 0xb9, 0x6e, 0xfb, 0x30, 0xb0, 0xfd, 0xcd,
        0xa8, 0xcb, 0x91, 0x68, 0xb5, 0x0f, 0x2f, 0xd4,
        0x5e, 0xdd, 0x73, 0xc1, 0xb0, 0xc8, 0xb3, 0x30,
        0x02, 0xdf, 0x37, 0x68, 0x01, 0xff, 0x58, 0xaa,
        0xa9, 0x40, 0x00, 0xbf, 0x8a, 0x86, 0xf9, 0x26,
        0x20, 0xf3, 0x43, 0xba, 0xef, 0x38, 0xa5, 0x80,
        0x10, 0x23, 0x95, 0xae, 0x3a, 0xbf, 0x91, 0x28,
        0xd1, 0x04, 0x7a, 0x07, 0x36, 0xff, 0x9b, 0x83,
        0xd4, 0x56, 0x74, 0x0e, 0xbb, 0xb4, 0xae, 0xb3,
        0xaa, 0x97, 0x37, 0xf1, 0x8f, 0xb4, 0xaf, 0xb4,
        0xaa, 0x07, 0x4f, 0xb2, 0x6c, 0x4d, 0x70, 0x2f,
        0x42, 0x96, 0x88, 0x88, 0x55, 0x0a, 0x3b, 0xde,
        0xd8, 0xc0, 0x52, 0x47, 0xe0, 0x45, 0xb8, 0x66,
        0xba, 0xef, 0x04, 0x99, 0xf0, 0x79, 0xfd, 0xae,
        0xef, 0x65, 0x38, 0xf3, 0x1d, 0x44, 0xde, 0xaf,
        0xff, 0xdf, 0xd3, 0xaf, 0xa2, 0xfb, 0x4c, 0xa9,
        0x08, 0x2b, 0x8f, 0x1c, 0x46, 0x53, 0x71, 0xa9,
        0x89, 0x4d, 0xd8, 0xc2, 0x43, 0xfb, 0x48, 0x47,
        0xe0, 0x04, 0xf5, 0x25, 0x6b, 0x3e, 0x90, 0xe2,
        0xed, 0xde, 0x4c, 0x9f, 0xb3, 0x08, 0x2d, 0xdf,
        0xe4, 0xd1, 0xe7, 0x34, 0xca, 0xcd, 0x96, 0xef,
        0x07, 0x06, 0xbf, 0x63, 0xc9, 0x98, 0x4e, 0x22,
        0xdc, 0x98, 0x85, 0x1b, 0xcc, 0xcd, 0x1c, 0x34,
        0x94, 0x35, 0x1f, 0xeb, 0x45, 0x8c, 0x9c, 0x6a,
        0xf4, 0x1c, 0x00, 0x44, 0xbe, 0xa3, 0xc4, 0x75,
        0x52, 0xb1, 0xd9, 0x92, 0xae, 0x54, 0x2b, 0x17,
        0xa2, 0xd0, 0xbb, 0xa1, 0xa0, 0x96, 0xc7, 0x8d,
        0x16, 0x90, 0x34, 0xec, 0xb5, 0x5b, 0x6e, 0x3a,
        0x72, 0x63, 0xc2, 0x60, 0x17, 0xf0, 0x33, 0x03,
        0x12, 0x28, 0x83, 0x3c, 0x1d, 0xae, 0xfc, 0x0d,
        0xed, 0xb8, 0xcf, 0x7c, 0x3e, 0x37, 0xc9, 0xc3,
        0x7e, 0xbf, 0xe4, 0x2f, 0x32, 0x25, 0xc3, 0x26,
        0xe8, 0xbc, 0xfd, 0x33, 0x88, 0x04, 0xc1, 0x45,
        0xb1, 0x6e, 0x34, 0xe4,
    };

    const uint8_t shared_secret0[] = {
        0x53, 0xeb, 0x63, 0xea, 0x8a, 0x3f, 0xec, 0x3b,
        0x3c, 0xd4, 0x33, 0xb8, 0x5c, 0xd6, 0x2a, 0x4b,
        0x14, 0x5e, 0x1d, 0xda, 0x09, 0x39, 0x1b, 0x34,
        0x8c, 0x4e, 0x1c, 0xd3, 0x6a, 0x03, 0xea, 0x66,
    };
    const uint8_t shared_secret1[] = {
        0xa6, 0x51, 0x9e, 0x98, 0x83, 0x2a, 0x0b, 0x17,
        0x9f, 0x62, 0x12, 0x3b, 0x35, 0x67, 0xc1, 0x06,
        0xdb, 0x99, 0xee, 0x37, 0xbe, 0xf0, 0x36, 0xe7,
        0x83, 0x26, 0x36, 0x02, 0xf3, 0x48, 0x8f, 0xae,
    };
    const uint8_t shared_secret2[] = {
        0x3a, 0x6b, 0x41, 0x25, 0x48, 0x76, 0x2f, 0x0d,
        0xbc, 0xcc, 0xe5, 0xc7, 0xae, 0x7b, 0xb8, 0x14,
        0x7d, 0x1c, 0xaf, 0x9b, 0x54, 0x71, 0xc3, 0x41,
        0x20, 0xb3, 0x0b, 0xc9, 0xc0, 0x48, 0x91, 0xcc,
    };
    const uint8_t shared_secret3[] = {
        0x21, 0xe1, 0x3c, 0x2d, 0x7c, 0xfe, 0x7e, 0x18,
        0x83, 0x6d, 0xf5, 0x08, 0x72, 0x46, 0x61, 0x17,
        0xa2, 0x95, 0x78, 0x3a, 0xb8, 0xaa, 0xb0, 0xe7,
        0xec, 0xc8, 0xc7, 0x25, 0x50, 0x3a, 0xd0, 0x2d,
    };
    const uint8_t shared_secret4[] = {
        0xb5, 0x75, 0x6b, 0x9b, 0x54, 0x27, 0x27, 0xdb,
        0xaf, 0xc6, 0x76, 0x5a, 0x49, 0x48, 0x8b, 0x02,
        0x3a, 0x72, 0x5d, 0x63, 0x1a, 0xf6, 0x88, 0xfc,
        0x03, 0x12, 0x17, 0xe9, 0x07, 0x70, 0xc3, 0x28,
    };

    ptarm_buf_t buf_fail1 = PTARM_BUF_INIT;
    ptarm_buf_t buf_fail2 = PTARM_BUF_INIT;
    ptarm_buf_t buf_fail3 = PTARM_BUF_INIT;
    ptarm_buf_t buf_fail4 = PTARM_BUF_INIT;
    ptarm_buf_t buf_fail = PTARM_BUF_INIT;

    ptarm_buf_t err = { (CONST_CAST uint8_t *)ERR0, sizeof(ERR0) };
    const ptarm_buf_t buf_shared_secret0 = { (CONST_CAST uint8_t *)shared_secret0, sizeof(shared_secret0) };
    ln_onion_failure_forward(&buf_fail1, &buf_shared_secret0, &err);
    ASSERT_EQ(0, memcmp(ERR1, buf_fail1.buf, sizeof(ERR1)));
    ASSERT_EQ(sizeof(ERR1), buf_fail1.len);

    err.buf = (CONST_CAST uint8_t *)ERR1;
    err.len = sizeof(ERR1);
    const ptarm_buf_t buf_shared_secret1 = { (CONST_CAST uint8_t *)shared_secret1, sizeof(shared_secret1) };
    ln_onion_failure_forward(&buf_fail2, &buf_shared_secret1, &err);
    ptarm_buf_free(&buf_fail1);
    ASSERT_EQ(0, memcmp(ERR2, buf_fail2.buf, sizeof(ERR2)));
    ASSERT_EQ(sizeof(ERR2), buf_fail2.len);

    err.buf = (CONST_CAST uint8_t *)ERR2;
    err.len = sizeof(ERR2);
    const ptarm_buf_t buf_shared_secret2 = { (CONST_CAST uint8_t *)shared_secret2, sizeof(shared_secret2) };
    ln_onion_failure_forward(&buf_fail3, &buf_shared_secret2, &err);
    ptarm_buf_free(&buf_fail2);
    ASSERT_EQ(0, memcmp(ERR3, buf_fail3.buf, sizeof(ERR3)));
    ASSERT_EQ(sizeof(ERR3), buf_fail3.len);

    err.buf = (CONST_CAST uint8_t *)ERR3;
    err.len = sizeof(ERR3);
    const ptarm_buf_t buf_shared_secret3 = { (CONST_CAST uint8_t *)shared_secret3, sizeof(shared_secret3) };
    ln_onion_failure_forward(&buf_fail4, &buf_shared_secret3, &err);
    ptarm_buf_free(&buf_fail3);
    ASSERT_EQ(0, memcmp(ERR4, buf_fail4.buf, sizeof(ERR4)));
    ASSERT_EQ(sizeof(ERR4), buf_fail4.len);

    err.buf = (CONST_CAST uint8_t *)ERR4;
    err.len = sizeof(ERR4);
    const ptarm_buf_t buf_shared_secret4 = { (CONST_CAST uint8_t *)shared_secret4, sizeof(shared_secret4) };
    ln_onion_failure_forward(&buf_fail, &buf_shared_secret4, &err);
    ptarm_buf_free(&buf_fail4);

    uint16_t failure_len = ln_misc_get16be(buf_fail.buf + 32);
    ASSERT_EQ(2, failure_len);
    ASSERT_EQ(0x20, buf_fail.buf[34]);
    ASSERT_EQ(0x02, buf_fail.buf[35]);
    uint16_t pad_len = ln_misc_get16be(buf_fail.buf + 36);
    ASSERT_EQ(0xfe, pad_len);
    for (int lp = 0; lp < pad_len; lp++) {
        ASSERT_EQ(0, buf_fail.buf[38 + lp]);
    }

    ptarm_buf_free(&buf_fail);
}


TEST_F(onion, testvector_failure_resolve_api)
{
    const uint8_t PUB[][PTARM_SZ_PUBKEY] = {
        {
            0x02, 0xee, 0xc7, 0x24, 0x5d, 0x6b, 0x7d, 0x2c,
            0xcb, 0x30, 0x38, 0x0b, 0xfb, 0xe2, 0xa3, 0x64,
            0x8c, 0xd7, 0xa9, 0x42, 0x65, 0x3f, 0x5a, 0xa3,
            0x40, 0xed, 0xce, 0xa1, 0xf2, 0x83, 0x68, 0x66,
            0x19,
        },
        {
            0x03, 0x24, 0x65, 0x3e, 0xac, 0x43, 0x44, 0x88,
            0x00, 0x2c, 0xc0, 0x6b, 0xbf, 0xb7, 0xf1, 0x0f,
            0xe1, 0x89, 0x91, 0xe3, 0x5f, 0x9f, 0xe4, 0x30,
            0x2d, 0xbe, 0xa6, 0xd2, 0x35, 0x3d, 0xc0, 0xab,
            0x1c,
        },
        {
            0x02, 0x7f, 0x31, 0xeb, 0xc5, 0x46, 0x2c, 0x1f,
            0xdc, 0xe1, 0xb7, 0x37, 0xec, 0xff, 0x52, 0xd3,
            0x7d, 0x75, 0xde, 0xa4, 0x3c, 0xe1, 0x1c, 0x74,
            0xd2, 0x5a, 0xa2, 0x97, 0x16, 0x5f, 0xaa, 0x20,
            0x07,
        },
        {
            0x03, 0x2c, 0x0b, 0x7c, 0xf9, 0x53, 0x24, 0xa0,
            0x7d, 0x05, 0x39, 0x8b, 0x24, 0x01, 0x74, 0xdc,
            0x0c, 0x2b, 0xe4, 0x44, 0xd9, 0x6b, 0x15, 0x9a,
            0xa6, 0xc7, 0xf7, 0xb1, 0xe6, 0x68, 0x68, 0x09,
            0x91,
        },
        {
            0x02, 0xed, 0xab, 0xbd, 0x16, 0xb4, 0x1c, 0x83,
            0x71, 0xb9, 0x2e, 0xf2, 0xf0, 0x4c, 0x11, 0x85,
            0xb4, 0xf0, 0x3b, 0x6d, 0xcd, 0x52, 0xba, 0x9b,
            0x78, 0xd9, 0xd7, 0xc8, 0x9c, 0x8f, 0x22, 0x11,
            0x45,
        }
    };
    const uint8_t SESSIONKEY[] = {
        0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
        0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
        0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
        0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    };
    const uint8_t ASSOC[] = {
        0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
        0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
        0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
        0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
    };

    uint8_t packet[LN_SZ_ONION_ROUTE];
    ln_hop_datain_t hop_datain[5];

    for (int lp = 0; lp < 5; lp++) {
        hop_datain[lp].short_channel_id = (((uint64_t)lp << 56) | ((uint64_t)lp << 48) | ((uint64_t)lp << 40) | ((uint64_t)lp << 32) | ((uint64_t)lp << 24) | ((uint64_t)lp << 16) | ((uint64_t)lp << 8) | (uint64_t)lp);
        //amt_to_forwardが64bitになったため、位置がずれる
        //      OLD [0-7][8-11][12-15][16-]
        //      NEW [0-7][8-15][16-19][20-]
        //hop_datain[lp].amt_to_forward = lp;
        //hop_datain[lp].outgoing_cltv_value = lp;
        hop_datain[lp].amt_to_forward = ((uint64_t)lp << 32) | lp;
        hop_datain[lp].outgoing_cltv_value = 0;
        memcpy(hop_datain[lp].pubkey, PUB[lp], PTARM_SZ_PUBKEY);
    }
    ptarm_buf_t shared_secrets = PTARM_BUF_INIT;

    bool ret = ln_onion_create_packet(packet, &shared_secrets, hop_datain, 5, SESSIONKEY, ASSOC, sizeof(ASSOC));
    ASSERT_TRUE(ret);
    ASSERT_EQ(5 * PTARM_SZ_PRIVKEY, shared_secrets.len);


    const uint8_t ERR0[] = {
        0x9c, 0x5a, 0xdd, 0x39, 0x63, 0xfc, 0x7f, 0x6e,
        0xd7, 0xf1, 0x48, 0x62, 0x3c, 0x84, 0x13, 0x4b,
        0x56, 0x47, 0xe1, 0x30, 0x64, 0x19, 0xdb, 0xe2,
        0x17, 0x4e, 0x52, 0x3f, 0xa9, 0xe2, 0xfb, 0xed,
        0x3a, 0x06, 0xa1, 0x9f, 0x89, 0x91, 0x45, 0x61,
        0x07, 0x41, 0xc8, 0x3a, 0xd4, 0x0b, 0x77, 0x12,
        0xae, 0xfa, 0xdd, 0xec, 0x8c, 0x6b, 0xaf, 0x73,
        0x25, 0xd9, 0x2e, 0xa4, 0xca, 0x4d, 0x1d, 0xf8,
        0xbc, 0xe5, 0x17, 0xf7, 0xe5, 0x45, 0x54, 0x60,
        0x8b, 0xf2, 0xbd, 0x80, 0x71, 0xa4, 0xf5, 0x2a,
        0x7a, 0x2f, 0x7f, 0xfb, 0xb1, 0x41, 0x3e, 0xda,
        0xd8, 0x1e, 0xee, 0xa5, 0x78, 0x5a, 0xa9, 0xd9,
        0x90, 0xf2, 0x86, 0x5d, 0xc2, 0x3b, 0x4b, 0xc3,
        0xc3, 0x01, 0xa9, 0x4e, 0xec, 0x4e, 0xab, 0xeb,
        0xca, 0x66, 0xbe, 0x5c, 0xf6, 0x38, 0xf6, 0x93,
        0xec, 0x25, 0x6a, 0xec, 0x51, 0x46, 0x20, 0xcc,
        0x28, 0xee, 0x4a, 0x94, 0xbd, 0x95, 0x65, 0xbc,
        0x4d, 0x49, 0x62, 0xb9, 0xd3, 0x64, 0x1d, 0x42,
        0x78, 0xfb, 0x31, 0x9e, 0xd2, 0xb8, 0x4d, 0xe5,
        0xb6, 0x65, 0xf3, 0x07, 0xa2, 0xdb, 0x0f, 0x7f,
        0xbb, 0x75, 0x73, 0x66, 0x06, 0x7d, 0x88, 0xc5,
        0x0f, 0x7e, 0x82, 0x91, 0x38, 0xfd, 0xe4, 0xf7,
        0x8d, 0x39, 0xb5, 0xb5, 0x80, 0x2f, 0x1b, 0x92,
        0xa8, 0xa8, 0x20, 0x86, 0x5a, 0xf5, 0xcc, 0x79,
        0xf9, 0xf3, 0x0b, 0xc3, 0xf4, 0x61, 0xc6, 0x6a,
        0xf9, 0x5d, 0x13, 0xe5, 0xe1, 0xf0, 0x38, 0x1c,
        0x18, 0x45, 0x72, 0xa9, 0x1d, 0xee, 0x1c, 0x84,
        0x90, 0x48, 0xa6, 0x47, 0xa1, 0x15, 0x8c, 0xf8,
        0x84, 0x06, 0x4d, 0xed, 0xdb, 0xf1, 0xb0, 0xb8,
        0x8d, 0xfe, 0x2f, 0x79, 0x14, 0x28, 0xd0, 0xba,
        0x0f, 0x6f, 0xb2, 0xf0, 0x4e, 0x14, 0x08, 0x1f,
        0x69, 0x16, 0x5a, 0xe6, 0x6d, 0x92, 0x97, 0xc1,
        0x18, 0xf0, 0x90, 0x77, 0x05, 0xc9, 0xc4, 0x95,
        0x4a, 0x19, 0x9b, 0xae, 0x0b, 0xb9, 0x6f, 0xad,
        0x76, 0x3d, 0x69, 0x0e, 0x7d, 0xaa, 0x6c, 0xfd,
        0xa5, 0x9b, 0xa7, 0xf2, 0xc8, 0xd1, 0x14, 0x48,
        0xb6, 0x04, 0xd1, 0x2d,
    };
    ptarm_buf_t err = { (CONST_CAST uint8_t *)ERR0, sizeof(ERR0) };

    ptarm_buf_t reason = PTARM_BUF_INIT;
    int hop;
    ret = ln_onion_failure_read(&reason, &hop, &shared_secrets, &err);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&shared_secrets);

    ASSERT_EQ(2, reason.len);
    ASSERT_EQ(0x20, reason.buf[0]);
    ASSERT_EQ(0x02, reason.buf[1]);
    ASSERT_EQ(4, hop);
    ptarm_buf_free(&reason);
}


TEST_F(onion, test1)
{
    uint8_t session_key[PTARM_SZ_PRIVKEY];
    uint8_t onion_privkey[20][PTARM_SZ_PRIVKEY];
    ln_hop_datain_t datain[20];
    uint8_t packet[LN_SZ_ONION_ROUTE];

    for (int lp = 0; lp < sizeof(session_key); lp++) {
        session_key[lp] = (uint8_t)'A';
    }
    for (int lp = 0; lp < ARRAY_SIZE(datain); lp++) {
        datain[lp].short_channel_id = (((uint64_t)lp << 56) | ((uint64_t)lp << 48) | ((uint64_t)lp << 40) | ((uint64_t)lp << 32) | ((uint64_t)lp << 24) | ((uint64_t)lp << 16) | ((uint64_t)lp << 8) | (uint64_t)lp);
        //amt_to_forwardが64bitになったため、位置がずれる
        //      OLD [0-7][8-11][12-15][16-]
        //      NEW [0-7][8-15][16-19][20-]
        //datain[lp].amt_to_forward = lp;
        //datain[lp].outgoing_cltv_value = lp;
        datain[lp].amt_to_forward = (uint64_t)lp << 32 | lp;
        datain[lp].outgoing_cltv_value = 0;
        memset(onion_privkey[lp], lp + 1, PTARM_SZ_PRIVKEY);
        ptarm_keys_priv2pub(datain[lp].pubkey, onion_privkey[lp]);
    }

    uint8_t pub[PTARM_SZ_PUBKEY];
    ptarm_keys_priv2pub(pub, session_key);
printf("ln_onion_create_packet\n");
    bool ret = ln_onion_create_packet(packet, NULL, datain, 1, session_key, NULL, 0);
    ASSERT_TRUE(ret);
printf("ln_onion_create_packet\n");

    const uint8_t PACKET[] = {
        0x00, 0x02, 0xee, 0xc7, 0x24, 0x5d, 0x6b, 0x7d,
        0x2c, 0xcb, 0x30, 0x38, 0x0b, 0xfb, 0xe2, 0xa3,
        0x64, 0x8c, 0xd7, 0xa9, 0x42, 0x65, 0x3f, 0x5a,
        0xa3, 0x40, 0xed, 0xce, 0xa1, 0xf2, 0x83, 0x68,
        0x66, 0x19, 0x20, 0xea, 0xde, 0xe1, 0xfc, 0xaf,
        0xc6, 0x57, 0x9e, 0xfb, 0x0e, 0x03, 0xcd, 0xeb,
        0xbd, 0x45, 0xa8, 0x8a, 0x48, 0x2e, 0x4d, 0xfa,
        0x38, 0x9d, 0x71, 0xeb, 0xf1, 0x63, 0x07, 0x2a,
        0xf9, 0x9e, 0x1d, 0x74, 0x72, 0xb4, 0x04, 0x9f,
        0x0a, 0x2a, 0x62, 0x7b, 0x8c, 0x67, 0x41, 0x19,
        0x8c, 0x9f, 0x57, 0xf2, 0x5a, 0xe2, 0xf9, 0x0e,
        0xd5, 0x8d, 0xe3, 0x72, 0x36, 0x93, 0x28, 0xb6,
        0x0b, 0x8f, 0xad, 0x47, 0xbf, 0x67, 0xbd, 0x52,
        0x52, 0x0b, 0xdf, 0x81, 0x53, 0x8b, 0xdf, 0x7a,
        0x29, 0x4c, 0xc2, 0x57, 0xff, 0xae, 0xa2, 0xe3,
        0x9e, 0x66, 0x4a, 0x9a, 0x5f, 0x58, 0x0e, 0xa5,
        0xda, 0x24, 0x37, 0x14, 0x4f, 0x00, 0x15, 0x63,
        0xbc, 0x9e, 0x19, 0x79, 0x6e, 0x86, 0x8c, 0x99,
        0x87, 0xff, 0xcb, 0x35, 0x10, 0x9c, 0x3a, 0xc9,
        0xcc, 0xce, 0xa2, 0x3d, 0x74, 0xd4, 0x4e, 0x61,
        0x65, 0xb8, 0x77, 0x49, 0x30, 0x65, 0xd4, 0xfc,
        0x02, 0x82, 0x75, 0x71, 0x4f, 0xc3, 0x4a, 0x30,
        0xe8, 0xcc, 0x02, 0x4b, 0x28, 0x88, 0xf1, 0x24,
        0xd5, 0x51, 0xee, 0xf4, 0x73, 0xd2, 0x85, 0x0b,
        0x20, 0x3d, 0xc5, 0x9b, 0x44, 0xac, 0x35, 0x83,
        0x4e, 0x9b, 0xb3, 0x97, 0xf0, 0x78, 0xaa, 0x70,
        0x44, 0x19, 0x33, 0x72, 0x51, 0xc9, 0x3e, 0x5d,
        0x63, 0x0d, 0x98, 0x8a, 0x77, 0x35, 0x8b, 0x47,
        0x06, 0x90, 0x0b, 0xac, 0x1a, 0x66, 0xbc, 0xf6,
        0x4b, 0xdc, 0xe0, 0x4c, 0xd4, 0x73, 0xc8, 0x18,
        0x04, 0xb9, 0x62, 0x44, 0x10, 0x06, 0x57, 0xb4,
        0x80, 0x2f, 0x1b, 0x96, 0xfd, 0xd9, 0x80, 0x2b,
        0x89, 0xcf, 0x91, 0xc4, 0xed, 0xbb, 0x7c, 0xa9,
        0x05, 0x43, 0xba, 0xa1, 0x8e, 0xff, 0xb4, 0x2a,
        0xdb, 0x75, 0xbf, 0xbe, 0xb3, 0x74, 0x91, 0x3a,
        0x2a, 0x1d, 0xa2, 0x91, 0xc8, 0xf5, 0x99, 0x86,
        0xd0, 0x97, 0xb3, 0xa3, 0xa5, 0x5c, 0x12, 0x76,
        0x83, 0x71, 0x02, 0xea, 0x1a, 0x1f, 0x9e, 0x5e,
        0x43, 0x3a, 0xd1, 0x83, 0xf3, 0x77, 0x42, 0xcd,
        0x06, 0x65, 0x3b, 0x45, 0xd6, 0x9a, 0x9a, 0x1e,
        0x0b, 0x92, 0xe3, 0x6e, 0x99, 0x14, 0x61, 0xe9,
        0xfe, 0x4f, 0xec, 0xc8, 0xb7, 0x2e, 0x2a, 0x24,
        0xb0, 0xdc, 0x30, 0x7b, 0xf0, 0x2e, 0xff, 0x28,
        0xb0, 0x90, 0x6d, 0x83, 0xc0, 0xa0, 0xb5, 0xef,
        0x25, 0x6a, 0x67, 0x75, 0x83, 0x00, 0xed, 0xeb,
        0xec, 0x28, 0x79, 0x10, 0x3b, 0x86, 0x55, 0x06,
        0x32, 0x65, 0xe5, 0xdb, 0x22, 0x0e, 0x11, 0x86,
        0x5f, 0xc4, 0xe7, 0x7e, 0xf6, 0x3c, 0x45, 0xfd,
        0xcf, 0xc1, 0xab, 0x16, 0x82, 0x23, 0x00, 0x07,
        0xac, 0x7e, 0xf4, 0x41, 0x8b, 0x69, 0x4c, 0x42,
        0x08, 0x9a, 0x51, 0xbc, 0x6f, 0x5b, 0x99, 0x98,
        0x28, 0x27, 0xe1, 0x8a, 0xc3, 0xe5, 0xef, 0xb7,
        0xe6, 0x92, 0xe6, 0xbb, 0xa7, 0x32, 0x65, 0x90,
        0x1c, 0xfb, 0x7d, 0x88, 0x9a, 0xb3, 0x3f, 0x28,
        0xb8, 0x51, 0xc7, 0xc6, 0x3c, 0x9f, 0x1d, 0x52,
        0xfa, 0x9e, 0x70, 0x43, 0x18, 0x6a, 0x94, 0x95,
        0xde, 0xf6, 0x79, 0x58, 0x3c, 0x70, 0xd2, 0x6d,
        0xc4, 0x2c, 0x23, 0xc3, 0x51, 0x77, 0x2d, 0x22,
        0x2d, 0xcb, 0x59, 0x3d, 0xb1, 0x0c, 0x02, 0x79,
        0x8e, 0x59, 0xe2, 0x32, 0xea, 0x42, 0xe7, 0x17,
        0x98, 0xc5, 0xd7, 0xfe, 0x22, 0x5f, 0xdd, 0xfa,
        0x42, 0xf9, 0x11, 0x02, 0x05, 0xdd, 0xa9, 0x73,
        0x4d, 0x09, 0x0c, 0x7f, 0x38, 0x47, 0x50, 0xca,
        0x53, 0x44, 0x6c, 0x6f, 0xf2, 0x95, 0xde, 0xc3,
        0xa6, 0x2c, 0xe3, 0x4b, 0xd0, 0xc3, 0xa8, 0x92,
        0xb1, 0x78, 0x10, 0xe2, 0x94, 0x24, 0xe1, 0x63,
        0x6a, 0x4c, 0x6e, 0x52, 0x00, 0x92, 0x26, 0xe5,
        0xb4, 0xa9, 0x97, 0xe5, 0xd6, 0x84, 0xd0, 0x53,
        0x43, 0x9d, 0x91, 0x6b, 0x46, 0xac, 0x47, 0xa4,
        0x15, 0xe1, 0x30, 0xc5, 0x28, 0x96, 0x3d, 0xa6,
        0x24, 0xc3, 0x75, 0x95, 0xa0, 0x60, 0x96, 0x6a,
        0xd6, 0xf7, 0x5c, 0x3c, 0xd5, 0x24, 0xec, 0xbf,
        0xad, 0x93, 0x9e, 0x0a, 0xb4, 0x0d, 0x89, 0xc5,
        0xd3, 0xb1, 0x4a, 0x09, 0x37, 0xb3, 0xa1, 0x9b,
        0xda, 0x5b, 0x38, 0x47, 0x7a, 0x18, 0x90, 0xf1,
        0x32, 0x8e, 0xb8, 0x25, 0x9a, 0x0c, 0x11, 0xc8,
        0x58, 0x2b, 0x31, 0x25, 0xab, 0x06, 0xab, 0x4f,
        0x6b, 0x3f, 0xde, 0x56, 0x55, 0x6d, 0xbf, 0xa4,
        0x82, 0x8d, 0x83, 0xc1, 0x27, 0x23, 0x81, 0xc7,
        0x65, 0x46, 0x90, 0x48, 0x5c, 0xc5, 0x6a, 0xc1,
        0x0f, 0x0b, 0x99, 0x84, 0x8d, 0x10, 0xc1, 0xd6,
        0xbf, 0xf4, 0x9d, 0x21, 0x6f, 0x8f, 0x01, 0xf5,
        0x9f, 0x86, 0x0c, 0x47, 0xf8, 0x3e, 0x6d, 0x8b,
        0xf7, 0x1e, 0xa0, 0x7f, 0x1e, 0xc2, 0x7c, 0x59,
        0xd2, 0x5e, 0x08, 0x0c, 0xf2, 0xbd, 0x1b, 0xed,
        0xc8, 0xde, 0xa3, 0x6c, 0xde, 0xca, 0xea, 0x52,
        0x07, 0xd7, 0x7e, 0x1a, 0x51, 0x2d, 0x97, 0x57,
        0x90, 0xc3, 0x57, 0x2b, 0xbd, 0x38, 0xf4, 0x7c,
        0xd0, 0x1c, 0xc1, 0x58, 0x35, 0x02, 0x13, 0xeb,
        0xe2, 0xa1, 0x97, 0xa2, 0x67, 0xfe, 0xed, 0xf6,
        0x41, 0x49, 0x53, 0x2a, 0xae, 0xc8, 0xb8, 0x2f,
        0x7b, 0x0d, 0x50, 0xa4, 0x8f, 0x8b, 0xdc, 0x6f,
        0xb1, 0x1c, 0xa2, 0x7b, 0xa1, 0xc7, 0x59, 0xc0,
        0x7c, 0xd3, 0x8f, 0xc5, 0x2e, 0x9c, 0xe6, 0x93,
        0x27, 0xf6, 0x5b, 0xea, 0x01, 0xdf, 0xde, 0xd2,
        0x0b, 0x84, 0x0c, 0x50, 0x20, 0x6e, 0xfb, 0xd4,
        0x83, 0xf3, 0x98, 0x8b, 0xb5, 0x26, 0xd6, 0x3e,
        0xc8, 0xad, 0xe0, 0x83, 0xb6, 0xb9, 0xd3, 0x1d,
        0x9d, 0xfd, 0xcc, 0x03, 0x3c, 0x84, 0xc4, 0x84,
        0x50, 0xb8, 0x9d, 0x36, 0x58, 0xe6, 0x9a, 0x08,
        0xa6, 0x7e, 0x1a, 0x60, 0xf4, 0xed, 0x99, 0x75,
        0xb7, 0x0b, 0xa4, 0xd0, 0xd9, 0x5f, 0x87, 0x31,
        0x8d, 0xed, 0x55, 0xb9, 0x46, 0x0f, 0x4c, 0x1d,
        0x19, 0xd1, 0x04, 0x0f, 0x46, 0xda, 0xba, 0xeb,
        0x98, 0x55, 0x11, 0x1b, 0x53, 0x6f, 0xbb, 0x0f,
        0x80, 0x56, 0x3a, 0x68, 0xba, 0xfa, 0x38, 0xb3,
        0xe6, 0x6c, 0xd0, 0x78, 0xbf, 0x66, 0x9b, 0xbe,
        0x43, 0xd6, 0xa8, 0x61, 0x12, 0x9a, 0x66, 0xe2,
        0xdd, 0xa7, 0xca, 0xc7, 0xeb, 0x38, 0x92, 0xb3,
        0x58, 0x39, 0xb5, 0x16, 0x66, 0x13, 0x3b, 0x35,
        0x2c, 0x93, 0xec, 0xc8, 0xac, 0x19, 0x57, 0x84,
        0xcb, 0x8a, 0x7f, 0xc5, 0xa7, 0x8a, 0xf5, 0x07,
        0x32, 0xed, 0x61, 0x6b, 0x22, 0x35, 0xa8, 0xe2,
        0x3d, 0x09, 0x47, 0x50, 0xed, 0x04, 0x55, 0x9f,
        0xfa, 0x06, 0xfc, 0x6a, 0x79, 0xee, 0xe4, 0x3d,
        0x80, 0x9d, 0xb0, 0x7a, 0xa6, 0x05, 0xa2, 0xc8,
        0xa9, 0x00, 0x70, 0x63, 0x62, 0x2f, 0xc2, 0xba,
        0xf1, 0xfd, 0xd7, 0x9b, 0x2c, 0x16, 0x02, 0x1b,
        0xfa, 0x51, 0xc6, 0x78, 0x62, 0x02, 0x7f, 0xf9,
        0xda, 0x63, 0x53, 0x31, 0x66, 0xc2, 0xf7, 0x05,
        0x04, 0x20, 0x21, 0x1e, 0x87, 0x15, 0x85, 0x46,
        0xeb, 0x91, 0xd6, 0x65, 0xec, 0x3c, 0x10, 0xeb,
        0xa5, 0xc6, 0xb6, 0xfa, 0xdb, 0x54, 0xe1, 0xe5,
        0x2f, 0x52, 0x81, 0x12, 0x94, 0x7c, 0x1b, 0x2d,
        0xa5, 0xc0, 0x12, 0x01, 0x30, 0xa8, 0x99, 0x52,
        0x3d, 0x03, 0xa3, 0xf6, 0xa7, 0xe8, 0xc7, 0xe7,
        0x8f, 0x6c, 0x9d, 0x1a, 0xad, 0xe2, 0xb9, 0xf4,
        0xa7, 0x03, 0xf7, 0x8f, 0x39, 0xa8, 0x31, 0x83,
        0xfb, 0x8a, 0xbe, 0x2c, 0xd3, 0x59, 0x37, 0xfd,
        0x39, 0xe1, 0x99, 0x1b, 0x47, 0x73, 0xc1, 0xc5,
        0x2e, 0xa6, 0xd5, 0xeb, 0x86, 0xfb, 0xeb, 0x17,
        0xc2, 0xf4, 0xa7, 0x72, 0xae, 0xc6, 0x09, 0xa4,
        0x3d, 0xc1, 0x8f, 0x51, 0x1d, 0xe0, 0xc7, 0xbb,
        0x1e, 0xf1, 0x69, 0x5c, 0xf6, 0x84, 0xb9, 0x8e,
        0x7a, 0x39, 0x14, 0xee, 0xb0, 0x6f, 0x07, 0x00,
        0x5c, 0x5d, 0x86, 0x66, 0x95, 0x61, 0xb1, 0x44,
        0x53, 0x32, 0x01, 0xa7, 0xba, 0x5c, 0xee, 0xd6,
        0x18, 0x07, 0xfd, 0x5f, 0xd4, 0x49, 0xb0, 0xac,
        0xa0, 0xed, 0x47, 0xfb, 0xb0, 0x72, 0x90, 0x37,
        0xc5, 0xee, 0xe9, 0x3c, 0xcf, 0xca, 0x8e, 0xf9,
        0x15, 0xad, 0x44, 0x9d, 0xf5, 0xa5, 0xae, 0xe3,
        0x9f, 0x52, 0xd0, 0xa8, 0x5a, 0x9b, 0xc0, 0x99,
        0x57, 0x94, 0x68, 0x8c, 0xd7, 0xe2, 0x3c, 0xdc,
        0x5a, 0xff, 0x88, 0xbf, 0x17, 0x01, 0x43, 0xb2,
        0xba, 0x7e, 0x4c, 0x45, 0x63, 0xbd, 0x97, 0xcf,
        0xfa, 0xa1, 0xc3, 0xfe, 0x03, 0x33, 0xe1, 0xa1,
        0xf7, 0x5b, 0xe1, 0x70, 0x86, 0xba, 0x53, 0x59,
        0x97, 0x95, 0xed, 0xfe, 0xc7, 0xca, 0x5b, 0x77,
        0xae, 0x73, 0xc2, 0x57, 0x61, 0xff, 0x8d, 0xed,
        0x99, 0xc7, 0x77, 0xae, 0x8b, 0xa1, 0x1f, 0xac,
        0x57, 0xc5, 0x92, 0xe0, 0xea, 0x0d, 0xf8, 0x39,
        0xb2, 0xaf, 0xce, 0x2b, 0xd6, 0xdc, 0x17, 0xb2,
        0x3e, 0x73, 0x59, 0x77, 0x32, 0x63, 0xc7, 0x50,
        0x89, 0x45, 0x1e, 0x00, 0x72, 0x36, 0x94, 0x61,
        0x6c, 0xfd, 0x75, 0xb1, 0xcd, 0x31, 0xeb, 0x65,
        0x2a, 0xcf, 0x51, 0x8c, 0x8c, 0x8a, 0xd7, 0xa2,
        0x5e, 0x38, 0xb2, 0x41, 0x99, 0x8e, 0x88, 0x27,
        0x31, 0x04, 0xeb, 0xa6, 0x97, 0xf9, 0xb7, 0x8a,
        0x8f, 0xd6, 0x85, 0xee, 0x09, 0xf4, 0x00, 0x79,
        0x29, 0x86, 0x23, 0x06, 0x88, 0x3c, 0xda, 0xe0,
        0x99, 0x99, 0x59, 0xc5, 0xeb, 0xf1, 0x84, 0xe4,
        0x62, 0xac, 0x53, 0x13, 0x2c, 0x91, 0x80, 0x95,
        0x20, 0x25, 0x5f, 0xef, 0x75, 0x78, 0x7e, 0x88,
        0x15, 0xdf, 0xf5, 0x1e, 0xcc, 0x6c, 0xc3, 0x0d,
        0x99, 0xb6, 0xe5, 0x14, 0xa8, 0xf2, 0xa8, 0xd7,
        0x97, 0xd3, 0x6b, 0x92, 0xb5, 0x7e, 0xe2, 0x1d,
        0x47, 0x31, 0x44, 0x10, 0xfd, 0xc7, 0x71, 0x6b,
        0x8a, 0x10, 0x75, 0x28, 0x44, 0xe0, 0x23, 0xc9,
        0x37, 0xd0, 0x57, 0x09, 0x31, 0x6b, 0xee, 0xe7,
        0x72, 0xf3, 0x7e, 0xb9, 0x1c, 0xea, 0x31, 0xec,
        0x28, 0x9d, 0xef, 0x3b, 0xb7, 0xf2,
    };
    ASSERT_EQ(sizeof(PACKET), sizeof(packet));
    ASSERT_EQ(0, memcmp(PACKET, packet, sizeof(packet)));

    memset(packet, 0, sizeof(packet));
    ln_hop_dataout_t dataout;
    ln_node_setkey(onion_privkey[0]);
    ptarm_buf_t buf_rsn = PTARM_BUF_INIT;
    ptarm_push_t push_rsn;
    ptarm_push_init(&push_rsn, &buf_rsn, 0);
    ret = ln_onion_read_packet(packet, &dataout, NULL, &push_rsn, PACKET, NULL, 0);
    ASSERT_TRUE(ret);
    ASSERT_TRUE(dataout.b_exit);      //1つなのでここでexit
    ptarm_buf_free(&buf_rsn);
}


TEST_F(onion, test2)
{
    uint8_t session_key[PTARM_SZ_PRIVKEY];
    uint8_t onion_privkey[20][PTARM_SZ_PRIVKEY];
    ln_hop_datain_t datain[20];
    uint8_t packet[LN_SZ_ONION_ROUTE];

    for (int lp = 0; lp < sizeof(session_key); lp++) {
        session_key[lp] = (uint8_t)'A';
    }
    for (int lp = 0; lp < ARRAY_SIZE(datain); lp++) {
        datain[lp].short_channel_id = (((uint64_t)lp << 56) | ((uint64_t)lp << 48) | ((uint64_t)lp << 40) | ((uint64_t)lp << 32) | ((uint64_t)lp << 24) | ((uint64_t)lp << 16) | ((uint64_t)lp << 8) | (uint64_t)lp);
        //amt_to_forwardが64bitになったため、位置がずれる
        //      OLD [0-7][8-11][12-15][16-]
        //      NEW [0-7][8-15][16-19][20-]
        //datain[lp].amt_to_forward = lp;
        //datain[lp].outgoing_cltv_value = lp;
        datain[lp].amt_to_forward = (uint64_t)lp << 32 | lp;
        datain[lp].outgoing_cltv_value = 0;
        memset(onion_privkey[lp], lp + 1, PTARM_SZ_PRIVKEY);
        ptarm_keys_priv2pub(datain[lp].pubkey, onion_privkey[lp]);
    }

    bool ret = ln_onion_create_packet(packet, NULL, datain, 20, session_key, NULL, 0);
    ASSERT_TRUE(ret);

    const uint8_t PACKET[] = {
        0x00, 0x02, 0xee, 0xc7, 0x24, 0x5d, 0x6b, 0x7d,
        0x2c, 0xcb, 0x30, 0x38, 0x0b, 0xfb, 0xe2, 0xa3,
        0x64, 0x8c, 0xd7, 0xa9, 0x42, 0x65, 0x3f, 0x5a,
        0xa3, 0x40, 0xed, 0xce, 0xa1, 0xf2, 0x83, 0x68,
        0x66, 0x19, 0x20, 0xea, 0xde, 0xe1, 0xfc, 0xaf,
        0xc6, 0x57, 0x9e, 0xfb, 0x0e, 0x03, 0xcd, 0xeb,
        0xbd, 0x45, 0xa8, 0x8a, 0x48, 0x2e, 0x4d, 0xfa,
        0x38, 0x9d, 0x71, 0xeb, 0xf1, 0x63, 0x07, 0x2a,
        0xf9, 0x9e, 0x1d, 0x8e, 0x1e, 0xdd, 0x65, 0xdd,
        0xa4, 0x48, 0x92, 0x79, 0x01, 0x0a, 0xe4, 0x83,
        0xe5, 0x4e, 0xa2, 0xa5, 0x94, 0x26, 0x50, 0x41,
        0x45, 0x61, 0xd6, 0xc8, 0x02, 0xbb, 0x98, 0xbe,
        0xc9, 0xad, 0x2a, 0x1a, 0x40, 0x71, 0x93, 0x1c,
        0x87, 0xea, 0x90, 0xf3, 0x62, 0x7a, 0xc4, 0xfa,
        0xe5, 0x2e, 0xb0, 0xf3, 0x08, 0x5c, 0x33, 0x2b,
        0x0c, 0x3d, 0x44, 0x47, 0x37, 0xd3, 0x2d, 0x1b,
        0x0e, 0xde, 0x25, 0x30, 0xdd, 0x74, 0xc7, 0x77,
        0x9f, 0xd0, 0xb7, 0xb1, 0xb3, 0x9a, 0x69, 0x30,
        0x20, 0xcf, 0x0a, 0xe1, 0x4f, 0xab, 0x5f, 0x3b,
        0x54, 0x59, 0x03, 0x68, 0x7c, 0x01, 0x80, 0x76,
        0xa9, 0x1d, 0xa5, 0x09, 0x8b, 0x2f, 0xd8, 0xd6,
        0x63, 0x98, 0xc2, 0x69, 0xd3, 0x09, 0x37, 0x9c,
        0x46, 0x47, 0xf2, 0x0c, 0x45, 0x69, 0xf4, 0x56,
        0x58, 0x27, 0xf2, 0x98, 0x4e, 0xa0, 0xed, 0x8b,
        0xbc, 0xd5, 0x45, 0x9d, 0x59, 0x54, 0xfa, 0xf2,
        0xe7, 0xfd, 0xeb, 0x91, 0x2b, 0x58, 0x56, 0xd1,
        0x53, 0x8e, 0x79, 0x14, 0x34, 0x21, 0x6a, 0x41,
        0x28, 0x08, 0x06, 0x63, 0xc6, 0xa3, 0x0c, 0xa7,
        0x7f, 0xfa, 0x56, 0x76, 0xd4, 0xc1, 0x3f, 0xa1,
        0xf1, 0x59, 0x3a, 0x5a, 0x2e, 0x56, 0x36, 0x24,
        0xa6, 0x02, 0xca, 0x77, 0xa4, 0xec, 0xc8, 0x4a,
        0x4e, 0xe5, 0x16, 0x31, 0x13, 0x10, 0x3c, 0x7d,
        0x92, 0x7d, 0x15, 0xd0, 0x79, 0x74, 0x11, 0xa0,
        0xaa, 0x00, 0xa7, 0x8e, 0xf8, 0x40, 0x7d, 0x0d,
        0xf5, 0xb3, 0xdb, 0xcc, 0x61, 0x5f, 0xcf, 0xcf,
        0xaf, 0xf6, 0x56, 0x08, 0xdd, 0x46, 0xbb, 0x14,
        0x6e, 0x58, 0xdc, 0x7f, 0x31, 0x11, 0xa1, 0x41,
        0xa5, 0xa4, 0x32, 0xe2, 0x69, 0x8d, 0xbd, 0xac,
        0x62, 0x48, 0xe4, 0x34, 0x59, 0xc8, 0x8d, 0x4f,
        0x10, 0x4d, 0xc9, 0x5a, 0xdc, 0x84, 0x8b, 0x6f,
        0x0f, 0xc9, 0x87, 0x01, 0xe6, 0xa4, 0x0f, 0xca,
        0xc5, 0xb7, 0xce, 0xed, 0x44, 0x7d, 0xfb, 0x3c,
        0x5e, 0x2a, 0x54, 0x57, 0xda, 0xa6, 0x3e, 0x2a,
        0x41, 0x4f, 0x51, 0x0f, 0x52, 0x7d, 0xb4, 0x8c,
        0xd2, 0x3f, 0x29, 0x2f, 0xc7, 0xa7, 0x43, 0xb5,
        0x6d, 0x2d, 0x5c, 0x6f, 0xdc, 0xd4, 0x44, 0x69,
        0x49, 0x80, 0x99, 0xb5, 0x5b, 0x9a, 0x78, 0x04,
        0x58, 0x56, 0xdc, 0x06, 0x80, 0xd2, 0xf8, 0x0e,
        0xf4, 0xdc, 0xdd, 0x18, 0x87, 0x17, 0x45, 0x9a,
        0xf4, 0x9b, 0x00, 0x7b, 0x42, 0xfd, 0x5b, 0xbe,
        0xfe, 0x6e, 0x9d, 0x0c, 0xcc, 0x3c, 0x3b, 0xa2,
        0xae, 0xfe, 0x50, 0x7e, 0x87, 0x9d, 0xb4, 0x1b,
        0x39, 0xd1, 0x16, 0xc4, 0xfa, 0x65, 0x11, 0x9d,
        0xdb, 0xf7, 0x82, 0xc5, 0x2c, 0x75, 0x03, 0xfb,
        0xe2, 0x0d, 0x9a, 0x4d, 0x40, 0xa8, 0xb4, 0x38,
        0xb8, 0xbb, 0x92, 0xfe, 0xdd, 0x4f, 0x05, 0xbf,
        0xb5, 0xf4, 0xe3, 0xa3, 0x58, 0x96, 0xb9, 0xef,
        0x75, 0xea, 0xc3, 0x17, 0x30, 0x8d, 0x0c, 0x85,
        0x7f, 0x39, 0xfb, 0xb3, 0x57, 0x53, 0xc9, 0x33,
        0x52, 0x03, 0x00, 0x60, 0x2f, 0x4a, 0xeb, 0xf2,
        0x4e, 0x27, 0x30, 0xa2, 0x48, 0xaf, 0x45, 0x7c,
        0x5a, 0xfd, 0x1a, 0x7f, 0xb8, 0x47, 0xb2, 0xc5,
        0x0a, 0x8f, 0xbf, 0x2b, 0x85, 0x25, 0xa9, 0xaa,
        0xd1, 0x2e, 0xa3, 0x96, 0x14, 0xe6, 0xe2, 0x1e,
        0xa7, 0xac, 0xb9, 0x5b, 0xe9, 0x2a, 0x35, 0xdd,
        0xe5, 0xd3, 0x01, 0x23, 0xf1, 0x04, 0x6e, 0x4c,
        0x1a, 0xc2, 0x66, 0x3a, 0x56, 0xd1, 0x85, 0x0d,
        0x5f, 0x40, 0xb7, 0x21, 0x14, 0x02, 0x9a, 0x91,
        0xc9, 0xae, 0xb1, 0x32, 0xae, 0x60, 0x5b, 0x7b,
        0xf7, 0x3b, 0x70, 0xd9, 0x84, 0x31, 0x22, 0xe4,
        0xe3, 0xe9, 0x56, 0x92, 0x8b, 0xb1, 0x03, 0x2b,
        0x3b, 0xdb, 0xfc, 0x06, 0x88, 0xd8, 0x86, 0xa7,
        0xa6, 0xc7, 0xd7, 0xe2, 0x47, 0x3f, 0x4a, 0xff,
        0x7a, 0x23, 0x96, 0xe2, 0x96, 0xf6, 0x52, 0x15,
        0x17, 0xc2, 0x22, 0xb3, 0x94, 0xa7, 0x1d, 0x15,
        0xad, 0x5d, 0x4f, 0x21, 0x85, 0xfc, 0x34, 0xcd,
        0x81, 0x4f, 0x4c, 0xb3, 0xb0, 0x17, 0x75, 0xa7,
        0xbe, 0x9c, 0xd9, 0xd8, 0xcb, 0x1d, 0x14, 0xbb,
        0xd6, 0x88, 0x27, 0x82, 0xdf, 0x21, 0xd8, 0xd4,
        0x18, 0x9a, 0xd7, 0x42, 0x68, 0x62, 0x73, 0xdf,
        0xff, 0x13, 0xb0, 0x56, 0xab, 0xf1, 0xc1, 0x57,
        0x01, 0x60, 0x6b, 0xdd, 0xa2, 0x91, 0x2f, 0xe2,
        0x2b, 0xa3, 0xc9, 0x5e, 0x8d, 0x31, 0xe4, 0x05,
        0xec, 0x85, 0x75, 0xd7, 0x6a, 0x8f, 0xc7, 0x07,
        0x6a, 0x5e, 0x44, 0x19, 0x45, 0x69, 0xe2, 0x0f,
        0x7e, 0x32, 0x71, 0x3a, 0x65, 0x80, 0x01, 0xea,
        0xa3, 0xe3, 0x3d, 0xcf, 0x68, 0xc8, 0x4a, 0xba,
        0x26, 0x42, 0xc1, 0xd0, 0x69, 0xb8, 0x9f, 0xdf,
        0xb6, 0x85, 0x03, 0xac, 0xe5, 0x81, 0x3c, 0x9e,
        0x17, 0x37, 0xd3, 0xa7, 0x08, 0x69, 0x21, 0x98,
        0xd0, 0xe8, 0x64, 0xcf, 0x24, 0x0c, 0x79, 0x7e,
        0x26, 0x58, 0xf4, 0xe6, 0x69, 0xb9, 0x40, 0xa8,
        0x94, 0x30, 0x76, 0x16, 0x5f, 0xa6, 0x7d, 0x22,
        0x4e, 0x61, 0xb4, 0x3e, 0x0e, 0x2b, 0x09, 0x48,
        0x22, 0x71, 0x54, 0xfc, 0xe3, 0x36, 0x86, 0xf9,
        0xf9, 0x75, 0xc7, 0x30, 0xc6, 0x91, 0x9b, 0x97,
        0xd5, 0xf2, 0x86, 0x25, 0x8c, 0x10, 0xbe, 0xc9,
        0x78, 0x6c, 0x35, 0x89, 0x1e, 0x82, 0x3c, 0xd8,
        0x2c, 0x89, 0x81, 0x4d, 0x94, 0x5b, 0xee, 0x50,
        0xc6, 0x82, 0xc7, 0xc1, 0x0c, 0xff, 0x99, 0xac,
        0xf9, 0xef, 0xa9, 0xe1, 0x9a, 0x23, 0xd2, 0xd4,
        0x07, 0x8a, 0xa3, 0xa4, 0x83, 0x4c, 0xba, 0xd0,
        0xa9, 0x97, 0xbc, 0xbd, 0xdb, 0xee, 0xb4, 0x71,
        0xeb, 0x58, 0xff, 0x8a, 0x78, 0x00, 0x11, 0x49,
        0x3f, 0xd7, 0xb0, 0x8b, 0xc9, 0x7c, 0x07, 0x63,
        0xa3, 0x72, 0x94, 0xf7, 0x2f, 0xc8, 0x58, 0x77,
        0xf2, 0x57, 0x5a, 0xf9, 0x47, 0x5d, 0xc8, 0xbc,
        0x92, 0xa7, 0xcd, 0x1e, 0xe6, 0x57, 0x8b, 0x36,
        0xa2, 0xdd, 0xe0, 0xda, 0xc3, 0xa2, 0x70, 0x14,
        0x9d, 0xcf, 0x07, 0x16, 0x53, 0x9c, 0x57, 0xf4,
        0xca, 0xd2, 0x7b, 0x69, 0x98, 0x3c, 0xf9, 0xc5,
        0x5b, 0x36, 0x7b, 0x87, 0x92, 0xd0, 0x1c, 0x79,
        0x1b, 0x08, 0xd7, 0xd9, 0x7c, 0x4f, 0xf7, 0x8a,
        0x72, 0x8e, 0x05, 0xfa, 0x3e, 0xe2, 0xb9, 0x4e,
        0x30, 0x79, 0x98, 0x25, 0xed, 0x11, 0x5a, 0x4a,
        0x60, 0x7e, 0xc7, 0x34, 0xeb, 0xfe, 0xcc, 0x95,
        0xb0, 0xe5, 0x65, 0x1f, 0xa2, 0x2b, 0xcb, 0x9f,
        0xbb, 0xd3, 0xa7, 0x18, 0x66, 0x99, 0x3e, 0x16,
        0x4a, 0x9c, 0xfe, 0xc4, 0x11, 0xba, 0x36, 0x50,
        0xeb, 0xed, 0xc9, 0x20, 0xf5, 0x1b, 0xa8, 0xd3,
        0xbe, 0xc1, 0xf3, 0x0a, 0x1b, 0x6e, 0x48, 0x4a,
        0x5a, 0xfe, 0x66, 0x9b, 0x54, 0xe2, 0xbe, 0x47,
        0x4e, 0x3c, 0xa7, 0x8c, 0x49, 0x4e, 0xa3, 0x29,
        0x4a, 0x92, 0xf7, 0xfc, 0xe1, 0x78, 0xda, 0x74,
        0x08, 0x9d, 0x11, 0x69, 0x85, 0x87, 0x40, 0x83,
        0x07, 0x5b, 0x0f, 0x16, 0x9d, 0x92, 0xb9, 0x0b,
        0xf0, 0x76, 0x64, 0x70, 0x02, 0x78, 0x78, 0xe3,
        0xc8, 0xfc, 0x82, 0x42, 0x22, 0x12, 0x69, 0x53,
        0x38, 0x0c, 0xef, 0x0e, 0xeb, 0x34, 0x65, 0xf4,
        0xa9, 0x39, 0x13, 0x5f, 0xed, 0xdb, 0x28, 0x9e,
        0x78, 0x20, 0xb5, 0xd2, 0x42, 0xca, 0x60, 0x43,
        0x0e, 0x12, 0xf5, 0xfa, 0x66, 0xcd, 0x04, 0x3d,
        0x50, 0xb5, 0xd8, 0xd9, 0x07, 0xb4, 0x2b, 0x37,
        0xff, 0xa0, 0x4a, 0x35, 0x21, 0xc5, 0xb4, 0x3a,
        0x9b, 0x92, 0x3a, 0x0d, 0xd2, 0x5f, 0x3c, 0xf8,
        0x51, 0x1f, 0x05, 0x52, 0xef, 0x39, 0xcf, 0x5a,
        0x2a, 0xb7, 0xdf, 0x52, 0x7c, 0xbb, 0xfe, 0xbb,
        0x81, 0x20, 0xd9, 0x84, 0xc8, 0xfc, 0x21, 0x3a,
        0xcf, 0x99, 0xc4, 0x0a, 0x7c, 0x1f, 0xd8, 0xdd,
        0x9d, 0x23, 0xc8, 0xd0, 0xcf, 0xb4, 0x16, 0x3b,
        0xf2, 0x17, 0x8d, 0x8e, 0xd5, 0xc4, 0x68, 0xbd,
        0x9f, 0x5c, 0x2d, 0x02, 0x68, 0xce, 0x0a, 0xa2,
        0x94, 0xda, 0xc0, 0x9e, 0xea, 0xb5, 0xd2, 0x9d,
        0xd9, 0x0f, 0xfe, 0x16, 0x7e, 0x17, 0x81, 0x29,
        0x88, 0x7c, 0xc5, 0x28, 0x8d, 0xb1, 0xad, 0xd3,
        0x79, 0xfb, 0x8c, 0xc6, 0x2c, 0xa3, 0x9d, 0xda,
        0xb3, 0x52, 0x10, 0xd9, 0xa3, 0x66, 0xcd, 0xdf,
        0x04, 0x63, 0x71, 0x80, 0x36, 0xe6, 0xf9, 0x02,
        0x43, 0x60, 0xdd, 0xbf, 0x9d, 0x8d, 0x53, 0xc2,
        0x15, 0x56, 0x20, 0x0a, 0x25, 0x4f, 0x19, 0x20,
        0x17, 0x92, 0x98, 0x2b, 0x96, 0x62, 0x69, 0x0a,
        0xde, 0xad, 0x56, 0xf5, 0xe7, 0x1f, 0x4a, 0xf1,
        0x86, 0xde, 0xa8, 0x4f, 0xb3, 0x88, 0x99, 0x5b,
        0xf2, 0x04, 0xd7, 0x5d, 0x2a, 0x45, 0x09, 0x13,
        0xb5, 0x13, 0x0e, 0x3c, 0xf1, 0x22, 0xd0, 0xc6,
        0x8d, 0xb1, 0x1d, 0xa0, 0xfe, 0x98, 0xef, 0x11,
        0x54, 0x1e, 0x4c, 0x39, 0xf1, 0x8c, 0x53, 0x3d,
        0x4c, 0x1a, 0x67, 0xcc, 0x26, 0xad, 0x53, 0x3e,
        0xb7, 0x59, 0x6f, 0xf8, 0xd5, 0x2d, 0x0b, 0xeb,
        0x0a, 0x6f, 0xb3, 0x04, 0x81, 0x56, 0xd3, 0xa3,
        0xd7, 0xb6, 0x36, 0xa8, 0x6f, 0xe4, 0x51, 0x17,
        0x83, 0x89, 0x37, 0xe6, 0x76, 0x40, 0x1c, 0x55,
        0x3f, 0x55, 0xca, 0x17, 0xfc, 0x95, 0xd3, 0x0c,
        0xaf, 0x1e, 0x3e, 0x15, 0x19, 0x6a, 0x77, 0xe7,
        0xdc, 0xeb, 0xd7, 0x0b, 0xd7, 0x2e, 0x79, 0x60,
        0xf2, 0xb1, 0xbd, 0x9a, 0x1e, 0x4c, 0x12, 0x8c,
        0xbd, 0x73, 0xf0, 0xeb, 0x48, 0x18, 0x5e, 0x10,
        0x23, 0x7e, 0x1a, 0x4a, 0x70, 0xf0, 0x30, 0x90,
        0x3f, 0x76, 0xbb, 0x54, 0xad, 0x29, 0x14, 0xfb,
        0x8e, 0x45, 0xb0, 0x83, 0xb2, 0x1a, 0x58, 0x79,
        0x04, 0x30, 0x6e, 0x1f, 0x15, 0x3e,
    };
    ASSERT_EQ(0, memcmp(PACKET, packet, sizeof(packet)));


    ln_hop_dataout_t dataout;

    for (int lp = 0; lp < 20; lp++) {
        ln_node_setkey(onion_privkey[lp]);
        ptarm_buf_t buf_rsn = PTARM_BUF_INIT;
        ptarm_push_t push_rsn;
        ptarm_push_init(&push_rsn, &buf_rsn, 0);
        ret = ln_onion_read_packet(packet, &dataout, NULL, &push_rsn, packet, NULL, 0);
        ASSERT_TRUE(ret);
        ASSERT_EQ(datain[lp].short_channel_id, dataout.short_channel_id);
        ptarm_buf_free(&buf_rsn);

        if (lp == 19) {
            ASSERT_TRUE(dataout.b_exit);
        } else {
            ASSERT_TRUE(!dataout.b_exit);
        }
    }
}


//channel-idはちゃんと復元できているのだろうか？
TEST_F(onion, test3)
{
    uint8_t session_key[PTARM_SZ_PRIVKEY];
    uint8_t onion_privkey[20][PTARM_SZ_PRIVKEY];
    ln_hop_datain_t datain[20];
    uint8_t packet[LN_SZ_ONION_ROUTE];

    for (int lp = 0; lp < sizeof(session_key); lp++) {
        session_key[lp] = (uint8_t)'A';
    }
    for (int lp = 0; lp < ARRAY_SIZE(datain); lp++) {
        datain[lp].short_channel_id = (((uint64_t)lp << 56) | ((uint64_t)lp << 48) | ((uint64_t)lp << 40) | ((uint64_t)lp << 32) | ((uint64_t)lp << 24) | ((uint64_t)lp << 16) | ((uint64_t)lp << 8) | (uint64_t)lp);
        //amt_to_forwardが64bitになったため、位置がずれる
        //      OLD [0-7][8-11][12-15][16-]
        //      NEW [0-7][8-15][16-19][20-]
        //datain[lp].amt_to_forward = lp;
        //datain[lp].outgoing_cltv_value = lp;
        datain[lp].amt_to_forward = (uint64_t)lp << 32 | lp;
        datain[lp].outgoing_cltv_value = 0;
        memset(onion_privkey[lp], lp + 1, PTARM_SZ_PRIVKEY);
        ptarm_keys_priv2pub(datain[lp].pubkey, onion_privkey[lp]);
    }

    bool ret = ln_onion_create_packet(packet, NULL, datain, 20, session_key, NULL, 0);
    ASSERT_TRUE(ret);

    ln_hop_dataout_t dataout;

    for (int lp = 0; lp < 20; lp++) {
        ln_node_setkey(onion_privkey[lp]);
        ptarm_buf_t buf_rsn = PTARM_BUF_INIT;
        ptarm_push_t push_rsn;
        ptarm_push_init(&push_rsn, &buf_rsn, 0);
        ret = ln_onion_read_packet(packet, &dataout, NULL, &push_rsn, packet, NULL, 0);
        ASSERT_TRUE(ret);
        ASSERT_EQ(datain[lp].short_channel_id, dataout.short_channel_id);
        ptarm_buf_free(&buf_rsn);

        if (lp == 19) {
            ASSERT_TRUE(dataout.b_exit);
        } else {
            ASSERT_TRUE(!dataout.b_exit);
        }
    }
}


//test3で、assocがあるとどうなるのか？
TEST_F(onion, test4)
{
    uint8_t session_key[PTARM_SZ_PRIVKEY];
    uint8_t onion_privkey[20][PTARM_SZ_PRIVKEY];
    ln_hop_datain_t datain[20];
    uint8_t packet[LN_SZ_ONION_ROUTE];

    for (int lp = 0; lp < ARRAY_SIZE(datain); lp++) {
        datain[lp].short_channel_id = (((uint64_t)lp << 56) | ((uint64_t)(lp+1) << 48) | ((uint64_t)(lp+2) << 40) | ((uint64_t)(lp+3) << 32) | ((uint64_t)(lp+4) << 24) | ((uint64_t)(lp+5) << 16) | ((uint64_t)(lp+6) << 8) | (uint64_t)(lp+7));
        //amt_to_forwardが64bitになったため、位置がずれる
        //      OLD [0-7][8-11][12-15][16-]
        //      NEW [0-7][8-15][16-19][20-]
        //datain[lp].amt_to_forward = lp;
        //datain[lp].outgoing_cltv_value = lp;
        datain[lp].amt_to_forward = (uint64_t)lp << 32 | lp;
        datain[lp].outgoing_cltv_value = 0;
        memset(onion_privkey[lp], lp + 1, PTARM_SZ_PRIVKEY);
        ptarm_keys_priv2pub(datain[lp].pubkey, onion_privkey[lp]);
    }

    const uint8_t ASSOC[] = { 'A', 'b', 'C', 'd', 'E' };

    bool ret = ln_onion_create_packet(packet, NULL, datain, 20, session_key, ASSOC, sizeof(ASSOC));
    ASSERT_TRUE(ret);

    ln_hop_dataout_t dataout;

    for (int lp = 0; lp < 20; lp++) {
        ln_node_setkey(onion_privkey[lp]);
        ptarm_buf_t buf_rsn = PTARM_BUF_INIT;
        ptarm_push_t push_rsn;
        ptarm_push_init(&push_rsn, &buf_rsn, 0);
        ret = ln_onion_read_packet(packet, &dataout, NULL, &push_rsn, packet, ASSOC, sizeof(ASSOC));
        ASSERT_TRUE(ret);
        ASSERT_EQ(datain[lp].short_channel_id, dataout.short_channel_id);
        ptarm_buf_free(&buf_rsn);

        if (lp == 19) {
            ASSERT_TRUE(dataout.b_exit);
        } else {
            ASSERT_TRUE(!dataout.b_exit);
        }
    }
}

