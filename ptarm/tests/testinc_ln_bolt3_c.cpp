
/*
    Appendix C: Commitment and HTLC Transaction Test Vectors
        を適当に見て回る。

    https://github.com/lightningnetwork/lightning-rfc/blob/master/03-transactions.md#appendix-c-commitment-and-htlc-transaction-test-vectors

    simple commitment tx with no HTLCs
        committx2
    commitment tx with all 5 htlcs untrimmed (minimum feerate)
        committx7min_commit
        committx7min_success_to
    commitment tx with 7 outputs untrimmed (maximum feerate)
        committx7max_commit
        committx7max_success_to
    commitment tx with 6 outputs untrimmed (minimum feerate)
        committx6min_commit
        committx6min_success_to
    commitment tx with 6 outputs untrimmed (maximum feerate)
        committx6max_commit
        committx6max_success_to
    commitment tx with 5 outputs untrimmed (minimum feerate)
        committx5min_commit
        committx5min_success_to
    commitment tx with 5 outputs untrimmed (maximum feerate)
        committx5max_commit
        committx5max_success_to
    commitment tx with 4 outputs untrimmed (minimum feerate)
        committx4min_commit
        committx4min_success_to
    commitment tx with 4 outputs untrimmed (maximum feerate)
        committx4max_commit
        committx4max_success_to
    commitment tx with 3 outputs untrimmed (minimum feerate)
        committx3min_commit
        committx3min_success_to
    commitment tx with 3 outputs untrimmed (maximum feerate)
        committx3max_commit
        committx3max_success_to
    commitment tx with 2 outputs untrimmed (minimum feerate)
        committx2min_commit
    commitment tx with 2 outputs untrimmed (maximum feerate)
        committx2max_commit
    commitment tx with 1 output untrimmed (minimum feerate)
        committx1min_commit
    commitment tx with fee greater than funder amount
        committx_commit
*/

////////////////////////////////////////////////////////////////////////
//FAKE関数

//FAKE_VALUE_FUNC(int, external_function, int);

////////////////////////////////////////////////////////////////////////

namespace {

//////////////////////////////////////////////////
static const uint8_t TXID_FUND[] = {
    0xbe, 0xf6, 0x7e, 0x4e, 0x2f, 0xb9, 0xdd, 0xee,
    0xb3, 0x46, 0x19, 0x73, 0xcd, 0x4c, 0x62, 0xab,
    0xb3, 0x50, 0x50, 0xb1, 0xad, 0xd7, 0x72, 0x99,
    0x5b, 0x82, 0x0b, 0x58, 0x4a, 0x48, 0x84, 0x89,
};
static const uint32_t TXID_FUND_INDEX = 0;
static const uint64_t SATOSHI_FUNDING = 10000000LL;
static const int COMMITMENT_NUMBER = 42;
static const int LOCAL_DELAY = 144;
static const uint64_t DUST_LIMIT_SATOSHIS = 546;


static const uint8_t LOCAL_PAYMENT_BASEPOINT[] = {
    0x03, 0x4f, 0x35, 0x5b, 0xdc, 0xb7, 0xcc, 0x0a,
    0xf7, 0x28, 0xef, 0x3c, 0xce, 0xb9, 0x61, 0x5d,
    0x90, 0x68, 0x4b, 0xb5, 0xb2, 0xca, 0x5f, 0x85,
    0x9a, 0xb0, 0xf0, 0xb7, 0x04, 0x07, 0x58, 0x71,
    0xaa,
};
static const uint8_t REMOTE_PAYMENT_BASEPOINT[] = {
    0x03, 0x2c, 0x0b, 0x7c, 0xf9, 0x53, 0x24, 0xa0,
    0x7d, 0x05, 0x39, 0x8b, 0x24, 0x01, 0x74, 0xdc,
    0x0c, 0x2b, 0xe4, 0x44, 0xd9, 0x6b, 0x15, 0x9a,
    0xa6, 0xc7, 0xf7, 0xb1, 0xe6, 0x68, 0x68, 0x09,
    0x91,
};

static const uint8_t LOCAL_FUNDING_PRIVKEY[] = {
    0x30, 0xff, 0x49, 0x56, 0xbb, 0xdd, 0x32, 0x22,
    0xd4, 0x4c, 0xc5, 0xe8, 0xa1, 0x26, 0x1d, 0xab,
    0x1e, 0x07, 0x95, 0x7b, 0xda, 0xc5, 0xae, 0x88,
    0xfe, 0x32, 0x61, 0xef, 0x32, 0x1f, 0x37, 0x49,
    0x01, 0x01      //この2byteはなに？ 最初の0x01は「圧縮された秘密鍵」と思われるが、次は誤記？
};
static const uint8_t LOCAL_FUNDING_PUBKEY[] = {
    0x02, 0x3d, 0xa0, 0x92, 0xf6, 0x98, 0x0e, 0x58,
    0xd2, 0xc0, 0x37, 0x17, 0x31, 0x80, 0xe9, 0xa4,
    0x65, 0x47, 0x60, 0x26, 0xee, 0x50, 0xf9, 0x66,
    0x95, 0x96, 0x3e, 0x8e, 0xfe, 0x43, 0x6f, 0x54,
    0xeb,
};
static const uint8_t REMOTE_FUNDING_PUBKEY[] = {
    0x03, 0x0e, 0x9f, 0x7b, 0x62, 0x3d, 0x2c, 0xcc,
    0x7c, 0x9b, 0xd4, 0x4d, 0x66, 0xd5, 0xce, 0x21,
    0xce, 0x50, 0x4c, 0x0a, 0xcf, 0x63, 0x85, 0xa1,
    0x32, 0xce, 0xc6, 0xd3, 0xc3, 0x9f, 0xa7, 0x11,
    0xc1,
};
static const uint8_t LOCAL_SECRETKEY[] = {
    0xbb, 0x13, 0xb1, 0x21, 0xcd, 0xc3, 0x57, 0xcd,
    0x2e, 0x60, 0x8b, 0x0a, 0xea, 0x29, 0x4a, 0xfc,
    0xa3, 0x6e, 0x2b, 0x34, 0xcf, 0x95, 0x8e, 0x2e,
    0x64, 0x51, 0xa2, 0xf2, 0x74, 0x69, 0x44, 0x91,
    0x01,
};
static const uint8_t LOCAL_KEY[] = {
    0x03, 0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84,
    0xf8, 0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e,
    0x57, 0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca,
    0x81, 0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39,
    0xe7,
};
static const uint8_t REMOTE_KEY[] = {
    0x03, 0x94, 0x85, 0x4a, 0xa6, 0xea, 0xb5, 0xb2,
    0xa8, 0x12, 0x2c, 0xc7, 0x26, 0xe9, 0xdd, 0xed,
    0x05, 0x3a, 0x21, 0x84, 0xd8, 0x82, 0x56, 0x81,
    0x68, 0x26, 0xd6, 0x23, 0x1c, 0x06, 0x8d, 0x4a,
    0x5b,
};
static const uint8_t LOCAL_DELAYED_KEY[] = {
    0x03, 0xfd, 0x59, 0x60, 0x52, 0x8d, 0xc1, 0x52,
    0x01, 0x49, 0x52, 0xef, 0xdb, 0x70, 0x2a, 0x88,
    0xf7, 0x1e, 0x3c, 0x16, 0x53, 0xb2, 0x31, 0x44,
    0x31, 0x70, 0x1e, 0xc7, 0x7e, 0x57, 0xfd, 0xe8,
    0x3c,
};
static const uint8_t LOCAL_REVO_KEY[] = {
    0x02, 0x12, 0xa1, 0x40, 0xcd, 0x0c, 0x65, 0x39,
    0xd0, 0x7c, 0xd0, 0x8d, 0xfe, 0x09, 0x98, 0x4d,
    0xec, 0x32, 0x51, 0xea, 0x80, 0x8b, 0x89, 0x2e,
    0xfe, 0xac, 0x3e, 0xde, 0x94, 0x02, 0xbf, 0x2b,
    0x19,
};

static const uint64_t OBSCURED_NUM = 0x2bb038521914;


//HTLC 0 : received
static const uint8_t PREIMAGE_HTLC0[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
static const uint32_t EXPIRY0 = 500;
static const uint64_t SATOSHI_HTLC0 = 1000LL;

//HTLC 1 : received
static const uint8_t PREIMAGE_HTLC1[] = {
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
};
static const uint32_t EXPIRY1 = 501;
static const uint64_t SATOSHI_HTLC1 = 2000LL;

//HTLC 2 : offered
static const uint8_t PREIMAGE_HTLC2[] = {
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
};
static const uint32_t EXPIRY2 = 502;
static const uint64_t SATOSHI_HTLC2 = 2000LL;

//HTLC 3 : offered
static const uint8_t PREIMAGE_HTLC3[] = {
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
};
static const uint32_t EXPIRY3 = 503;
static const uint64_t SATOSHI_HTLC3 = 3000LL;

//HTLC 4: received
static const uint8_t PREIMAGE_HTLC4[] = {
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
};
static const uint32_t EXPIRY4 = 504;
static const uint64_t SATOSHI_HTLC4 = 4000LL;

static uint8_t preimage_hash_htlc0[PTARM_SZ_HASH256];
static uint8_t preimage_hash_htlc1[PTARM_SZ_HASH256];
static uint8_t preimage_hash_htlc2[PTARM_SZ_HASH256];
static uint8_t preimage_hash_htlc3[PTARM_SZ_HASH256];
static uint8_t preimage_hash_htlc4[PTARM_SZ_HASH256];

static const uint8_t *PREIMAGES[] = {
    PREIMAGE_HTLC0,
    PREIMAGE_HTLC1,
    NULL,       //PREIMAGE_HTLC2,
    NULL,       //PREIMAGE_HTLC3,
    PREIMAGE_HTLC4,
};
}
////////////////////////////////////////////////////////////////////////

class ln_bolt3_c: public testing::Test {
protected:
    virtual void SetUp() {
    }

    virtual void TearDown() {
    }

    static ln_self_priv_t    priv_data;
    static ptarm_util_keys_t keys_local_funding;
    static ptarm_util_keys_t keys_local_commit;
    static uint8_t remote_funding_pubkey[PTARM_SZ_PUBKEY];

    static uint64_t obscured;
    static ptarm_buf_t funding2of2;
    static ptarm_keys_sort_t key_fund_sort;

    static ptarm_tx_t tx;
    static uint8_t txid_commit[PTARM_SZ_TXID];
    static ln_feeinfo_t   feeinfo;
    static ln_htlcinfo_t htlcinfos[5];
    static ln_htlcinfo_t **pp_htlcinfos;

public:
    static void DumpBin(const uint8_t *pData, uint16_t Len)
    {
        for (uint16_t lp = 0; lp < Len; lp++) {
            printf("%02x", pData[lp]);
        }
        printf("\n");
    }
};

ln_self_priv_t    ln_bolt3_c::priv_data;
ptarm_util_keys_t ln_bolt3_c::keys_local_funding;
ptarm_util_keys_t ln_bolt3_c::keys_local_commit;
uint8_t ln_bolt3_c::remote_funding_pubkey[PTARM_SZ_PUBKEY];

uint64_t ln_bolt3_c::obscured;
ptarm_buf_t ln_bolt3_c::funding2of2;
ptarm_keys_sort_t ln_bolt3_c::key_fund_sort;

ptarm_tx_t ln_bolt3_c::tx;
uint8_t ln_bolt3_c::txid_commit[PTARM_SZ_TXID];
ln_feeinfo_t   ln_bolt3_c::feeinfo;
ln_htlcinfo_t ln_bolt3_c::htlcinfos[5];
ln_htlcinfo_t** ln_bolt3_c::pp_htlcinfos;


////////////////////////////////////////////////////////////////////////

TEST_F(ln_bolt3_c, start)
{
    ptarm_init(PTARM_TESTNET, true);
}


TEST_F(ln_bolt3_c, committx1)
{
    bool ret;

    //obscured commitment number
    uint64_t obscured_base = ln_calc_obscured_txnum(LOCAL_PAYMENT_BASEPOINT, REMOTE_PAYMENT_BASEPOINT);
    ASSERT_EQ(OBSCURED_NUM, obscured_base);
    obscured = obscured_base ^ COMMITMENT_NUMBER;

    //keys
    memcpy(keys_local_funding.priv, LOCAL_FUNDING_PRIVKEY, PTARM_SZ_PRIVKEY);
    ret = ptarm_keys_priv2pub(keys_local_funding.pub, keys_local_funding.priv);
    ASSERT_TRUE(ret);
    ASSERT_EQ(0, memcmp(keys_local_funding.pub, LOCAL_FUNDING_PUBKEY, PTARM_SZ_PUBKEY));
    memcpy(remote_funding_pubkey, REMOTE_FUNDING_PUBKEY, PTARM_SZ_PUBKEY);

    memcpy(priv_data.priv[MSG_FUNDIDX_FUNDING], LOCAL_FUNDING_PRIVKEY, PTARM_SZ_PRIVKEY);

    memcpy(keys_local_commit.priv, LOCAL_SECRETKEY, PTARM_SZ_PRIVKEY);
    ret = ptarm_keys_priv2pub(keys_local_commit.pub, keys_local_commit.priv);
    ASSERT_TRUE(ret);
    ASSERT_EQ(0, memcmp(keys_local_commit.pub, LOCAL_KEY, PTARM_SZ_PUBKEY));

    //input script
    ret = ptarm_util_create2of2(&funding2of2, &key_fund_sort, keys_local_funding.pub, remote_funding_pubkey);
    ASSERT_TRUE(ret);

    //preimage-hash
    ptarm_util_sha256(preimage_hash_htlc0, PREIMAGE_HTLC0, PTARM_SZ_HASH256);
    ptarm_util_sha256(preimage_hash_htlc1, PREIMAGE_HTLC1, PTARM_SZ_HASH256);
    ptarm_util_sha256(preimage_hash_htlc2, PREIMAGE_HTLC2, PTARM_SZ_HASH256);
    ptarm_util_sha256(preimage_hash_htlc3, PREIMAGE_HTLC3, PTARM_SZ_HASH256);
    ptarm_util_sha256(preimage_hash_htlc4, PREIMAGE_HTLC4, PTARM_SZ_HASH256);

    //fee
    feeinfo.dust_limit_satoshi = DUST_LIMIT_SATOSHIS;

    //HTLC info
    htlcinfos[0].type = LN_HTLCTYPE_RECEIVED;
    htlcinfos[0].expiry = EXPIRY0;
    htlcinfos[0].amount_msat = LN_SATOSHI2MSAT(SATOSHI_HTLC0);
    htlcinfos[0].preimage_hash = preimage_hash_htlc0;
    //
    htlcinfos[1].type = LN_HTLCTYPE_RECEIVED;
    htlcinfos[1].expiry = EXPIRY1;
    htlcinfos[1].amount_msat = LN_SATOSHI2MSAT(SATOSHI_HTLC1);
    htlcinfos[1].preimage_hash = preimage_hash_htlc1;
    //
    htlcinfos[2].type = LN_HTLCTYPE_OFFERED;
    htlcinfos[2].expiry = EXPIRY2;
    htlcinfos[2].amount_msat = LN_SATOSHI2MSAT(SATOSHI_HTLC2);
    htlcinfos[2].preimage_hash = preimage_hash_htlc2;
    //
    htlcinfos[3].type = LN_HTLCTYPE_OFFERED;
    htlcinfos[3].expiry = EXPIRY3;
    htlcinfos[3].amount_msat = LN_SATOSHI2MSAT(SATOSHI_HTLC3);
    htlcinfos[3].preimage_hash = preimage_hash_htlc3;
    //
    htlcinfos[4].type = LN_HTLCTYPE_RECEIVED;
    htlcinfos[4].expiry = EXPIRY4;
    htlcinfos[4].amount_msat = LN_SATOSHI2MSAT(SATOSHI_HTLC4);
    htlcinfos[4].preimage_hash = preimage_hash_htlc4;

    pp_htlcinfos = (ln_htlcinfo_t **)malloc(sizeof(ln_htlcinfo_t*) * 5);
    for (int lp = 0; lp < 5; lp++) {
        pp_htlcinfos[lp] = &htlcinfos[lp];
    }
}


TEST_F(ln_bolt3_c, committx2)
{
    bool ret;


    //amounts
    const uint64_t MSAT_LOCAL = 7000000000LL;
    const uint64_t MSAT_REMOTE = 3000000000LL;


    feeinfo.feerate_per_kw = 15000;
    uint64_t fee_act = ln_fee_calc(&feeinfo, NULL, 0);

//    printf("base fee_committx=%llu\n", (unsigned long long)feeinfo.commit);
//    printf("actual fee_committx=%llu\n", (unsigned long long)fee_act);
//    printf("fee success=%d\n", (int)feeinfo.htlc_success);
//    printf("fee timeout=%d\n", (int)feeinfo.htlc_timeout);
    ASSERT_EQ(10545, feeinfo.htlc_success);
    ASSERT_EQ(9945, feeinfo.htlc_timeout);
    ASSERT_EQ(10860, feeinfo.commit);
    ASSERT_EQ(10860, fee_act);


    //to-local wscript
    ptarm_buf_t ws_local_buf;

    ln_create_script_local(&ws_local_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);
    //dumpbin(ws_local_buf.buf, ws_local_buf.len);
    //printf("-[to-local]---------------------\n");
    //ptarm_print_script(ws_local_buf.buf, ws_local_buf.len);
    //printf("----------------------: %d\n", ws_local_buf.len);
    const uint8_t TO_LOCAL_WSCRIPT[] = {
        0x63, 0x21, 0x02, 0x12, 0xa1, 0x40, 0xcd, 0x0c,
        0x65, 0x39, 0xd0, 0x7c, 0xd0, 0x8d, 0xfe, 0x09,
        0x98, 0x4d, 0xec, 0x32, 0x51, 0xea, 0x80, 0x8b,
        0x89, 0x2e, 0xfe, 0xac, 0x3e, 0xde, 0x94, 0x02,
        0xbf, 0x2b, 0x19, 0x67, 0x02, 0x90, 0x00, 0xb2,
        0x75, 0x21, 0x03, 0xfd, 0x59, 0x60, 0x52, 0x8d,
        0xc1, 0x52, 0x01, 0x49, 0x52, 0xef, 0xdb, 0x70,
        0x2a, 0x88, 0xf7, 0x1e, 0x3c, 0x16, 0x53, 0xb2,
        0x31, 0x44, 0x31, 0x70, 0x1e, 0xc7, 0x7e, 0x57,
        0xfd, 0xe8, 0x3c, 0x68, 0xac,
    };
    ASSERT_EQ(0, memcmp(TO_LOCAL_WSCRIPT, ws_local_buf.buf, sizeof(TO_LOCAL_WSCRIPT)));
    ASSERT_EQ(sizeof(TO_LOCAL_WSCRIPT), ws_local_buf.len);


    //tx
    ptarm_tx_t tx = PTARM_TX_INIT;

    //output
    //vout#0:P2WKH - remote
    ptarm_sw_add_vout_p2wpkh_pub(&tx, LN_MSAT2SATOSHI(MSAT_REMOTE), REMOTE_KEY);
    //vout#1:P2WSH - local
    if (LN_MSAT2SATOSHI(MSAT_LOCAL) >= feeinfo.dust_limit_satoshi + feeinfo.commit) {
        ptarm_sw_add_vout_p2wsh(&tx, LN_MSAT2SATOSHI(MSAT_LOCAL) - feeinfo.commit, &ws_local_buf);
    }

    //input
    ptarm_vin_t *vin = ptarm_tx_add_vin(&tx, TXID_FUND, TXID_FUND_INDEX);
    vin->sequence = LN_SEQUENCE(obscured);

    //locktime
    tx.locktime = LN_LOCKTIME(obscured);

    //BIP69
    ptarm_util_sort_bip69(&tx);

    //署名
    const uint8_t REMOTE_SIGNATURE[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xf5, 0x1d, 0x2e,
        0x56, 0x6a, 0x70, 0xba, 0x74, 0x0f, 0xc5, 0xd8,
        0xc0, 0xf0, 0x7b, 0x9b, 0x93, 0xd2, 0xed, 0x74,
        0x1c, 0x3c, 0x08, 0x60, 0xc6, 0x13, 0x17, 0x3d,
        0xe7, 0xd3, 0x9e, 0x79, 0x68, 0x02, 0x20, 0x41,
        0x37, 0x6d, 0x52, 0x0e, 0x9c, 0x0e, 0x1a, 0xd5,
        0x22, 0x48, 0xdd, 0xf4, 0xb2, 0x2e, 0x12, 0xbe,
        0x87, 0x63, 0x00, 0x7d, 0xf9, 0x77, 0x25, 0x3e,
        0xf4, 0x5a, 0x4c, 0xa3, 0xbd, 0xb7, 0xc0, 0x01,
    };
    uint8_t txhash[PTARM_SZ_SIGHASH];
    ptarm_util_calc_sighash_p2wsh(txhash, &tx, 0, PTARM_MBTC2SATOSHI(100), &funding2of2);
    ptarm_buf_t buf_sig_local;
    ptarm_buf_t buf_sig_remote;
    ret = ptarm_util_sign_p2wsh(&buf_sig_local, txhash, &keys_local_funding);
    ASSERT_TRUE(ret);
    const uint8_t LOCAL_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x51, 0xb7, 0x5c, 0x73,
        0x19, 0x8c, 0x6d, 0xee, 0xe1, 0xa8, 0x75, 0x87,
        0x1c, 0x39, 0x61, 0x83, 0x29, 0x09, 0xac, 0xd2,
        0x97, 0xc6, 0xb9, 0x08, 0xd5, 0x9e, 0x33, 0x19,
        0xe5, 0x18, 0x5a, 0x46, 0x02, 0x20, 0x55, 0xc4,
        0x19, 0x37, 0x9c, 0x50, 0x51, 0xa7, 0x8d, 0x00,
        0xdb, 0xbc, 0xe1, 0x1b, 0x5b, 0x66, 0x4a, 0x0c,
        0x22, 0x81, 0x5f, 0xbc, 0xc6, 0xfc, 0xef, 0x6b,
        0x19, 0x37, 0xc3, 0x83, 0x69, 0x39, 0x01,
    };
    ASSERT_EQ(0, memcmp(LOCAL_SIGNATURE, buf_sig_local.buf, sizeof(LOCAL_SIGNATURE)));
    ASSERT_EQ(sizeof(LOCAL_SIGNATURE), buf_sig_local.len);

    ptarm_buf_alloccopy(&buf_sig_remote, REMOTE_SIGNATURE, sizeof(REMOTE_SIGNATURE));
    ret = set_vin_p2wsh_2of2(&tx, 0, key_fund_sort,
                &buf_sig_local,
                &buf_sig_remote,
                &funding2of2);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&buf_sig_local);
    ptarm_buf_free(&buf_sig_remote);

    //ptarm_print_tx(&tx);

    //TestVectorとのチェック
    const uint8_t COMMIT_TX[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xbe,
        0xf6, 0x7e, 0x4e, 0x2f, 0xb9, 0xdd, 0xee, 0xb3,
        0x46, 0x19, 0x73, 0xcd, 0x4c, 0x62, 0xab, 0xb3,
        0x50, 0x50, 0xb1, 0xad, 0xd7, 0x72, 0x99, 0x5b,
        0x82, 0x0b, 0x58, 0x4a, 0x48, 0x84, 0x89, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x38, 0xb0, 0x2b, 0x80,
        0x02, 0xc0, 0xc6, 0x2d, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x16, 0x00, 0x14, 0xcc, 0xf1, 0xaf, 0x2f,
        0x2a, 0xab, 0xee, 0x14, 0xbb, 0x40, 0xfa, 0x38,
        0x51, 0xab, 0x23, 0x01, 0xde, 0x84, 0x31, 0x10,
        0x54, 0xa5, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f, 0x00,
        0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d, 0x4e,
        0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1, 0x1a,
        0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d, 0x6b,
        0x7d, 0xd8, 0x0e, 0x04, 0x00, 0x47, 0x30, 0x44,
        0x02, 0x20, 0x51, 0xb7, 0x5c, 0x73, 0x19, 0x8c,
        0x6d, 0xee, 0xe1, 0xa8, 0x75, 0x87, 0x1c, 0x39,
        0x61, 0x83, 0x29, 0x09, 0xac, 0xd2, 0x97, 0xc6,
        0xb9, 0x08, 0xd5, 0x9e, 0x33, 0x19, 0xe5, 0x18,
        0x5a, 0x46, 0x02, 0x20, 0x55, 0xc4, 0x19, 0x37,
        0x9c, 0x50, 0x51, 0xa7, 0x8d, 0x00, 0xdb, 0xbc,
        0xe1, 0x1b, 0x5b, 0x66, 0x4a, 0x0c, 0x22, 0x81,
        0x5f, 0xbc, 0xc6, 0xfc, 0xef, 0x6b, 0x19, 0x37,
        0xc3, 0x83, 0x69, 0x39, 0x01, 0x48, 0x30, 0x45,
        0x02, 0x21, 0x00, 0xf5, 0x1d, 0x2e, 0x56, 0x6a,
        0x70, 0xba, 0x74, 0x0f, 0xc5, 0xd8, 0xc0, 0xf0,
        0x7b, 0x9b, 0x93, 0xd2, 0xed, 0x74, 0x1c, 0x3c,
        0x08, 0x60, 0xc6, 0x13, 0x17, 0x3d, 0xe7, 0xd3,
        0x9e, 0x79, 0x68, 0x02, 0x20, 0x41, 0x37, 0x6d,
        0x52, 0x0e, 0x9c, 0x0e, 0x1a, 0xd5, 0x22, 0x48,
        0xdd, 0xf4, 0xb2, 0x2e, 0x12, 0xbe, 0x87, 0x63,
        0x00, 0x7d, 0xf9, 0x77, 0x25, 0x3e, 0xf4, 0x5a,
        0x4c, 0xa3, 0xbd, 0xb7, 0xc0, 0x01, 0x47, 0x52,
        0x21, 0x02, 0x3d, 0xa0, 0x92, 0xf6, 0x98, 0x0e,
        0x58, 0xd2, 0xc0, 0x37, 0x17, 0x31, 0x80, 0xe9,
        0xa4, 0x65, 0x47, 0x60, 0x26, 0xee, 0x50, 0xf9,
        0x66, 0x95, 0x96, 0x3e, 0x8e, 0xfe, 0x43, 0x6f,
        0x54, 0xeb, 0x21, 0x03, 0x0e, 0x9f, 0x7b, 0x62,
        0x3d, 0x2c, 0xcc, 0x7c, 0x9b, 0xd4, 0x4d, 0x66,
        0xd5, 0xce, 0x21, 0xce, 0x50, 0x4c, 0x0a, 0xcf,
        0x63, 0x85, 0xa1, 0x32, 0xce, 0xc6, 0xd3, 0xc3,
        0x9f, 0xa7, 0x11, 0xc1, 0x52, 0xae, 0x3e, 0x19,
        0x52, 0x20,
    };
    ptarm_buf_t tx_buf;
    ptarm_tx_create(&tx_buf, &tx);
    ASSERT_EQ(0, memcmp(COMMIT_TX, tx_buf.buf, sizeof(COMMIT_TX)));
    ASSERT_EQ(sizeof(COMMIT_TX), tx_buf.len);
    ptarm_buf_free(&tx_buf);

    ptarm_buf_free(&ws_local_buf);
    ptarm_tx_free(&tx);
}


// name: commitment tx with five outputs untrimmed (minimum feerate)
//      Commitment Transaction
TEST_F(ln_bolt3_c, committx5untrim_commit)
{
    ptarm_tx_init(&tx);

    bool ret;

    //amounts
    const uint64_t MSAT_LOCAL = 6988000000LL;
    const uint64_t MSAT_REMOTE = 3000000000LL;

    feeinfo.feerate_per_kw = 0;
    uint64_t fee_act = ln_fee_calc(&feeinfo, (const ln_htlcinfo_t **)pp_htlcinfos, 5);

//    printf("base fee_committx=%llu\n", (unsigned long long)feeinfo.commit);
//    printf("actual fee_committx=%llu\n", (unsigned long long)fee_act);
//    printf("fee success=%d\n", (int)feeinfo.htlc_success);
//    printf("fee timeout=%d\n", (int)feeinfo.htlc_timeout);
    ASSERT_EQ(0, feeinfo.htlc_success);
    ASSERT_EQ(0, feeinfo.htlc_timeout);
    ASSERT_EQ(0, feeinfo.commit);
    ASSERT_EQ(0, fee_act);


    ///////////////////////////////////////
    //HTLC 0 received amount 1000
    const uint8_t WS_HTLC0[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0xb8, 0xbc, 0xb0,
        0x7f, 0x63, 0x44, 0xb4, 0x2a, 0xb0, 0x42, 0x50,
        0xc8, 0x6a, 0x6e, 0x8b, 0x75, 0xd3, 0xfd, 0xbb,
        0xc6, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf4, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    //HTLC 1 received amount 2000
    const uint8_t WS_HTLC1[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b, 0x2e,
        0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb, 0x7b,
        0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc, 0xe2,
        0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    //HTLC 2 offered amount 2000
    const uint8_t WS_HTLC2[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e, 0x1b,
        0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c, 0xd9,
        0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9, 0xb5,
        0xd1, 0x88, 0xac, 0x68, 0x68,
    };
    //HTLC 3 offered amount 3000
    const uint8_t WS_HTLC3[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48, 0x6f,
        0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39, 0xe2,
        0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0, 0x9d,
        0x5b, 0x88, 0xac, 0x68, 0x68,
    };
    //HTLC 4 received amount 4000
    const uint8_t WS_HTLC4[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc, 0x1a,
        0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d, 0x23,
        0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27, 0x43,
        0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };

    ///////////////////////////////////////

    const struct {
        const uint8_t *ws;
        size_t len;
    } SCRIPTS[] = {
        { WS_HTLC0, sizeof(WS_HTLC0) },
        { WS_HTLC1, sizeof(WS_HTLC1) },
        { WS_HTLC2, sizeof(WS_HTLC2) },
        { WS_HTLC3, sizeof(WS_HTLC3) },
        { WS_HTLC4, sizeof(WS_HTLC4) }
    };

    for (int lp = 0; lp < 5; lp++) {
        ln_create_htlcinfo(&pp_htlcinfos[lp]->script, pp_htlcinfos[lp]->type, LOCAL_KEY, LOCAL_REVO_KEY, REMOTE_KEY, pp_htlcinfos[lp]->preimage_hash, pp_htlcinfos[lp]->expiry);

        ASSERT_EQ(0, memcmp(SCRIPTS[lp].ws, htlcinfos[lp].script.buf, SCRIPTS[lp].len));
        ASSERT_EQ(SCRIPTS[lp].len, htlcinfos[lp].script.len);
    }


    //to-local wscript
    ptarm_buf_t ws_local_buf;

    ln_create_script_local(&ws_local_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);
//    dumpbin(ws_local_buf.buf, ws_local_buf.len);
//    printf("-[to-local]---------------------\n");
//    ptarm_print_script(ws_local_buf.buf, ws_local_buf.len);
//    printf("----------------------: %d\n", ws_local_buf.len);
    const uint8_t TO_LOCAL_WSCRIPT[] = {
        0x63, 0x21, 0x02, 0x12, 0xa1, 0x40, 0xcd, 0x0c,
        0x65, 0x39, 0xd0, 0x7c, 0xd0, 0x8d, 0xfe, 0x09,
        0x98, 0x4d, 0xec, 0x32, 0x51, 0xea, 0x80, 0x8b,
        0x89, 0x2e, 0xfe, 0xac, 0x3e, 0xde, 0x94, 0x02,
        0xbf, 0x2b, 0x19, 0x67, 0x02, 0x90, 0x00, 0xb2,
        0x75, 0x21, 0x03, 0xfd, 0x59, 0x60, 0x52, 0x8d,
        0xc1, 0x52, 0x01, 0x49, 0x52, 0xef, 0xdb, 0x70,
        0x2a, 0x88, 0xf7, 0x1e, 0x3c, 0x16, 0x53, 0xb2,
        0x31, 0x44, 0x31, 0x70, 0x1e, 0xc7, 0x7e, 0x57,
        0xfd, 0xe8, 0x3c, 0x68, 0xac,
    };
    ASSERT_EQ(0, memcmp(TO_LOCAL_WSCRIPT, ws_local_buf.buf, sizeof(TO_LOCAL_WSCRIPT)));
    ASSERT_EQ(sizeof(TO_LOCAL_WSCRIPT), ws_local_buf.len);


    //tx

    ln_tx_cmt_t lntx_commit;
    lntx_commit.fund.txid = TXID_FUND;
    lntx_commit.fund.txid_index = TXID_FUND_INDEX;
    lntx_commit.fund.satoshi = PTARM_MBTC2SATOSHI(100);
    lntx_commit.fund.p_script = &funding2of2;
    lntx_commit.local.satoshi = LN_MSAT2SATOSHI(MSAT_LOCAL);
    lntx_commit.local.p_script = &ws_local_buf;
    lntx_commit.remote.satoshi = LN_MSAT2SATOSHI(MSAT_REMOTE);
    lntx_commit.remote.pubkey = REMOTE_KEY;
    lntx_commit.obscured = obscured;
    lntx_commit.p_feeinfo = &feeinfo;
    lntx_commit.pp_htlcinfo = pp_htlcinfos;
    lntx_commit.htlcinfo_num = 5;
    ptarm_buf_t buf_sig_local;

    ret = ln_create_commit_tx(&tx, &buf_sig_local, &lntx_commit, true, &priv_data);
    ASSERT_TRUE(ret);

    const uint8_t LOCAL_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x27, 0x5b, 0x0c, 0x32,
        0x5a, 0x5e, 0x93, 0x55, 0x65, 0x0d, 0xc3, 0x0c,
        0x0e, 0xcc, 0xfb, 0xc7, 0xef, 0xb2, 0x39, 0x87,
        0xc2, 0x4b, 0x55, 0x6b, 0x9d, 0xfd, 0xd4, 0x0e,
        0xff, 0xca, 0x18, 0xd2, 0x02, 0x20, 0x6c, 0xac,
        0xeb, 0x2c, 0x06, 0x78, 0x36, 0xc5, 0x1f, 0x29,
        0x67, 0x40, 0xc7, 0xae, 0x80, 0x7f, 0xfc, 0xbf,
        0xbf, 0x1d, 0xd3, 0xa0, 0xd5, 0x6b, 0x6d, 0xe9,
        0xa5, 0xb2, 0x47, 0x98, 0x5f, 0x06, 0x01,
    };
    ASSERT_EQ(0, memcmp(LOCAL_SIGNATURE, buf_sig_local.buf, sizeof(LOCAL_SIGNATURE)));
    ASSERT_EQ(sizeof(LOCAL_SIGNATURE), buf_sig_local.len);

    const uint8_t REMOTE_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x4f, 0xd4, 0x92, 0x88,
        0x35, 0xdb, 0x1c, 0xcd, 0xfc, 0x40, 0xf5, 0xc7,
        0x8c, 0xe9, 0xbd, 0x65, 0x24, 0x9b, 0x16, 0x34,
        0x8d, 0xf8, 0x1f, 0x0c, 0x44, 0x32, 0x8d, 0xcd,
        0xef, 0xc9, 0x7d, 0x63, 0x02, 0x20, 0x19, 0x4d,
        0x38, 0x69, 0xc3, 0x8b, 0xc7, 0x32, 0xdd, 0x87,
        0xd1, 0x3d, 0x29, 0x58, 0x01, 0x5e, 0x2f, 0xc1,
        0x68, 0x29, 0xe7, 0x4c, 0xd4, 0x37, 0x7f, 0x84,
        0xd2, 0x15, 0xc0, 0xb7, 0x06, 0x06, 0x01,
    };
    ptarm_buf_t buf_sig_remote;
    ptarm_buf_alloccopy(&buf_sig_remote, REMOTE_SIGNATURE, sizeof(REMOTE_SIGNATURE));
    ret = set_vin_p2wsh_2of2(&tx, 0, key_fund_sort,
                &buf_sig_local,
                &buf_sig_remote,
                &funding2of2);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&buf_sig_local);
    ptarm_buf_free(&buf_sig_remote);

    //ptarm_print_tx(&tx);

    //TestVectorとのチェック
    const uint8_t COMMIT_TX[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xbe,
        0xf6, 0x7e, 0x4e, 0x2f, 0xb9, 0xdd, 0xee, 0xb3,
        0x46, 0x19, 0x73, 0xcd, 0x4c, 0x62, 0xab, 0xb3,
        0x50, 0x50, 0xb1, 0xad, 0xd7, 0x72, 0x99, 0x5b,
        0x82, 0x0b, 0x58, 0x4a, 0x48, 0x84, 0x89, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x38, 0xb0, 0x2b, 0x80,
        0x07, 0xe8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x52, 0xbf, 0xef, 0x04,
        0x79, 0xd7, 0xb2, 0x93, 0xc2, 0x7e, 0x0f, 0x1e,
        0xb2, 0x94, 0xbe, 0xa1, 0x54, 0xc6, 0x3a, 0x32,
        0x94, 0xef, 0x09, 0x2c, 0x19, 0xaf, 0x51, 0x40,
        0x9b, 0xce, 0x0e, 0x2a, 0xd0, 0x07, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x20, 0x40,
        0x3d, 0x39, 0x47, 0x47, 0xca, 0xe4, 0x2e, 0x98,
        0xff, 0x01, 0x73, 0x4a, 0xd5, 0xc0, 0x8f, 0x82,
        0xba, 0x12, 0x3d, 0x3d, 0x9a, 0x62, 0x0a, 0xbd,
        0xa8, 0x89, 0x89, 0x65, 0x1e, 0x2a, 0xb5, 0xd0,
        0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22,
        0x00, 0x20, 0x74, 0x8e, 0xba, 0x94, 0x4f, 0xed,
        0xc8, 0x82, 0x7f, 0x6b, 0x06, 0xbc, 0x44, 0x67,
        0x8f, 0x93, 0xc0, 0xf9, 0xe6, 0x07, 0x8b, 0x35,
        0xc6, 0x33, 0x1e, 0xd3, 0x1e, 0x75, 0xf8, 0xce,
        0x0c, 0x2d, 0xb8, 0x0b, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x22, 0x00, 0x20, 0xc2, 0x0b, 0x5d,
        0x1f, 0x85, 0x84, 0xfd, 0x90, 0x44, 0x3e, 0x7b,
        0x7b, 0x72, 0x01, 0x36, 0x17, 0x4f, 0xa4, 0xb9,
        0x33, 0x3c, 0x26, 0x1d, 0x04, 0xdb, 0xbd, 0x01,
        0x26, 0x35, 0xc0, 0xf4, 0x19, 0xa0, 0x0f, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x20,
        0x8c, 0x48, 0xd1, 0x51, 0x60, 0x39, 0x7c, 0x97,
        0x31, 0xdf, 0x9b, 0xc3, 0xb2, 0x36, 0x65, 0x6e,
        0xfb, 0x66, 0x65, 0xfb, 0xfe, 0x92, 0xb4, 0xa6,
        0x87, 0x8e, 0x88, 0xa4, 0x99, 0xf7, 0x41, 0xc4,
        0xc0, 0xc6, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x16, 0x00, 0x14, 0xcc, 0xf1, 0xaf, 0x2f, 0x2a,
        0xab, 0xee, 0x14, 0xbb, 0x40, 0xfa, 0x38, 0x51,
        0xab, 0x23, 0x01, 0xde, 0x84, 0x31, 0x10, 0xe0,
        0xa0, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22,
        0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f, 0x00, 0x64,
        0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d, 0x4e, 0x7d,
        0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1, 0x1a, 0x40,
        0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d, 0x6b, 0x7d,
        0xd8, 0x0e, 0x04, 0x00, 0x47, 0x30, 0x44, 0x02,
        0x20, 0x27, 0x5b, 0x0c, 0x32, 0x5a, 0x5e, 0x93,
        0x55, 0x65, 0x0d, 0xc3, 0x0c, 0x0e, 0xcc, 0xfb,
        0xc7, 0xef, 0xb2, 0x39, 0x87, 0xc2, 0x4b, 0x55,
        0x6b, 0x9d, 0xfd, 0xd4, 0x0e, 0xff, 0xca, 0x18,
        0xd2, 0x02, 0x20, 0x6c, 0xac, 0xeb, 0x2c, 0x06,
        0x78, 0x36, 0xc5, 0x1f, 0x29, 0x67, 0x40, 0xc7,
        0xae, 0x80, 0x7f, 0xfc, 0xbf, 0xbf, 0x1d, 0xd3,
        0xa0, 0xd5, 0x6b, 0x6d, 0xe9, 0xa5, 0xb2, 0x47,
        0x98, 0x5f, 0x06, 0x01, 0x47, 0x30, 0x44, 0x02,
        0x20, 0x4f, 0xd4, 0x92, 0x88, 0x35, 0xdb, 0x1c,
        0xcd, 0xfc, 0x40, 0xf5, 0xc7, 0x8c, 0xe9, 0xbd,
        0x65, 0x24, 0x9b, 0x16, 0x34, 0x8d, 0xf8, 0x1f,
        0x0c, 0x44, 0x32, 0x8d, 0xcd, 0xef, 0xc9, 0x7d,
        0x63, 0x02, 0x20, 0x19, 0x4d, 0x38, 0x69, 0xc3,
        0x8b, 0xc7, 0x32, 0xdd, 0x87, 0xd1, 0x3d, 0x29,
        0x58, 0x01, 0x5e, 0x2f, 0xc1, 0x68, 0x29, 0xe7,
        0x4c, 0xd4, 0x37, 0x7f, 0x84, 0xd2, 0x15, 0xc0,
        0xb7, 0x06, 0x06, 0x01, 0x47, 0x52, 0x21, 0x02,
        0x3d, 0xa0, 0x92, 0xf6, 0x98, 0x0e, 0x58, 0xd2,
        0xc0, 0x37, 0x17, 0x31, 0x80, 0xe9, 0xa4, 0x65,
        0x47, 0x60, 0x26, 0xee, 0x50, 0xf9, 0x66, 0x95,
        0x96, 0x3e, 0x8e, 0xfe, 0x43, 0x6f, 0x54, 0xeb,
        0x21, 0x03, 0x0e, 0x9f, 0x7b, 0x62, 0x3d, 0x2c,
        0xcc, 0x7c, 0x9b, 0xd4, 0x4d, 0x66, 0xd5, 0xce,
        0x21, 0xce, 0x50, 0x4c, 0x0a, 0xcf, 0x63, 0x85,
        0xa1, 0x32, 0xce, 0xc6, 0xd3, 0xc3, 0x9f, 0xa7,
        0x11, 0xc1, 0x52, 0xae, 0x3e, 0x19, 0x52, 0x20,
    };
    ptarm_buf_t tx_buf;

    ptarm_tx_create(&tx_buf, &tx);
    ASSERT_EQ(0, memcmp(COMMIT_TX, tx_buf.buf, sizeof(COMMIT_TX)));
    ASSERT_EQ(sizeof(COMMIT_TX), tx_buf.len);
    ret = ptarm_tx_txid(txid_commit, &tx);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&tx_buf);

    ptarm_buf_free(&ws_local_buf);
}


// name: commitment tx with all 5 htlcs untrimmed (minimum feerate)
//      HTLC-success Transaction
TEST_F(ln_bolt3_c, committx5untrim_success_to)
{
    ///////////////////////////////////////////////////////////
    const uint8_t REMOTE_SIG0[] = {
        0x30, 0x44, 0x02, 0x20, 0x6a, 0x6e, 0x59, 0xf1,
        0x87, 0x64, 0xa5, 0xbf, 0x8d, 0x4f, 0xa4, 0x5e,
        0xeb, 0xc5, 0x91, 0x56, 0x66, 0x89, 0x44, 0x12,
        0x29, 0xc9, 0x18, 0xb4, 0x80, 0xfb, 0x2a, 0xf8,
        0xcc, 0x6a, 0x4a, 0xeb, 0x02, 0x20, 0x52, 0x48,
        0xf2, 0x73, 0xbe, 0x44, 0x76, 0x84, 0xb3, 0x3e,
        0x3c, 0x8d, 0x1d, 0x85, 0xa8, 0xe0, 0xca, 0x9f,
        0xa0, 0xba, 0xe9, 0xae, 0x33, 0xf0, 0x52, 0x7a,
        0xda, 0x9c, 0x16, 0x29, 0x19, 0xa6, 0x01
    };
    const uint8_t REMOTE_SIG1[] = {
        0x30, 0x44, 0x02, 0x20, 0x1b, 0x63, 0xec, 0x80,
        0x77, 0x71, 0xba, 0xf4, 0xfd, 0xff, 0x52, 0x3c,
        0x64, 0x40, 0x80, 0xde, 0x17, 0xf1, 0xda, 0x47,
        0x89, 0x89, 0x30, 0x8a, 0xd1, 0x3a, 0x58, 0xb5,
        0x1d, 0xb9, 0x1d, 0x36, 0x02, 0x20, 0x56, 0x89,
        0x39, 0xd3, 0x8c, 0x9c, 0xe2, 0x95, 0xad, 0xba,
        0x15, 0x66, 0x5f, 0xa6, 0x8f, 0x51, 0xd9, 0x67,
        0xe8, 0xed, 0x14, 0xa0, 0x07, 0xb7, 0x51, 0x54,
        0x0a, 0x80, 0xb3, 0x25, 0xf2, 0x02, 0x01,
    };
    const uint8_t REMOTE_SIG2[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xd5, 0x27, 0x5b,
        0x36, 0x19, 0x95, 0x3c, 0xb0, 0xc3, 0xb5, 0xaa,
        0x57, 0x7f, 0x04, 0xbc, 0x51, 0x23, 0x80, 0xe6,
        0x0f, 0xa5, 0x51, 0x76, 0x2c, 0xe3, 0xd7, 0xa1,
        0xbb, 0x74, 0x01, 0xcf, 0xf9, 0x02, 0x20, 0x37,
        0x23, 0x7a, 0xb0, 0xda, 0xc3, 0xfe, 0x10, 0x0c,
        0xde, 0x09, 0x4e, 0x82, 0xe2, 0xbe, 0xd9, 0xba,
        0x0e, 0xd1, 0xbb, 0x40, 0x15, 0x4b, 0x48, 0xe5,
        0x6a, 0xa7, 0x0f, 0x25, 0x9e, 0x60, 0x8b, 0x01,
    };
    const uint8_t REMOTE_SIG3[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xda, 0xee, 0x18,
        0x08, 0xf9, 0x86, 0x1b, 0x6c, 0x3e, 0xcd, 0x14,
        0xf7, 0xb7, 0x07, 0xec, 0xa0, 0x2d, 0xd6, 0xbd,
        0xfc, 0x71, 0x4b, 0xa2, 0xf3, 0x3b, 0xc8, 0xcd,
        0xba, 0x50, 0x7b, 0xb1, 0x82, 0x02, 0x20, 0x26,
        0x65, 0x4b, 0xf8, 0x86, 0x3a, 0xf7, 0x7d, 0x74,
        0xf5, 0x1f, 0x4e, 0x0b, 0x62, 0xd4, 0x61, 0xa0,
        0x19, 0x56, 0x1b, 0xb1, 0x2a, 0xcb, 0x12, 0x0d,
        0x3f, 0x71, 0x95, 0xd1, 0x48, 0xa5, 0x54, 0x01,
    };
    const uint8_t REMOTE_SIG4[] = {
        0x30, 0x44, 0x02, 0x20, 0x7e, 0x04, 0x10, 0xe4,
        0x54, 0x54, 0xb0, 0x97, 0x8a, 0x62, 0x3f, 0x36,
        0xa1, 0x06, 0x26, 0xef, 0x17, 0xb2, 0x7d, 0x9a,
        0xd4, 0x4e, 0x27, 0x60, 0xf9, 0x8c, 0xfa, 0x3e,
        0xfb, 0x37, 0x92, 0x4f, 0x02, 0x20, 0x22, 0x0b,
        0xd8, 0xac, 0xd4, 0x3e, 0xca, 0xa9, 0x16, 0xa8,
        0x0b, 0xd4, 0xf9, 0x19, 0xc4, 0x95, 0xa2, 0xc5,
        0x89, 0x82, 0xce, 0x7c, 0x86, 0x25, 0x15, 0x3f,
        0x85, 0x96, 0x69, 0x2a, 0x80, 0x1d, 0x01,
    };
    const struct {
        const uint8_t *sig;
        size_t len;
    } REMOTE_SIGS[] = {
        { REMOTE_SIG0, sizeof(REMOTE_SIG0) },
        { REMOTE_SIG1, sizeof(REMOTE_SIG1) },
        { REMOTE_SIG2, sizeof(REMOTE_SIG2) },
        { REMOTE_SIG3, sizeof(REMOTE_SIG3) },
        { REMOTE_SIG4, sizeof(REMOTE_SIG4) },
    };

    const uint8_t HS0[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x81,
        0x54, 0xec, 0xcc, 0xf1, 0x1a, 0x5f, 0xb5, 0x6c,
        0x39, 0x65, 0x4c, 0x4d, 0xeb, 0x4d, 0x22, 0x96,
        0xf8, 0x3c, 0x69, 0x26, 0x82, 0x80, 0xb9, 0x4d,
        0x02, 0x13, 0x70, 0xc9, 0x4e, 0x21, 0x97, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xe8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x6a, 0x6e, 0x59, 0xf1, 0x87,
        0x64, 0xa5, 0xbf, 0x8d, 0x4f, 0xa4, 0x5e, 0xeb,
        0xc5, 0x91, 0x56, 0x66, 0x89, 0x44, 0x12, 0x29,
        0xc9, 0x18, 0xb4, 0x80, 0xfb, 0x2a, 0xf8, 0xcc,
        0x6a, 0x4a, 0xeb, 0x02, 0x20, 0x52, 0x48, 0xf2,
        0x73, 0xbe, 0x44, 0x76, 0x84, 0xb3, 0x3e, 0x3c,
        0x8d, 0x1d, 0x85, 0xa8, 0xe0, 0xca, 0x9f, 0xa0,
        0xba, 0xe9, 0xae, 0x33, 0xf0, 0x52, 0x7a, 0xda,
        0x9c, 0x16, 0x29, 0x19, 0xa6, 0x01, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x7c, 0xb3, 0x24, 0xfa, 0x0d,
        0xe8, 0x8f, 0x45, 0x2f, 0xfa, 0x93, 0x89, 0x67,
        0x81, 0x27, 0xeb, 0xcf, 0x4c, 0xab, 0xe1, 0xdd,
        0x84, 0x8b, 0x8e, 0x07, 0x6c, 0x1a, 0x19, 0x62,
        0xbf, 0x34, 0x72, 0x02, 0x20, 0x11, 0x6e, 0xd9,
        0x22, 0xb1, 0x23, 0x11, 0xbd, 0x60, 0x2d, 0x67,
        0xe6, 0x0d, 0x25, 0x29, 0x91, 0x7f, 0x21, 0xc5,
        0xb8, 0x2f, 0x25, 0xff, 0x65, 0x06, 0xc0, 0xf8,
        0x78, 0x86, 0xb4, 0xdf, 0xd5, 0x01, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8a,
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0xb8, 0xbc, 0xb0,
        0x7f, 0x63, 0x44, 0xb4, 0x2a, 0xb0, 0x42, 0x50,
        0xc8, 0x6a, 0x6e, 0x8b, 0x75, 0xd3, 0xfd, 0xbb,
        0xc6, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf4, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const uint8_t HS1[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x81,
        0x54, 0xec, 0xcc, 0xf1, 0x1a, 0x5f, 0xb5, 0x6c,
        0x39, 0x65, 0x4c, 0x4d, 0xeb, 0x4d, 0x22, 0x96,
        0xf8, 0x3c, 0x69, 0x26, 0x82, 0x80, 0xb9, 0x4d,
        0x02, 0x13, 0x70, 0xc9, 0x4e, 0x21, 0x97, 0x02,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xd0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x1b, 0x63, 0xec, 0x80, 0x77,
        0x71, 0xba, 0xf4, 0xfd, 0xff, 0x52, 0x3c, 0x64,
        0x40, 0x80, 0xde, 0x17, 0xf1, 0xda, 0x47, 0x89,
        0x89, 0x30, 0x8a, 0xd1, 0x3a, 0x58, 0xb5, 0x1d,
        0xb9, 0x1d, 0x36, 0x02, 0x20, 0x56, 0x89, 0x39,
        0xd3, 0x8c, 0x9c, 0xe2, 0x95, 0xad, 0xba, 0x15,
        0x66, 0x5f, 0xa6, 0x8f, 0x51, 0xd9, 0x67, 0xe8,
        0xed, 0x14, 0xa0, 0x07, 0xb7, 0x51, 0x54, 0x0a,
        0x80, 0xb3, 0x25, 0xf2, 0x02, 0x01, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xde, 0xf3, 0x89, 0xde,
        0xab, 0x09, 0xce, 0xe6, 0x9e, 0xaa, 0x1e, 0xc1,
        0x4d, 0x94, 0x28, 0x77, 0x0e, 0x45, 0xbc, 0xbe,
        0x9f, 0xeb, 0x46, 0x46, 0x8e, 0xcf, 0x48, 0x13,
        0x71, 0x16, 0x5c, 0x2f, 0x02, 0x20, 0x15, 0xd2,
        0xe3, 0xc4, 0x66, 0x00, 0xb2, 0xeb, 0xba, 0x8d,
        0xcc, 0x89, 0x97, 0x68, 0x87, 0x4c, 0xc6, 0x85,
        0x1f, 0xd1, 0xec, 0xb3, 0xff, 0xfd, 0x15, 0xdb,
        0x1c, 0xc3, 0xde, 0x7e, 0x10, 0xda, 0x01, 0x20,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x8a, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b,
        0x2e, 0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb,
        0x7b, 0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc,
        0xe2, 0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d,
        0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d,
        0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97,
        0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e,
        0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52,
        0xae, 0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75,
        0xac, 0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const uint8_t HS2[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x81,
        0x54, 0xec, 0xcc, 0xf1, 0x1a, 0x5f, 0xb5, 0x6c,
        0x39, 0x65, 0x4c, 0x4d, 0xeb, 0x4d, 0x22, 0x96,
        0xf8, 0x3c, 0x69, 0x26, 0x82, 0x80, 0xb9, 0x4d,
        0x02, 0x13, 0x70, 0xc9, 0x4e, 0x21, 0x97, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xd0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xd5, 0x27, 0x5b, 0x36,
        0x19, 0x95, 0x3c, 0xb0, 0xc3, 0xb5, 0xaa, 0x57,
        0x7f, 0x04, 0xbc, 0x51, 0x23, 0x80, 0xe6, 0x0f,
        0xa5, 0x51, 0x76, 0x2c, 0xe3, 0xd7, 0xa1, 0xbb,
        0x74, 0x01, 0xcf, 0xf9, 0x02, 0x20, 0x37, 0x23,
        0x7a, 0xb0, 0xda, 0xc3, 0xfe, 0x10, 0x0c, 0xde,
        0x09, 0x4e, 0x82, 0xe2, 0xbe, 0xd9, 0xba, 0x0e,
        0xd1, 0xbb, 0x40, 0x15, 0x4b, 0x48, 0xe5, 0x6a,
        0xa7, 0x0f, 0x25, 0x9e, 0x60, 0x8b, 0x01, 0x48,
        0x30, 0x45, 0x02, 0x21, 0x00, 0xc8, 0x91, 0x72,
        0x09, 0x95, 0x07, 0xff, 0x50, 0xf4, 0xc9, 0x25,
        0xe6, 0xc5, 0x15, 0x0e, 0x87, 0x1f, 0xb6, 0xe8,
        0x3d, 0xd7, 0x3f, 0xf9, 0xfb, 0xb7, 0x2f, 0x6c,
        0xe8, 0x29, 0xa9, 0x63, 0x3f, 0x02, 0x20, 0x3a,
        0x63, 0x82, 0x1d, 0x91, 0x62, 0xe9, 0x9f, 0x9b,
        0xe7, 0x12, 0xa6, 0x8f, 0x9e, 0x58, 0x94, 0x83,
        0x99, 0x4f, 0xea, 0xe2, 0x66, 0x1e, 0x45, 0x46,
        0xcd, 0x5b, 0x6c, 0xec, 0x00, 0x7b, 0xe5, 0x01,
        0x00, 0x85, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f,
        0x72, 0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98,
        0x6c, 0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7,
        0xb5, 0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94,
        0x85, 0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12,
        0x2c, 0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a,
        0x21, 0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26,
        0xd6, 0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c,
        0x82, 0x01, 0x20, 0x87, 0x64, 0x75, 0x52, 0x7c,
        0x21, 0x03, 0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63,
        0x84, 0xf8, 0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c,
        0x5e, 0x57, 0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda,
        0xca, 0x81, 0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06,
        0x39, 0xe7, 0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4,
        0x3e, 0x1b, 0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f,
        0x7c, 0xd9, 0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3,
        0xa9, 0xb5, 0xd1, 0x88, 0xac, 0x68, 0x68, 0xf6,
        0x01, 0x00, 0x00,
    };
    const uint8_t HS3[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x81,
        0x54, 0xec, 0xcc, 0xf1, 0x1a, 0x5f, 0xb5, 0x6c,
        0x39, 0x65, 0x4c, 0x4d, 0xeb, 0x4d, 0x22, 0x96,
        0xf8, 0x3c, 0x69, 0x26, 0x82, 0x80, 0xb9, 0x4d,
        0x02, 0x13, 0x70, 0xc9, 0x4e, 0x21, 0x97, 0x03,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xb8, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xda, 0xee, 0x18, 0x08,
        0xf9, 0x86, 0x1b, 0x6c, 0x3e, 0xcd, 0x14, 0xf7,
        0xb7, 0x07, 0xec, 0xa0, 0x2d, 0xd6, 0xbd, 0xfc,
        0x71, 0x4b, 0xa2, 0xf3, 0x3b, 0xc8, 0xcd, 0xba,
        0x50, 0x7b, 0xb1, 0x82, 0x02, 0x20, 0x26, 0x65,
        0x4b, 0xf8, 0x86, 0x3a, 0xf7, 0x7d, 0x74, 0xf5,
        0x1f, 0x4e, 0x0b, 0x62, 0xd4, 0x61, 0xa0, 0x19,
        0x56, 0x1b, 0xb1, 0x2a, 0xcb, 0x12, 0x0d, 0x3f,
        0x71, 0x95, 0xd1, 0x48, 0xa5, 0x54, 0x01, 0x47,
        0x30, 0x44, 0x02, 0x20, 0x64, 0x3a, 0xac, 0xb1,
        0x9b, 0xbb, 0x72, 0xbd, 0x2b, 0x63, 0x5b, 0xc3,
        0xf7, 0x37, 0x54, 0x81, 0xf5, 0x98, 0x1b, 0xac,
        0xe7, 0x8c, 0xdd, 0x83, 0x19, 0xb2, 0x98, 0x8f,
        0xfc, 0xc6, 0x70, 0x42, 0x02, 0x20, 0x3d, 0x27,
        0x78, 0x4e, 0xc8, 0xad, 0x51, 0xed, 0x3b, 0xd5,
        0x17, 0xa0, 0x55, 0x25, 0xa5, 0x13, 0x9b, 0xb0,
        0xb7, 0x55, 0xdd, 0x71, 0x9e, 0x00, 0x54, 0x33,
        0x2d, 0x18, 0x6a, 0xc0, 0x87, 0x27, 0x01, 0x00,
        0x85, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21,
        0x03, 0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84,
        0xf8, 0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e,
        0x57, 0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca,
        0x81, 0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39,
        0xe7, 0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48,
        0x6f, 0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39,
        0xe2, 0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0,
        0x9d, 0x5b, 0x88, 0xac, 0x68, 0x68, 0xf7, 0x01,
        0x00, 0x00,
    };
    const uint8_t HS4[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x81,
        0x54, 0xec, 0xcc, 0xf1, 0x1a, 0x5f, 0xb5, 0x6c,
        0x39, 0x65, 0x4c, 0x4d, 0xeb, 0x4d, 0x22, 0x96,
        0xf8, 0x3c, 0x69, 0x26, 0x82, 0x80, 0xb9, 0x4d,
        0x02, 0x13, 0x70, 0xc9, 0x4e, 0x21, 0x97, 0x04,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xa0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x7e, 0x04, 0x10, 0xe4, 0x54,
        0x54, 0xb0, 0x97, 0x8a, 0x62, 0x3f, 0x36, 0xa1,
        0x06, 0x26, 0xef, 0x17, 0xb2, 0x7d, 0x9a, 0xd4,
        0x4e, 0x27, 0x60, 0xf9, 0x8c, 0xfa, 0x3e, 0xfb,
        0x37, 0x92, 0x4f, 0x02, 0x20, 0x22, 0x0b, 0xd8,
        0xac, 0xd4, 0x3e, 0xca, 0xa9, 0x16, 0xa8, 0x0b,
        0xd4, 0xf9, 0x19, 0xc4, 0x95, 0xa2, 0xc5, 0x89,
        0x82, 0xce, 0x7c, 0x86, 0x25, 0x15, 0x3f, 0x85,
        0x96, 0x69, 0x2a, 0x80, 0x1d, 0x01, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x54, 0x9e, 0x80, 0xb4, 0x49,
        0x68, 0x03, 0xcb, 0xc4, 0xa1, 0xd0, 0x9d, 0x46,
        0xdf, 0x50, 0x10, 0x9f, 0x54, 0x6d, 0x43, 0xfb,
        0xbf, 0x86, 0xcd, 0x90, 0xb1, 0x74, 0xb1, 0x48,
        0x4a, 0xcd, 0x54, 0x02, 0x20, 0x5f, 0x12, 0xa4,
        0xf9, 0x95, 0xcb, 0x9b, 0xde, 0xd5, 0x97, 0xea,
        0xbf, 0xee, 0x19, 0x5a, 0x28, 0x59, 0x86, 0xaa,
        0x6d, 0x93, 0xae, 0x5b, 0xb7, 0x25, 0x07, 0xeb,
        0xc6, 0xa4, 0xe2, 0x34, 0x9e, 0x01, 0x20, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x8a,
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc, 0x1a,
        0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d, 0x23,
        0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27, 0x43,
        0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const struct {
        const uint8_t *tx;
        size_t len;
    } HTLC_TX[] = {
        { HS0, sizeof(HS0) },
        { HS1, sizeof(HS1) },
        { HS2, sizeof(HS2) },
        { HS3, sizeof(HS3) },
        { HS4, sizeof(HS4) },
    };
    ///////////////////////////////////////////////////////////


    bool ret;
    int index;


    //各HTLCのsuccess transaction作成
    ptarm_tx_t tx2;

    ptarm_buf_t ws_buf;
    ln_create_script_success(&ws_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);

    //どのHTLCxがVOUTにいるか(ない場合は-1)
    //どのVOUTがどのHTLCなのかは、どうやって見つけるべきなのだろう？
    //                    HTLC0     HTLC1       HTLC2       HTLC3       HTLC4
    const int VOUTS[] = { 0,        2,          1,          3,          4 };

    ptarm_buf_t local_sig = PTARM_BUF_INIT;
    for (int lp = 0; lp < 5; lp++) {
        uint64_t fee = (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? feeinfo.htlc_timeout : feeinfo.htlc_success;
        index = VOUTS[lp];
        if ((index >= 0) && (tx.vout[index].value >= feeinfo.dust_limit_satoshi + fee)) {
            ptarm_tx_init(&tx2);
            ln_create_htlc_tx(&tx2, tx.vout[index].value - fee, &ws_buf, htlcinfos[lp].type, htlcinfos[lp].expiry, txid_commit, index);

            const ptarm_buf_t remote_sig = { (uint8_t *)REMOTE_SIGS[lp].sig, (uint16_t)REMOTE_SIGS[lp].len };
//            printf("[%d]%s\n", lp, (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? "offered" : "received");
            ret = ln_sign_htlc_tx(&tx2,
                        &local_sig,
                        tx.vout[index].value,
                        &keys_local_commit,
                        &remote_sig,
                        PREIMAGES[lp],
                        &htlcinfos[lp].script,
                        HTLCSIGN_TO_SUCCESS);
            ASSERT_TRUE(ret);
            ptarm_buf_t hs;
            ptarm_tx_create(&hs, &tx2);
            //ptarm_print_tx(&tx2);
            //ptarm_print_rawtx(HTLC_TX[lp].tx, HTLC_TX[lp].len);
            ASSERT_EQ(0, memcmp(HTLC_TX[lp].tx, hs.buf, HTLC_TX[lp].len));
            ASSERT_EQ(HTLC_TX[lp].len, hs.len);
            ptarm_buf_free(&local_sig);
            ptarm_buf_free(&hs);
            ptarm_tx_free(&tx2);
        }
    }

    for (int lp = 0; lp < 5; lp++) {
        ptarm_buf_free((ptarm_buf_t *)&htlcinfos[lp].script);
    }
    ptarm_buf_free(&ws_buf);
    ptarm_tx_free(&tx2);

    ptarm_tx_free(&tx);
}


// name: commitment tx with 7 outputs untrimmed (maximum feerate)
//      Commitment Transaction
TEST_F(ln_bolt3_c, committx7max_commit)
{
    ptarm_tx_init(&tx);

    bool ret;

    //amounts
    const uint64_t MSAT_LOCAL = 6988000000LL;
    const uint64_t MSAT_REMOTE = 3000000000LL;


    feeinfo.feerate_per_kw = 647;
    uint64_t fee_act = ln_fee_calc(&feeinfo, (const ln_htlcinfo_t **)pp_htlcinfos, 5);

//    printf("base fee_committx=%llu\n", (unsigned long long)feeinfo.commit);
//    printf("actual fee_committx=%llu\n", (unsigned long long)fee_act);
//    printf("fee success=%d\n", (int)feeinfo.htlc_success);
//    printf("fee timeout=%d\n", (int)feeinfo.htlc_timeout);
    ASSERT_EQ(454, feeinfo.htlc_success);
    ASSERT_EQ(428, feeinfo.htlc_timeout);
    ASSERT_EQ(1024, feeinfo.commit);
    ASSERT_EQ(1024, fee_act);


    ///////////////////////////////////////
    const uint8_t WS_HTLC0[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0xb8, 0xbc, 0xb0,
        0x7f, 0x63, 0x44, 0xb4, 0x2a, 0xb0, 0x42, 0x50,
        0xc8, 0x6a, 0x6e, 0x8b, 0x75, 0xd3, 0xfd, 0xbb,
        0xc6, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf4, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC1[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b, 0x2e,
        0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb, 0x7b,
        0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc, 0xe2,
        0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC2[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e, 0x1b,
        0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c, 0xd9,
        0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9, 0xb5,
        0xd1, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC3[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48, 0x6f,
        0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39, 0xe2,
        0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0, 0x9d,
        0x5b, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC4[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc, 0x1a,
        0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d, 0x23,
        0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27, 0x43,
        0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };

    ///////////////////////////////////////

    const struct {
        const uint8_t *ws;
        size_t len;
    } SCRIPTS[] = {
        { WS_HTLC0, sizeof(WS_HTLC0) },
        { WS_HTLC1, sizeof(WS_HTLC1) },
        { WS_HTLC2, sizeof(WS_HTLC2) },
        { WS_HTLC3, sizeof(WS_HTLC3) },
        { WS_HTLC4, sizeof(WS_HTLC4) }
    };

    for (int lp = 0; lp < 5; lp++) {
        ln_create_htlcinfo(&pp_htlcinfos[lp]->script, pp_htlcinfos[lp]->type, LOCAL_KEY, LOCAL_REVO_KEY, REMOTE_KEY, pp_htlcinfos[lp]->preimage_hash, pp_htlcinfos[lp]->expiry);

        ASSERT_EQ(0, memcmp(SCRIPTS[lp].ws, htlcinfos[lp].script.buf, SCRIPTS[lp].len));
        ASSERT_EQ(SCRIPTS[lp].len, htlcinfos[lp].script.len);
    }


    //to-local wscript
    ptarm_buf_t ws_local_buf;

    ln_create_script_local(&ws_local_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);
//    dumpbin(ws_local_buf.buf, ws_local_buf.len);
//    printf("-[to-local]---------------------\n");
//    ptarm_print_script(ws_local_buf.buf, ws_local_buf.len);
//    printf("----------------------: %d\n", ws_local_buf.len);
    const uint8_t TO_LOCAL_WSCRIPT[] = {
        0x63, 0x21, 0x02, 0x12, 0xa1, 0x40, 0xcd, 0x0c,
        0x65, 0x39, 0xd0, 0x7c, 0xd0, 0x8d, 0xfe, 0x09,
        0x98, 0x4d, 0xec, 0x32, 0x51, 0xea, 0x80, 0x8b,
        0x89, 0x2e, 0xfe, 0xac, 0x3e, 0xde, 0x94, 0x02,
        0xbf, 0x2b, 0x19, 0x67, 0x02, 0x90, 0x00, 0xb2,
        0x75, 0x21, 0x03, 0xfd, 0x59, 0x60, 0x52, 0x8d,
        0xc1, 0x52, 0x01, 0x49, 0x52, 0xef, 0xdb, 0x70,
        0x2a, 0x88, 0xf7, 0x1e, 0x3c, 0x16, 0x53, 0xb2,
        0x31, 0x44, 0x31, 0x70, 0x1e, 0xc7, 0x7e, 0x57,
        0xfd, 0xe8, 0x3c, 0x68, 0xac,
    };
    ASSERT_EQ(0, memcmp(TO_LOCAL_WSCRIPT, ws_local_buf.buf, sizeof(TO_LOCAL_WSCRIPT)));
    ASSERT_EQ(sizeof(TO_LOCAL_WSCRIPT), ws_local_buf.len);


    //tx

    ln_tx_cmt_t lntx_commit;
    lntx_commit.fund.txid = TXID_FUND;
    lntx_commit.fund.txid_index = TXID_FUND_INDEX;
    lntx_commit.fund.satoshi = PTARM_MBTC2SATOSHI(100);
    lntx_commit.fund.p_script = &funding2of2;
    lntx_commit.local.satoshi = LN_MSAT2SATOSHI(MSAT_LOCAL);
    lntx_commit.local.p_script = &ws_local_buf;
    lntx_commit.remote.satoshi = LN_MSAT2SATOSHI(MSAT_REMOTE);
    lntx_commit.remote.pubkey = REMOTE_KEY;
    lntx_commit.obscured = obscured;
    lntx_commit.p_feeinfo = &feeinfo;
    lntx_commit.pp_htlcinfo = pp_htlcinfos;
    lntx_commit.htlcinfo_num = 5;
    ptarm_buf_t buf_sig_local;

    ret = ln_create_commit_tx(&tx, &buf_sig_local, &lntx_commit, true, &priv_data);
    ASSERT_TRUE(ret);

    const uint8_t LOCAL_SIGNATURE[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0x94, 0xbf, 0xd8,
        0xf5, 0x57, 0x2a, 0xc0, 0x15, 0x7e, 0xc7, 0x6a,
        0x95, 0x51, 0xb6, 0xc5, 0x21, 0x6a, 0x45, 0x38,
        0xc0, 0x7c, 0xd1, 0x3a, 0x51, 0xaf, 0x4a, 0x54,
        0xcb, 0x26, 0xfa, 0x14, 0x32, 0x02, 0x20, 0x76,
        0x8e, 0xfc, 0xe8, 0xce, 0x6f, 0x4a, 0x5e, 0xfa,
        0xc8, 0x75, 0x14, 0x2f, 0xf1, 0x92, 0x37, 0xc0,
        0x11, 0x34, 0x36, 0x70, 0xad, 0xf9, 0xc7, 0xac,
        0x69, 0x70, 0x4a, 0x12, 0x0d, 0x11, 0x63, 0x01,
    };
    ASSERT_EQ(sizeof(LOCAL_SIGNATURE), buf_sig_local.len);
    ASSERT_EQ(0, memcmp(LOCAL_SIGNATURE, buf_sig_local.buf, sizeof(LOCAL_SIGNATURE)));

    const uint8_t REMOTE_SIGNATURE[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xa5, 0xc0, 0x13,
        0x83, 0xd3, 0xec, 0x64, 0x6d, 0x97, 0xe4, 0x0f,
        0x44, 0x31, 0x8d, 0x49, 0xde, 0xf8, 0x17, 0xfc,
        0xd6, 0x1a, 0x0e, 0xf1, 0x80, 0x08, 0xa6, 0x65,
        0xb3, 0xe1, 0x51, 0x78, 0x55, 0x02, 0x20, 0x3e,
        0x64, 0x8e, 0xfd, 0xdd, 0x58, 0x38, 0x98, 0x1e,
        0xf5, 0x5e, 0xc9, 0x54, 0xbe, 0x69, 0xc4, 0xa6,
        0x52, 0xd0, 0x21, 0xe6, 0x08, 0x1a, 0x10, 0x0d,
        0x03, 0x4d, 0xe3, 0x66, 0x81, 0x5e, 0x9b, 0x01,
    };
    ptarm_buf_t buf_sig_remote;
    ptarm_buf_alloccopy(&buf_sig_remote, REMOTE_SIGNATURE, sizeof(REMOTE_SIGNATURE));
    ret = set_vin_p2wsh_2of2(&tx, 0, key_fund_sort,
                &buf_sig_local,
                &buf_sig_remote,
                &funding2of2);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&buf_sig_local);
    ptarm_buf_free(&buf_sig_remote);

    //ptarm_print_tx(&tx);

    //TestVectorとのチェック
    const uint8_t COMMIT_TX[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xbe,
        0xf6, 0x7e, 0x4e, 0x2f, 0xb9, 0xdd, 0xee, 0xb3,
        0x46, 0x19, 0x73, 0xcd, 0x4c, 0x62, 0xab, 0xb3,
        0x50, 0x50, 0xb1, 0xad, 0xd7, 0x72, 0x99, 0x5b,
        0x82, 0x0b, 0x58, 0x4a, 0x48, 0x84, 0x89, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x38, 0xb0, 0x2b, 0x80,
        0x07, 0xe8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x52, 0xbf, 0xef, 0x04,
        0x79, 0xd7, 0xb2, 0x93, 0xc2, 0x7e, 0x0f, 0x1e,
        0xb2, 0x94, 0xbe, 0xa1, 0x54, 0xc6, 0x3a, 0x32,
        0x94, 0xef, 0x09, 0x2c, 0x19, 0xaf, 0x51, 0x40,
        0x9b, 0xce, 0x0e, 0x2a, 0xd0, 0x07, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x20, 0x40,
        0x3d, 0x39, 0x47, 0x47, 0xca, 0xe4, 0x2e, 0x98,
        0xff, 0x01, 0x73, 0x4a, 0xd5, 0xc0, 0x8f, 0x82,
        0xba, 0x12, 0x3d, 0x3d, 0x9a, 0x62, 0x0a, 0xbd,
        0xa8, 0x89, 0x89, 0x65, 0x1e, 0x2a, 0xb5, 0xd0,
        0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22,
        0x00, 0x20, 0x74, 0x8e, 0xba, 0x94, 0x4f, 0xed,
        0xc8, 0x82, 0x7f, 0x6b, 0x06, 0xbc, 0x44, 0x67,
        0x8f, 0x93, 0xc0, 0xf9, 0xe6, 0x07, 0x8b, 0x35,
        0xc6, 0x33, 0x1e, 0xd3, 0x1e, 0x75, 0xf8, 0xce,
        0x0c, 0x2d, 0xb8, 0x0b, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x22, 0x00, 0x20, 0xc2, 0x0b, 0x5d,
        0x1f, 0x85, 0x84, 0xfd, 0x90, 0x44, 0x3e, 0x7b,
        0x7b, 0x72, 0x01, 0x36, 0x17, 0x4f, 0xa4, 0xb9,
        0x33, 0x3c, 0x26, 0x1d, 0x04, 0xdb, 0xbd, 0x01,
        0x26, 0x35, 0xc0, 0xf4, 0x19, 0xa0, 0x0f, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x20,
        0x8c, 0x48, 0xd1, 0x51, 0x60, 0x39, 0x7c, 0x97,
        0x31, 0xdf, 0x9b, 0xc3, 0xb2, 0x36, 0x65, 0x6e,
        0xfb, 0x66, 0x65, 0xfb, 0xfe, 0x92, 0xb4, 0xa6,
        0x87, 0x8e, 0x88, 0xa4, 0x99, 0xf7, 0x41, 0xc4,
        0xc0, 0xc6, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x16, 0x00, 0x14, 0xcc, 0xf1, 0xaf, 0x2f, 0x2a,
        0xab, 0xee, 0x14, 0xbb, 0x40, 0xfa, 0x38, 0x51,
        0xab, 0x23, 0x01, 0xde, 0x84, 0x31, 0x10, 0xe0,
        0x9c, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22,
        0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f, 0x00, 0x64,
        0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d, 0x4e, 0x7d,
        0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1, 0x1a, 0x40,
        0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d, 0x6b, 0x7d,
        0xd8, 0x0e, 0x04, 0x00, 0x48, 0x30, 0x45, 0x02,
        0x21, 0x00, 0x94, 0xbf, 0xd8, 0xf5, 0x57, 0x2a,
        0xc0, 0x15, 0x7e, 0xc7, 0x6a, 0x95, 0x51, 0xb6,
        0xc5, 0x21, 0x6a, 0x45, 0x38, 0xc0, 0x7c, 0xd1,
        0x3a, 0x51, 0xaf, 0x4a, 0x54, 0xcb, 0x26, 0xfa,
        0x14, 0x32, 0x02, 0x20, 0x76, 0x8e, 0xfc, 0xe8,
        0xce, 0x6f, 0x4a, 0x5e, 0xfa, 0xc8, 0x75, 0x14,
        0x2f, 0xf1, 0x92, 0x37, 0xc0, 0x11, 0x34, 0x36,
        0x70, 0xad, 0xf9, 0xc7, 0xac, 0x69, 0x70, 0x4a,
        0x12, 0x0d, 0x11, 0x63, 0x01, 0x48, 0x30, 0x45,
        0x02, 0x21, 0x00, 0xa5, 0xc0, 0x13, 0x83, 0xd3,
        0xec, 0x64, 0x6d, 0x97, 0xe4, 0x0f, 0x44, 0x31,
        0x8d, 0x49, 0xde, 0xf8, 0x17, 0xfc, 0xd6, 0x1a,
        0x0e, 0xf1, 0x80, 0x08, 0xa6, 0x65, 0xb3, 0xe1,
        0x51, 0x78, 0x55, 0x02, 0x20, 0x3e, 0x64, 0x8e,
        0xfd, 0xdd, 0x58, 0x38, 0x98, 0x1e, 0xf5, 0x5e,
        0xc9, 0x54, 0xbe, 0x69, 0xc4, 0xa6, 0x52, 0xd0,
        0x21, 0xe6, 0x08, 0x1a, 0x10, 0x0d, 0x03, 0x4d,
        0xe3, 0x66, 0x81, 0x5e, 0x9b, 0x01, 0x47, 0x52,
        0x21, 0x02, 0x3d, 0xa0, 0x92, 0xf6, 0x98, 0x0e,
        0x58, 0xd2, 0xc0, 0x37, 0x17, 0x31, 0x80, 0xe9,
        0xa4, 0x65, 0x47, 0x60, 0x26, 0xee, 0x50, 0xf9,
        0x66, 0x95, 0x96, 0x3e, 0x8e, 0xfe, 0x43, 0x6f,
        0x54, 0xeb, 0x21, 0x03, 0x0e, 0x9f, 0x7b, 0x62,
        0x3d, 0x2c, 0xcc, 0x7c, 0x9b, 0xd4, 0x4d, 0x66,
        0xd5, 0xce, 0x21, 0xce, 0x50, 0x4c, 0x0a, 0xcf,
        0x63, 0x85, 0xa1, 0x32, 0xce, 0xc6, 0xd3, 0xc3,
        0x9f, 0xa7, 0x11, 0xc1, 0x52, 0xae, 0x3e, 0x19,
        0x52, 0x20,
    };
    //ptarm_print_rawtx(COMMIT_TX, sizeof(COMMIT_TX));
    ptarm_buf_t tx_buf;

    ptarm_tx_create(&tx_buf, &tx);
    ASSERT_EQ(0, memcmp(COMMIT_TX, tx_buf.buf, sizeof(COMMIT_TX)));
    ASSERT_EQ(sizeof(COMMIT_TX), tx_buf.len);
    ret = ptarm_tx_txid(txid_commit, &tx);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&tx_buf);

    ptarm_buf_free(&ws_local_buf);
}


// name: commitment tx with 7 outputs untrimmed (maximum feerate)
//      HTLC-success Transaction
TEST_F(ln_bolt3_c, committx7max_success_to)
{
    ///////////////////////////////////////////////////////////
    const uint8_t REMOTE_SIG0[] = {
        0x30, 0x44, 0x02, 0x20, 0x38, 0x5a, 0x5a, 0xfe,
        0x75, 0x63, 0x2f, 0x50, 0x12, 0x8c, 0xbb, 0x02,
        0x9e, 0xe9, 0x5c, 0x80, 0x15, 0x6b, 0x5b, 0x47,
        0x44, 0xbe, 0xdd, 0xc7, 0x29, 0xad, 0x33, 0x9c,
        0x9c, 0xa4, 0x32, 0xc8, 0x02, 0x20, 0x2b, 0xa5,
        0xf4, 0x85, 0x50, 0xca, 0xd3, 0x37, 0x9a, 0xc7,
        0x5b, 0x9b, 0x4f, 0xed, 0xb8, 0x6a, 0x35, 0xba,
        0xa6, 0x94, 0x7f, 0x16, 0xba, 0x50, 0x37, 0xfb,
        0x8b, 0x11, 0xab, 0x34, 0x37, 0x40, 0x01,
    };
    const uint8_t REMOTE_SIG1[] = {
        0x30, 0x44, 0x02, 0x20, 0x6a, 0x40, 0x1b, 0x29,
        0xa0, 0xdf, 0xf0, 0xd1, 0x8e, 0xc9, 0x03, 0x50,
        0x2c, 0x13, 0xd8, 0x3e, 0x7e, 0xc0, 0x19, 0x45,
        0x01, 0x13, 0xf4, 0xa7, 0x65, 0x5a, 0x4c, 0xe4,
        0x0d, 0x1f, 0x65, 0xba, 0x02, 0x20, 0x21, 0x77,
        0x23, 0xa0, 0x84, 0xe7, 0x27, 0xb6, 0xca, 0x0c,
        0xc8, 0xb6, 0xc6, 0x9c, 0x01, 0x4a, 0x7e, 0x4a,
        0x01, 0xfc, 0xdc, 0xba, 0x3e, 0x39, 0x93, 0xf4,
        0x62, 0xa3, 0xc5, 0x74, 0xd8, 0x33, 0x01,
    };
    const uint8_t REMOTE_SIG2[] = {
        0x30, 0x44, 0x02, 0x20, 0x7c, 0xeb, 0x66, 0x78,
        0xd4, 0xdb, 0x33, 0xd2, 0x40, 0x1f, 0xdc, 0x40,
        0x99, 0x59, 0xe5, 0x7c, 0x16, 0xa6, 0xcb, 0x97,
        0xa3, 0x02, 0x61, 0xd9, 0xc6, 0x1f, 0x29, 0xb8,
        0xc5, 0x8d, 0x34, 0xb9, 0x02, 0x20, 0x08, 0x4b,
        0x4a, 0x17, 0xb4, 0xca, 0x0e, 0x86, 0xf2, 0xd7,
        0x98, 0xb3, 0x69, 0x8c, 0xa5, 0x2d, 0xe5, 0x62,
        0x1f, 0x2c, 0xe8, 0x6f, 0x80, 0xbe, 0xd7, 0x9a,
        0xfa, 0x66, 0x87, 0x45, 0x11, 0xb0, 0x01,
    };
    const uint8_t REMOTE_SIG3[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0x9b, 0x1c, 0x98,
        0x7b, 0xa5, 0x99, 0xee, 0x3b, 0xde, 0x1d, 0xbc,
        0xa7, 0x76, 0xb8, 0x54, 0x81, 0xd7, 0x0a, 0x78,
        0xb6, 0x81, 0xa8, 0xd8, 0x42, 0x06, 0x72, 0x3e,
        0x27, 0x95, 0xc7, 0xca, 0xc0, 0x02, 0x20, 0x7a,
        0xac, 0x84, 0xad, 0x91, 0x0f, 0x85, 0x98, 0xc4,
        0xd1, 0xc0, 0xea, 0x2e, 0x33, 0x99, 0xcf, 0x66,
        0x27, 0xa4, 0xe3, 0xe9, 0x01, 0x31, 0x31, 0x5b,
        0xc9, 0xf0, 0x38, 0x45, 0x1c, 0xe3, 0x9d, 0x01,
    };
    const uint8_t REMOTE_SIG4[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xcc, 0x28, 0x03,
        0x0b, 0x59, 0xf0, 0x91, 0x4f, 0x45, 0xb8, 0x4c,
        0xaa, 0x98, 0x3b, 0x6f, 0x8e, 0xff, 0xa9, 0x00,
        0xc9, 0x52, 0x31, 0x07, 0x08, 0xc2, 0xb5, 0xb0,
        0x07, 0x81, 0x11, 0x70, 0x22, 0x02, 0x20, 0x27,
        0xba, 0x2c, 0xcd, 0xf9, 0x4d, 0x03, 0xc6, 0xd4,
        0x8b, 0x32, 0x7f, 0x18, 0x3f, 0x6e, 0x28, 0xc8,
        0xa2, 0x14, 0xd0, 0x89, 0xb9, 0x22, 0x7f, 0x94,
        0xac, 0x4f, 0x85, 0x31, 0x52, 0x74, 0xf0, 0x01,
    };
    const struct {
        const uint8_t *sig;
        size_t len;
    } REMOTE_SIGS[] = {
        { REMOTE_SIG0, sizeof(REMOTE_SIG0) },
        { REMOTE_SIG1, sizeof(REMOTE_SIG1) },
        { REMOTE_SIG2, sizeof(REMOTE_SIG2) },
        { REMOTE_SIG3, sizeof(REMOTE_SIG3) },
        { REMOTE_SIG4, sizeof(REMOTE_SIG4) },
    };

    const uint8_t HS0[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x83,
        0x23, 0x14, 0x8c, 0xe2, 0x41, 0x9f, 0x21, 0xca,
        0x3d, 0x67, 0x80, 0x05, 0x37, 0x47, 0x71, 0x58,
        0x32, 0xe1, 0x8a, 0xc7, 0x80, 0x93, 0x1a, 0x51,
        0x4b, 0x18, 0x77, 0x68, 0x88, 0x2b, 0xb6, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x22, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x38, 0x5a, 0x5a, 0xfe, 0x75,
        0x63, 0x2f, 0x50, 0x12, 0x8c, 0xbb, 0x02, 0x9e,
        0xe9, 0x5c, 0x80, 0x15, 0x6b, 0x5b, 0x47, 0x44,
        0xbe, 0xdd, 0xc7, 0x29, 0xad, 0x33, 0x9c, 0x9c,
        0xa4, 0x32, 0xc8, 0x02, 0x20, 0x2b, 0xa5, 0xf4,
        0x85, 0x50, 0xca, 0xd3, 0x37, 0x9a, 0xc7, 0x5b,
        0x9b, 0x4f, 0xed, 0xb8, 0x6a, 0x35, 0xba, 0xa6,
        0x94, 0x7f, 0x16, 0xba, 0x50, 0x37, 0xfb, 0x8b,
        0x11, 0xab, 0x34, 0x37, 0x40, 0x01, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x59, 0x99, 0x59, 0x0b, 0x8a,
        0x79, 0xfa, 0x34, 0x6e, 0x00, 0x3a, 0x68, 0xfd,
        0x40, 0x36, 0x63, 0x97, 0x11, 0x9b, 0x2b, 0x0c,
        0xdf, 0x37, 0xb1, 0x49, 0x96, 0x8d, 0x6b, 0xc6,
        0xfb, 0xcc, 0x47, 0x02, 0x20, 0x2b, 0x1e, 0x1f,
        0xb5, 0xab, 0x78, 0x64, 0x93, 0x1c, 0xae, 0xd4,
        0xe7, 0x32, 0xc3, 0x59, 0xe0, 0xfe, 0x3d, 0x86,
        0xa5, 0x48, 0xb5, 0x57, 0xbe, 0x22, 0x46, 0xef,
        0xb1, 0x70, 0x8d, 0x57, 0x9a, 0x01, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8a,
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0xb8, 0xbc, 0xb0,
        0x7f, 0x63, 0x44, 0xb4, 0x2a, 0xb0, 0x42, 0x50,
        0xc8, 0x6a, 0x6e, 0x8b, 0x75, 0xd3, 0xfd, 0xbb,
        0xc6, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf4, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const uint8_t HS1[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x83,
        0x23, 0x14, 0x8c, 0xe2, 0x41, 0x9f, 0x21, 0xca,
        0x3d, 0x67, 0x80, 0x05, 0x37, 0x47, 0x71, 0x58,
        0x32, 0xe1, 0x8a, 0xc7, 0x80, 0x93, 0x1a, 0x51,
        0x4b, 0x18, 0x77, 0x68, 0x88, 0x2b, 0xb6, 0x02,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x0a, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x6a, 0x40, 0x1b, 0x29, 0xa0,
        0xdf, 0xf0, 0xd1, 0x8e, 0xc9, 0x03, 0x50, 0x2c,
        0x13, 0xd8, 0x3e, 0x7e, 0xc0, 0x19, 0x45, 0x01,
        0x13, 0xf4, 0xa7, 0x65, 0x5a, 0x4c, 0xe4, 0x0d,
        0x1f, 0x65, 0xba, 0x02, 0x20, 0x21, 0x77, 0x23,
        0xa0, 0x84, 0xe7, 0x27, 0xb6, 0xca, 0x0c, 0xc8,
        0xb6, 0xc6, 0x9c, 0x01, 0x4a, 0x7e, 0x4a, 0x01,
        0xfc, 0xdc, 0xba, 0x3e, 0x39, 0x93, 0xf4, 0x62,
        0xa3, 0xc5, 0x74, 0xd8, 0x33, 0x01, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xd5, 0x0d, 0x06, 0x7c,
        0xa6, 0x25, 0xd5, 0x4e, 0x62, 0xdf, 0x53, 0x3a,
        0x8f, 0x92, 0x91, 0x73, 0x66, 0x78, 0xd0, 0xb8,
        0x6c, 0x28, 0xa6, 0x1b, 0xb2, 0xa8, 0x0c, 0xf4,
        0x2e, 0x70, 0x2d, 0x6e, 0x02, 0x20, 0x23, 0x73,
        0xdd, 0xe7, 0xe0, 0x02, 0x18, 0xea, 0xcd, 0xaf,
        0xb9, 0x41, 0x5f, 0xe0, 0xe1, 0x07, 0x1b, 0xee,
        0xc1, 0x85, 0x7d, 0x1a, 0xf3, 0xc6, 0xa2, 0x01,
        0xa4, 0x4c, 0xbc, 0x47, 0xc8, 0x77, 0x01, 0x20,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x8a, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b,
        0x2e, 0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb,
        0x7b, 0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc,
        0xe2, 0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d,
        0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d,
        0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97,
        0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e,
        0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52,
        0xae, 0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75,
        0xac, 0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const uint8_t HS2[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x83,
        0x23, 0x14, 0x8c, 0xe2, 0x41, 0x9f, 0x21, 0xca,
        0x3d, 0x67, 0x80, 0x05, 0x37, 0x47, 0x71, 0x58,
        0x32, 0xe1, 0x8a, 0xc7, 0x80, 0x93, 0x1a, 0x51,
        0x4b, 0x18, 0x77, 0x68, 0x88, 0x2b, 0xb6, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x24, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x7c, 0xeb, 0x66, 0x78, 0xd4,
        0xdb, 0x33, 0xd2, 0x40, 0x1f, 0xdc, 0x40, 0x99,
        0x59, 0xe5, 0x7c, 0x16, 0xa6, 0xcb, 0x97, 0xa3,
        0x02, 0x61, 0xd9, 0xc6, 0x1f, 0x29, 0xb8, 0xc5,
        0x8d, 0x34, 0xb9, 0x02, 0x20, 0x08, 0x4b, 0x4a,
        0x17, 0xb4, 0xca, 0x0e, 0x86, 0xf2, 0xd7, 0x98,
        0xb3, 0x69, 0x8c, 0xa5, 0x2d, 0xe5, 0x62, 0x1f,
        0x2c, 0xe8, 0x6f, 0x80, 0xbe, 0xd7, 0x9a, 0xfa,
        0x66, 0x87, 0x45, 0x11, 0xb0, 0x01, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x7f, 0xf0, 0x3e, 0xb0, 0x12,
        0x7f, 0xc7, 0xc6, 0xca, 0xe4, 0x9c, 0xc2, 0x9e,
        0x2a, 0x58, 0x6b, 0x98, 0xd1, 0xe8, 0x96, 0x9c,
        0xf4, 0xa1, 0x7d, 0xfa, 0x50, 0xb9, 0xc2, 0x64,
        0x77, 0x20, 0xb9, 0x02, 0x20, 0x5e, 0x2e, 0xcf,
        0xda, 0x22, 0x52, 0x95, 0x6c, 0x0c, 0xa3, 0x2f,
        0x17, 0x50, 0x80, 0xe7, 0x5e, 0x4e, 0x39, 0x0e,
        0x43, 0x3f, 0xeb, 0x1f, 0x8c, 0xe9, 0xf2, 0xba,
        0x55, 0x64, 0x8a, 0x1d, 0xac, 0x01, 0x00, 0x85,
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e, 0x1b,
        0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c, 0xd9,
        0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9, 0xb5,
        0xd1, 0x88, 0xac, 0x68, 0x68, 0xf6, 0x01, 0x00,
        0x00,
    };
    const uint8_t HS3[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x83,
        0x23, 0x14, 0x8c, 0xe2, 0x41, 0x9f, 0x21, 0xca,
        0x3d, 0x67, 0x80, 0x05, 0x37, 0x47, 0x71, 0x58,
        0x32, 0xe1, 0x8a, 0xc7, 0x80, 0x93, 0x1a, 0x51,
        0x4b, 0x18, 0x77, 0x68, 0x88, 0x2b, 0xb6, 0x03,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x0c, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0x9b, 0x1c, 0x98, 0x7b,
        0xa5, 0x99, 0xee, 0x3b, 0xde, 0x1d, 0xbc, 0xa7,
        0x76, 0xb8, 0x54, 0x81, 0xd7, 0x0a, 0x78, 0xb6,
        0x81, 0xa8, 0xd8, 0x42, 0x06, 0x72, 0x3e, 0x27,
        0x95, 0xc7, 0xca, 0xc0, 0x02, 0x20, 0x7a, 0xac,
        0x84, 0xad, 0x91, 0x0f, 0x85, 0x98, 0xc4, 0xd1,
        0xc0, 0xea, 0x2e, 0x33, 0x99, 0xcf, 0x66, 0x27,
        0xa4, 0xe3, 0xe9, 0x01, 0x31, 0x31, 0x5b, 0xc9,
        0xf0, 0x38, 0x45, 0x1c, 0xe3, 0x9d, 0x01, 0x48,
        0x30, 0x45, 0x02, 0x21, 0x00, 0xdb, 0x9d, 0xc6,
        0x52, 0x91, 0x07, 0x7a, 0x52, 0x72, 0x8c, 0x62,
        0x29, 0x87, 0xe9, 0x89, 0x5b, 0x72, 0x41, 0xd4,
        0x39, 0x4d, 0x6d, 0xcb, 0x91, 0x6d, 0x76, 0x00,
        0xa3, 0xe8, 0x72, 0x8c, 0x22, 0x02, 0x20, 0x36,
        0xee, 0x3e, 0xe7, 0x17, 0xba, 0x0b, 0xb5, 0xc4,
        0x5e, 0xe8, 0x4b, 0xc7, 0xbb, 0xf8, 0x5c, 0x0f,
        0x90, 0xf2, 0x6a, 0xe4, 0xe4, 0xa2, 0x5a, 0x6b,
        0x42, 0x41, 0xaf, 0xa8, 0xa3, 0xf1, 0xcb, 0x01,
        0x00, 0x85, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f,
        0x72, 0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98,
        0x6c, 0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7,
        0xb5, 0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94,
        0x85, 0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12,
        0x2c, 0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a,
        0x21, 0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26,
        0xd6, 0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c,
        0x82, 0x01, 0x20, 0x87, 0x64, 0x75, 0x52, 0x7c,
        0x21, 0x03, 0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63,
        0x84, 0xf8, 0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c,
        0x5e, 0x57, 0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda,
        0xca, 0x81, 0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06,
        0x39, 0xe7, 0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a,
        0x48, 0x6f, 0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf,
        0x39, 0xe2, 0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef,
        0xd0, 0x9d, 0x5b, 0x88, 0xac, 0x68, 0x68, 0xf7,
        0x01, 0x00, 0x00,
    };
    const uint8_t HS4[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x83,
        0x23, 0x14, 0x8c, 0xe2, 0x41, 0x9f, 0x21, 0xca,
        0x3d, 0x67, 0x80, 0x05, 0x37, 0x47, 0x71, 0x58,
        0x32, 0xe1, 0x8a, 0xc7, 0x80, 0x93, 0x1a, 0x51,
        0x4b, 0x18, 0x77, 0x68, 0x88, 0x2b, 0xb6, 0x04,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xda, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xcc, 0x28, 0x03, 0x0b,
        0x59, 0xf0, 0x91, 0x4f, 0x45, 0xb8, 0x4c, 0xaa,
        0x98, 0x3b, 0x6f, 0x8e, 0xff, 0xa9, 0x00, 0xc9,
        0x52, 0x31, 0x07, 0x08, 0xc2, 0xb5, 0xb0, 0x07,
        0x81, 0x11, 0x70, 0x22, 0x02, 0x20, 0x27, 0xba,
        0x2c, 0xcd, 0xf9, 0x4d, 0x03, 0xc6, 0xd4, 0x8b,
        0x32, 0x7f, 0x18, 0x3f, 0x6e, 0x28, 0xc8, 0xa2,
        0x14, 0xd0, 0x89, 0xb9, 0x22, 0x7f, 0x94, 0xac,
        0x4f, 0x85, 0x31, 0x52, 0x74, 0xf0, 0x01, 0x47,
        0x30, 0x44, 0x02, 0x20, 0x2d, 0x1a, 0x3c, 0x0d,
        0x31, 0x20, 0x02, 0x65, 0xd2, 0xa2, 0xde, 0xf2,
        0x75, 0x3e, 0xad, 0x49, 0x59, 0xae, 0x20, 0xb4,
        0x08, 0x3e, 0x19, 0x55, 0x3a, 0xcf, 0xff, 0xa5,
        0xdf, 0xab, 0x60, 0xbf, 0x02, 0x20, 0x20, 0xed,
        0xe1, 0x34, 0x14, 0x95, 0x04, 0xe1, 0x5b, 0x88,
        0xab, 0x26, 0x1a, 0x06, 0x6d, 0xe4, 0x98, 0x48,
        0x41, 0x1e, 0x15, 0xe7, 0x0f, 0x9e, 0x6a, 0x54,
        0x62, 0xae, 0xc2, 0x94, 0x9f, 0x8f, 0x01, 0x20,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x8a, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc,
        0x1a, 0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d,
        0x23, 0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27,
        0x43, 0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d,
        0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d,
        0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97,
        0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e,
        0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52,
        0xae, 0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75,
        0xac, 0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const struct {
        const uint8_t *tx;
        size_t len;
    } HTLC_TX[] = {
        { HS0, sizeof(HS0) },
        { HS1, sizeof(HS1) },
        { HS2, sizeof(HS2) },
        { HS3, sizeof(HS3) },
        { HS4, sizeof(HS4) },
    };
    ///////////////////////////////////////////////////////////


    bool ret;
    int index;

    //各HTLCのsuccess transaction作成
    ptarm_tx_t tx2;

    ptarm_buf_t ws_buf;
    ln_create_script_success(&ws_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);

    //どのVOUTがどのHTLCなのかは、どうやって見つけるべきなのだろう？
    const int VOUTS[] = { 0, 2, 1, 3, 4 };

    ptarm_buf_t local_sig = PTARM_BUF_INIT;
    for (int lp = 0; lp < 5; lp++) {
        uint64_t fee = (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? feeinfo.htlc_timeout : feeinfo.htlc_success;
        index = VOUTS[lp];
        if (tx.vout[index].value >= feeinfo.dust_limit_satoshi + fee) {
            ptarm_tx_init(&tx2);
            ln_create_htlc_tx(&tx2, tx.vout[index].value - fee, &ws_buf, htlcinfos[lp].type, htlcinfos[lp].expiry, txid_commit, index);

            const ptarm_buf_t remote_sig = { (uint8_t *)REMOTE_SIGS[lp].sig, (uint16_t)REMOTE_SIGS[lp].len };
//            printf("[%d]%s\n", lp, (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? "offered" : "received");
            ret = ln_sign_htlc_tx(&tx2,
                        &local_sig,
                        tx.vout[index].value,
                        &keys_local_commit,
                        &remote_sig,
                        PREIMAGES[lp],
                        &htlcinfos[lp].script,
                        HTLCSIGN_TO_SUCCESS);
            ASSERT_TRUE(ret);
            ptarm_buf_t hs;
            ptarm_tx_create(&hs, &tx2);
            //ptarm_print_tx(&tx2);
            //ptarm_print_rawtx(HTLC_TX[lp].tx, HTLC_TX[lp].len);
            ASSERT_EQ(0, memcmp(HTLC_TX[lp].tx, hs.buf, HTLC_TX[lp].len));
            ASSERT_EQ(HTLC_TX[lp].len, hs.len);
            ptarm_buf_free(&local_sig);
            ptarm_buf_free(&hs);
            ptarm_tx_free(&tx2);
        }
    }

    for (int lp = 0; lp < 5; lp++) {
        ptarm_buf_free((ptarm_buf_t *)&htlcinfos[lp].script);
    }
    ptarm_buf_free(&ws_buf);
    ptarm_tx_free(&tx2);

    ptarm_tx_free(&tx);
}


// name: commitment tx with 6 outputs untrimmed (minimum feerate)
//      Commitment Transaction
TEST_F(ln_bolt3_c, committx6min_commit)
{
    ptarm_tx_init(&tx);

    bool ret;

    //amounts
    const uint64_t MSAT_LOCAL = 6988000000LL;
    const uint64_t MSAT_REMOTE = 3000000000LL;


    feeinfo.feerate_per_kw = 648;
    uint64_t fee_act = ln_fee_calc(&feeinfo, (const ln_htlcinfo_t **)pp_htlcinfos, 5);

//    printf("base fee_committx=%llu\n", (unsigned long long)feeinfo.commit);
//    printf("actual fee_committx=%llu\n", (unsigned long long)fee_act);
//    printf("fee success=%d\n", (int)feeinfo.htlc_success);
//    printf("fee timeout=%d\n", (int)feeinfo.htlc_timeout);
    ASSERT_EQ(455, feeinfo.htlc_success);
    ASSERT_EQ(429, feeinfo.htlc_timeout);
    ASSERT_EQ(914, feeinfo.commit);
    ASSERT_EQ(1914, fee_act);


    ///////////////////////////////////////
    const uint8_t WS_HTLC0[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0xb8, 0xbc, 0xb0,
        0x7f, 0x63, 0x44, 0xb4, 0x2a, 0xb0, 0x42, 0x50,
        0xc8, 0x6a, 0x6e, 0x8b, 0x75, 0xd3, 0xfd, 0xbb,
        0xc6, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf4, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC1[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b, 0x2e,
        0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb, 0x7b,
        0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc, 0xe2,
        0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC2[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e, 0x1b,
        0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c, 0xd9,
        0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9, 0xb5,
        0xd1, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC3[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48, 0x6f,
        0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39, 0xe2,
        0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0, 0x9d,
        0x5b, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC4[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc, 0x1a,
        0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d, 0x23,
        0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27, 0x43,
        0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };

    ///////////////////////////////////////

    const struct {
        const uint8_t *ws;
        size_t len;
    } SCRIPTS[] = {
        { WS_HTLC0, sizeof(WS_HTLC0) },
        { WS_HTLC1, sizeof(WS_HTLC1) },
        { WS_HTLC2, sizeof(WS_HTLC2) },
        { WS_HTLC3, sizeof(WS_HTLC3) },
        { WS_HTLC4, sizeof(WS_HTLC4) }
    };

    for (int lp = 0; lp < 5; lp++) {
        ln_create_htlcinfo(&pp_htlcinfos[lp]->script, pp_htlcinfos[lp]->type, LOCAL_KEY, LOCAL_REVO_KEY, REMOTE_KEY, pp_htlcinfos[lp]->preimage_hash, pp_htlcinfos[lp]->expiry);

        ASSERT_EQ(0, memcmp(SCRIPTS[lp].ws, htlcinfos[lp].script.buf, SCRIPTS[lp].len));
        ASSERT_EQ(SCRIPTS[lp].len, htlcinfos[lp].script.len);
    }


    //to-local wscript
    ptarm_buf_t ws_local_buf;

    ln_create_script_local(&ws_local_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);
//    dumpbin(ws_local_buf.buf, ws_local_buf.len);
//    printf("-[to-local]---------------------\n");
//    ptarm_print_script(ws_local_buf.buf, ws_local_buf.len);
//    printf("----------------------: %d\n", ws_local_buf.len);
    const uint8_t TO_LOCAL_WSCRIPT[] = {
        0x63, 0x21, 0x02, 0x12, 0xa1, 0x40, 0xcd, 0x0c,
        0x65, 0x39, 0xd0, 0x7c, 0xd0, 0x8d, 0xfe, 0x09,
        0x98, 0x4d, 0xec, 0x32, 0x51, 0xea, 0x80, 0x8b,
        0x89, 0x2e, 0xfe, 0xac, 0x3e, 0xde, 0x94, 0x02,
        0xbf, 0x2b, 0x19, 0x67, 0x02, 0x90, 0x00, 0xb2,
        0x75, 0x21, 0x03, 0xfd, 0x59, 0x60, 0x52, 0x8d,
        0xc1, 0x52, 0x01, 0x49, 0x52, 0xef, 0xdb, 0x70,
        0x2a, 0x88, 0xf7, 0x1e, 0x3c, 0x16, 0x53, 0xb2,
        0x31, 0x44, 0x31, 0x70, 0x1e, 0xc7, 0x7e, 0x57,
        0xfd, 0xe8, 0x3c, 0x68, 0xac,
    };
    ASSERT_EQ(0, memcmp(TO_LOCAL_WSCRIPT, ws_local_buf.buf, sizeof(TO_LOCAL_WSCRIPT)));
    ASSERT_EQ(sizeof(TO_LOCAL_WSCRIPT), ws_local_buf.len);


    //tx

    ln_tx_cmt_t lntx_commit;
    lntx_commit.fund.txid = TXID_FUND;
    lntx_commit.fund.txid_index = TXID_FUND_INDEX;
    lntx_commit.fund.satoshi = PTARM_MBTC2SATOSHI(100);
    lntx_commit.fund.p_script = &funding2of2;
    lntx_commit.local.satoshi = LN_MSAT2SATOSHI(MSAT_LOCAL);
    lntx_commit.local.p_script = &ws_local_buf;
    lntx_commit.remote.satoshi = LN_MSAT2SATOSHI(MSAT_REMOTE);
    lntx_commit.remote.pubkey = REMOTE_KEY;
    lntx_commit.obscured = obscured;
    lntx_commit.p_feeinfo = &feeinfo;
    lntx_commit.pp_htlcinfo = pp_htlcinfos;
    lntx_commit.htlcinfo_num = 5;
    ptarm_buf_t buf_sig_local;

    ret = ln_create_commit_tx(&tx, &buf_sig_local, &lntx_commit, true, &priv_data);
    ASSERT_TRUE(ret);


    const uint8_t LOCAL_SIGNATURE[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xa2, 0x27, 0x0d,
        0x59, 0x50, 0xc8, 0x9a, 0xe0, 0x84, 0x12, 0x33,
        0xf6, 0xef, 0xea, 0x9c, 0x95, 0x18, 0x98, 0xb3,
        0x01, 0xb2, 0xe8, 0x9e, 0x0a, 0xdb, 0xd2, 0xc6,
        0x87, 0xb9, 0xf3, 0x2e, 0xfa, 0x02, 0x20, 0x79,
        0x43, 0xd9, 0x0f, 0x95, 0xb9, 0x61, 0x04, 0x58,
        0xe7, 0xc6, 0x5a, 0x57, 0x6e, 0x14, 0x97, 0x50,
        0xff, 0x3a, 0xcc, 0xaa, 0xca, 0xd0, 0x04, 0xcd,
        0x85, 0xe7, 0x0b, 0x23, 0x5e, 0x27, 0xde, 0x01,
    };
    ASSERT_EQ(0, memcmp(LOCAL_SIGNATURE, buf_sig_local.buf, sizeof(LOCAL_SIGNATURE)));
    ASSERT_EQ(sizeof(LOCAL_SIGNATURE), buf_sig_local.len);

    const uint8_t REMOTE_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x72, 0x71, 0x4e, 0x2f,
        0xbb, 0x93, 0xcd, 0xd1, 0xc4, 0x2e, 0xb0, 0x82,
        0x8b, 0x4f, 0x2e, 0xff, 0x14, 0x3f, 0x71, 0x7d,
        0x8f, 0x26, 0xe7, 0x9d, 0x6a, 0xda, 0x4f, 0x0d,
        0xcb, 0x68, 0x1b, 0xbe, 0x02, 0x20, 0x09, 0x11,
        0xbe, 0x4e, 0x51, 0x61, 0xdd, 0x6e, 0xbe, 0x59,
        0xff, 0x1c, 0x58, 0xe1, 0x99, 0x7c, 0x4a, 0xea,
        0x80, 0x4f, 0x81, 0xdb, 0x6b, 0x69, 0x88, 0x21,
        0xdb, 0x60, 0x93, 0xd7, 0xb0, 0x57, 0x01,
    };
    ptarm_buf_t buf_sig_remote;
    ptarm_buf_alloccopy(&buf_sig_remote, REMOTE_SIGNATURE, sizeof(REMOTE_SIGNATURE));
    ret = set_vin_p2wsh_2of2(&tx, 0, key_fund_sort,
                &buf_sig_local,
                &buf_sig_remote,
                &funding2of2);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&buf_sig_local);
    ptarm_buf_free(&buf_sig_remote);

    //ptarm_print_tx(&tx);

    //TestVectorとのチェック
    const uint8_t COMMIT_TX[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xbe,
        0xf6, 0x7e, 0x4e, 0x2f, 0xb9, 0xdd, 0xee, 0xb3,
        0x46, 0x19, 0x73, 0xcd, 0x4c, 0x62, 0xab, 0xb3,
        0x50, 0x50, 0xb1, 0xad, 0xd7, 0x72, 0x99, 0x5b,
        0x82, 0x0b, 0x58, 0x4a, 0x48, 0x84, 0x89, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x38, 0xb0, 0x2b, 0x80,
        0x06, 0xd0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x40, 0x3d, 0x39, 0x47,
        0x47, 0xca, 0xe4, 0x2e, 0x98, 0xff, 0x01, 0x73,
        0x4a, 0xd5, 0xc0, 0x8f, 0x82, 0xba, 0x12, 0x3d,
        0x3d, 0x9a, 0x62, 0x0a, 0xbd, 0xa8, 0x89, 0x89,
        0x65, 0x1e, 0x2a, 0xb5, 0xd0, 0x07, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x20, 0x74,
        0x8e, 0xba, 0x94, 0x4f, 0xed, 0xc8, 0x82, 0x7f,
        0x6b, 0x06, 0xbc, 0x44, 0x67, 0x8f, 0x93, 0xc0,
        0xf9, 0xe6, 0x07, 0x8b, 0x35, 0xc6, 0x33, 0x1e,
        0xd3, 0x1e, 0x75, 0xf8, 0xce, 0x0c, 0x2d, 0xb8,
        0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22,
        0x00, 0x20, 0xc2, 0x0b, 0x5d, 0x1f, 0x85, 0x84,
        0xfd, 0x90, 0x44, 0x3e, 0x7b, 0x7b, 0x72, 0x01,
        0x36, 0x17, 0x4f, 0xa4, 0xb9, 0x33, 0x3c, 0x26,
        0x1d, 0x04, 0xdb, 0xbd, 0x01, 0x26, 0x35, 0xc0,
        0xf4, 0x19, 0xa0, 0x0f, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x22, 0x00, 0x20, 0x8c, 0x48, 0xd1,
        0x51, 0x60, 0x39, 0x7c, 0x97, 0x31, 0xdf, 0x9b,
        0xc3, 0xb2, 0x36, 0x65, 0x6e, 0xfb, 0x66, 0x65,
        0xfb, 0xfe, 0x92, 0xb4, 0xa6, 0x87, 0x8e, 0x88,
        0xa4, 0x99, 0xf7, 0x41, 0xc4, 0xc0, 0xc6, 0x2d,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x14,
        0xcc, 0xf1, 0xaf, 0x2f, 0x2a, 0xab, 0xee, 0x14,
        0xbb, 0x40, 0xfa, 0x38, 0x51, 0xab, 0x23, 0x01,
        0xde, 0x84, 0x31, 0x10, 0x4e, 0x9d, 0x6a, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x20, 0x4a,
        0xdb, 0x4e, 0x2f, 0x00, 0x64, 0x3d, 0xb3, 0x96,
        0xdd, 0x12, 0x0d, 0x4e, 0x7d, 0xc1, 0x76, 0x25,
        0xf5, 0xf2, 0xc1, 0x1a, 0x40, 0xd8, 0x57, 0xac,
        0xcc, 0x86, 0x2d, 0x6b, 0x7d, 0xd8, 0x0e, 0x04,
        0x00, 0x48, 0x30, 0x45, 0x02, 0x21, 0x00, 0xa2,
        0x27, 0x0d, 0x59, 0x50, 0xc8, 0x9a, 0xe0, 0x84,
        0x12, 0x33, 0xf6, 0xef, 0xea, 0x9c, 0x95, 0x18,
        0x98, 0xb3, 0x01, 0xb2, 0xe8, 0x9e, 0x0a, 0xdb,
        0xd2, 0xc6, 0x87, 0xb9, 0xf3, 0x2e, 0xfa, 0x02,
        0x20, 0x79, 0x43, 0xd9, 0x0f, 0x95, 0xb9, 0x61,
        0x04, 0x58, 0xe7, 0xc6, 0x5a, 0x57, 0x6e, 0x14,
        0x97, 0x50, 0xff, 0x3a, 0xcc, 0xaa, 0xca, 0xd0,
        0x04, 0xcd, 0x85, 0xe7, 0x0b, 0x23, 0x5e, 0x27,
        0xde, 0x01, 0x47, 0x30, 0x44, 0x02, 0x20, 0x72,
        0x71, 0x4e, 0x2f, 0xbb, 0x93, 0xcd, 0xd1, 0xc4,
        0x2e, 0xb0, 0x82, 0x8b, 0x4f, 0x2e, 0xff, 0x14,
        0x3f, 0x71, 0x7d, 0x8f, 0x26, 0xe7, 0x9d, 0x6a,
        0xda, 0x4f, 0x0d, 0xcb, 0x68, 0x1b, 0xbe, 0x02,
        0x20, 0x09, 0x11, 0xbe, 0x4e, 0x51, 0x61, 0xdd,
        0x6e, 0xbe, 0x59, 0xff, 0x1c, 0x58, 0xe1, 0x99,
        0x7c, 0x4a, 0xea, 0x80, 0x4f, 0x81, 0xdb, 0x6b,
        0x69, 0x88, 0x21, 0xdb, 0x60, 0x93, 0xd7, 0xb0,
        0x57, 0x01, 0x47, 0x52, 0x21, 0x02, 0x3d, 0xa0,
        0x92, 0xf6, 0x98, 0x0e, 0x58, 0xd2, 0xc0, 0x37,
        0x17, 0x31, 0x80, 0xe9, 0xa4, 0x65, 0x47, 0x60,
        0x26, 0xee, 0x50, 0xf9, 0x66, 0x95, 0x96, 0x3e,
        0x8e, 0xfe, 0x43, 0x6f, 0x54, 0xeb, 0x21, 0x03,
        0x0e, 0x9f, 0x7b, 0x62, 0x3d, 0x2c, 0xcc, 0x7c,
        0x9b, 0xd4, 0x4d, 0x66, 0xd5, 0xce, 0x21, 0xce,
        0x50, 0x4c, 0x0a, 0xcf, 0x63, 0x85, 0xa1, 0x32,
        0xce, 0xc6, 0xd3, 0xc3, 0x9f, 0xa7, 0x11, 0xc1,
        0x52, 0xae, 0x3e, 0x19, 0x52, 0x20,
    };
    //ptarm_print_rawtx(COMMIT_TX, sizeof(COMMIT_TX));
    ptarm_buf_t tx_buf;

    ptarm_tx_create(&tx_buf, &tx);
    ASSERT_EQ(0, memcmp(COMMIT_TX, tx_buf.buf, sizeof(COMMIT_TX)));
    ASSERT_EQ(sizeof(COMMIT_TX), tx_buf.len);
    ret = ptarm_tx_txid(txid_commit, &tx);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&tx_buf);

    ptarm_buf_free(&ws_local_buf);
}


// name: commitment tx with 6 outputs untrimmed (minimum feerate)
//      HTLC-success Transaction
TEST_F(ln_bolt3_c, committx6min_success_to)
{
    ///////////////////////////////////////////////////////////
    const uint8_t REMOTE_SIG0[] = {
        0x01,
    };
    const uint8_t REMOTE_SIG1[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xe9, 0x68, 0xcb,
        0xbb, 0x5f, 0x40, 0x2e, 0xd3, 0x89, 0xfd, 0xc7,
        0xf6, 0xcd, 0x2a, 0x80, 0xed, 0x65, 0x0b, 0xb4,
        0x2c, 0x79, 0xae, 0xb2, 0xa5, 0x67, 0x84, 0x44,
        0xaf, 0x94, 0xf6, 0xc7, 0x85, 0x02, 0x20, 0x4b,
        0x47, 0xa1, 0xcb, 0x24, 0xab, 0x5b, 0x0b, 0x6f,
        0xe6, 0x9f, 0xe9, 0xcf, 0xc7, 0xdb, 0xa0, 0x7b,
        0x9d, 0xd0, 0xd8, 0xb9, 0x5f, 0x37, 0x2c, 0x1d,
        0x94, 0x35, 0x14, 0x6a, 0x88, 0xf8, 0xd4, 0x01,
    };
    const uint8_t REMOTE_SIG2[] = {
        0x30, 0x44, 0x02, 0x20, 0x62, 0xef, 0x2e, 0x77,
        0x59, 0x14, 0x09, 0xd6, 0x0d, 0x78, 0x17, 0xd9,
        0xbb, 0x1e, 0x71, 0xd3, 0xc4, 0xa2, 0x93, 0x1d,
        0x1a, 0x6c, 0x7c, 0x83, 0x07, 0x42, 0x2c, 0x84,
        0xf0, 0x01, 0xa2, 0x51, 0x02, 0x20, 0x22, 0xda,
        0xd9, 0x72, 0x6b, 0x0a, 0xe3, 0xfe, 0x92, 0xbd,
        0xa7, 0x45, 0xa0, 0x6f, 0x2c, 0x00, 0xf9, 0x23,
        0x42, 0xa1, 0x86, 0xd8, 0x45, 0x18, 0x58, 0x8c,
        0xf6, 0x5f, 0x4d, 0xfa, 0xad, 0xa8, 0x01,
    };
    const uint8_t REMOTE_SIG3[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xaa, 0x91, 0x93,
        0x2e, 0x30, 0x52, 0x92, 0xcf, 0x99, 0x69, 0xcc,
        0x23, 0x50, 0x2b, 0xbf, 0x6c, 0xef, 0x83, 0xa5,
        0xdf, 0x39, 0xc9, 0x5a, 0xd0, 0x4a, 0x70, 0x7c,
        0x4f, 0x4f, 0xed, 0x5c, 0x77, 0x02, 0x20, 0x70,
        0x99, 0xfc, 0x0f, 0x3a, 0x9b, 0xfe, 0x1e, 0x76,
        0x83, 0xc0, 0xe9, 0xaa, 0x5e, 0x76, 0xc5, 0x43,
        0x2e, 0xb2, 0x06, 0x93, 0xbf, 0x4c, 0xb1, 0x82,
        0xf0, 0x4d, 0x38, 0x3d, 0xc9, 0xc8, 0xc2, 0x01,
    };
    const uint8_t REMOTE_SIG4[] = {
        0x30, 0x44, 0x02, 0x20, 0x35, 0xca, 0xc8, 0x80,
        0x40, 0xa5, 0xbb, 0xa4, 0x20, 0xb1, 0xc4, 0x25,
        0x72, 0x35, 0xd5, 0x01, 0x53, 0x09, 0x11, 0x34,
        0x60, 0xbc, 0x33, 0xf2, 0x85, 0x3c, 0xd8, 0x1c,
        0xa3, 0x6e, 0x63, 0x24, 0x02, 0x20, 0x2f, 0xc9,
        0x4f, 0xd3, 0xe8, 0x1e, 0x9d, 0x34, 0xa9, 0xd0,
        0x17, 0x82, 0xa0, 0x28, 0x4f, 0x30, 0x44, 0x37,
        0x0d, 0x03, 0xd6, 0x0f, 0x3f, 0xc0, 0x41, 0xe2,
        0xda, 0x08, 0x8d, 0x2d, 0xe5, 0x8f, 0x01,
    };
    const struct {
        const uint8_t *sig;
        size_t len;
    } REMOTE_SIGS[] = {
        { REMOTE_SIG0, sizeof(REMOTE_SIG0) },
        { REMOTE_SIG1, sizeof(REMOTE_SIG1) },
        { REMOTE_SIG2, sizeof(REMOTE_SIG2) },
        { REMOTE_SIG3, sizeof(REMOTE_SIG3) },
        { REMOTE_SIG4, sizeof(REMOTE_SIG4) },
    };

    const uint8_t HS0[] = {
        0x00,
    };
    const uint8_t HS1[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x57,
        0x9c, 0x18, 0x3e, 0xca, 0x9e, 0x82, 0x36, 0xa5,
        0xd7, 0xf5, 0xdc, 0xd7, 0x9c, 0xfe, 0xc3, 0x2c,
        0x49, 0x7f, 0xdc, 0x0e, 0xc6, 0x15, 0x33, 0xcd,
        0xe9, 0x9e, 0xcd, 0x43, 0x6c, 0xad, 0xd1, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x09, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xe9, 0x68, 0xcb, 0xbb,
        0x5f, 0x40, 0x2e, 0xd3, 0x89, 0xfd, 0xc7, 0xf6,
        0xcd, 0x2a, 0x80, 0xed, 0x65, 0x0b, 0xb4, 0x2c,
        0x79, 0xae, 0xb2, 0xa5, 0x67, 0x84, 0x44, 0xaf,
        0x94, 0xf6, 0xc7, 0x85, 0x02, 0x20, 0x4b, 0x47,
        0xa1, 0xcb, 0x24, 0xab, 0x5b, 0x0b, 0x6f, 0xe6,
        0x9f, 0xe9, 0xcf, 0xc7, 0xdb, 0xa0, 0x7b, 0x9d,
        0xd0, 0xd8, 0xb9, 0x5f, 0x37, 0x2c, 0x1d, 0x94,
        0x35, 0x14, 0x6a, 0x88, 0xf8, 0xd4, 0x01, 0x47,
        0x30, 0x44, 0x02, 0x20, 0x76, 0x79, 0xcf, 0x19,
        0x79, 0x0b, 0xea, 0x76, 0xa7, 0x33, 0xd2, 0xfa,
        0x06, 0x72, 0xbd, 0x43, 0xab, 0x45, 0x56, 0x87,
        0xa0, 0x68, 0xf8, 0x15, 0xa3, 0xd2, 0x37, 0x58,
        0x1f, 0x57, 0x13, 0x9a, 0x02, 0x20, 0x68, 0x3a,
        0x1a, 0x79, 0x9e, 0x10, 0x20, 0x71, 0xc2, 0x06,
        0xb2, 0x07, 0x73, 0x5c, 0xa8, 0x0f, 0x62, 0x7a,
        0xb8, 0x3d, 0x66, 0x16, 0xb4, 0xbc, 0xd0, 0x17,
        0xc5, 0xd7, 0x9e, 0xf3, 0xe7, 0xd0, 0x01, 0x20,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x8a, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b,
        0x2e, 0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb,
        0x7b, 0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc,
        0xe2, 0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d,
        0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d,
        0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97,
        0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e,
        0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52,
        0xae, 0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75,
        0xac, 0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const uint8_t HS2[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x57,
        0x9c, 0x18, 0x3e, 0xca, 0x9e, 0x82, 0x36, 0xa5,
        0xd7, 0xf5, 0xdc, 0xd7, 0x9c, 0xfe, 0xc3, 0x2c,
        0x49, 0x7f, 0xdc, 0x0e, 0xc6, 0x15, 0x33, 0xcd,
        0xe9, 0x9e, 0xcd, 0x43, 0x6c, 0xad, 0xd1, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x23, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x62, 0xef, 0x2e, 0x77, 0x59,
        0x14, 0x09, 0xd6, 0x0d, 0x78, 0x17, 0xd9, 0xbb,
        0x1e, 0x71, 0xd3, 0xc4, 0xa2, 0x93, 0x1d, 0x1a,
        0x6c, 0x7c, 0x83, 0x07, 0x42, 0x2c, 0x84, 0xf0,
        0x01, 0xa2, 0x51, 0x02, 0x20, 0x22, 0xda, 0xd9,
        0x72, 0x6b, 0x0a, 0xe3, 0xfe, 0x92, 0xbd, 0xa7,
        0x45, 0xa0, 0x6f, 0x2c, 0x00, 0xf9, 0x23, 0x42,
        0xa1, 0x86, 0xd8, 0x45, 0x18, 0x58, 0x8c, 0xf6,
        0x5f, 0x4d, 0xfa, 0xad, 0xa8, 0x01, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xa4, 0xc5, 0x74, 0xf0,
        0x04, 0x11, 0xdd, 0x2f, 0x97, 0x8c, 0xa5, 0xcd,
        0xc1, 0xb8, 0x48, 0xc3, 0x11, 0xcd, 0x78, 0x49,
        0xc0, 0x87, 0xad, 0x2f, 0x21, 0xa5, 0xbc, 0xe5,
        0xe8, 0xcc, 0x5a, 0xe9, 0x02, 0x20, 0x09, 0x0a,
        0xe3, 0x9a, 0x9b, 0xce, 0x2f, 0xb8, 0xbc, 0x87,
        0x9d, 0x7e, 0x9f, 0x90, 0x22, 0xdf, 0x24, 0x9f,
        0x41, 0xe2, 0x5e, 0x51, 0xf1, 0xa9, 0xbf, 0x64,
        0x47, 0xa9, 0xee, 0xff, 0xc0, 0x98, 0x01, 0x00,
        0x85, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21,
        0x03, 0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84,
        0xf8, 0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e,
        0x57, 0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca,
        0x81, 0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39,
        0xe7, 0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e,
        0x1b, 0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c,
        0xd9, 0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9,
        0xb5, 0xd1, 0x88, 0xac, 0x68, 0x68, 0xf6, 0x01,
        0x00, 0x00,
    };
    const uint8_t HS3[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x57,
        0x9c, 0x18, 0x3e, 0xca, 0x9e, 0x82, 0x36, 0xa5,
        0xd7, 0xf5, 0xdc, 0xd7, 0x9c, 0xfe, 0xc3, 0x2c,
        0x49, 0x7f, 0xdc, 0x0e, 0xc6, 0x15, 0x33, 0xcd,
        0xe9, 0x9e, 0xcd, 0x43, 0x6c, 0xad, 0xd1, 0x02,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x0b, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xaa, 0x91, 0x93, 0x2e,
        0x30, 0x52, 0x92, 0xcf, 0x99, 0x69, 0xcc, 0x23,
        0x50, 0x2b, 0xbf, 0x6c, 0xef, 0x83, 0xa5, 0xdf,
        0x39, 0xc9, 0x5a, 0xd0, 0x4a, 0x70, 0x7c, 0x4f,
        0x4f, 0xed, 0x5c, 0x77, 0x02, 0x20, 0x70, 0x99,
        0xfc, 0x0f, 0x3a, 0x9b, 0xfe, 0x1e, 0x76, 0x83,
        0xc0, 0xe9, 0xaa, 0x5e, 0x76, 0xc5, 0x43, 0x2e,
        0xb2, 0x06, 0x93, 0xbf, 0x4c, 0xb1, 0x82, 0xf0,
        0x4d, 0x38, 0x3d, 0xc9, 0xc8, 0xc2, 0x01, 0x47,
        0x30, 0x44, 0x02, 0x20, 0x0d, 0xf7, 0x6f, 0xea,
        0x71, 0x87, 0x45, 0xf3, 0xc5, 0x29, 0xba, 0xc7,
        0xfd, 0x37, 0x92, 0x3e, 0x73, 0x09, 0xce, 0x38,
        0xb2, 0x5c, 0x07, 0x81, 0xe4, 0xcf, 0x51, 0x4d,
        0xd9, 0xef, 0x8d, 0xc8, 0x02, 0x20, 0x41, 0x72,
        0x29, 0x57, 0x39, 0xdb, 0xae, 0x9f, 0xe0, 0x47,
        0x4d, 0xce, 0xe3, 0x60, 0x8e, 0x34, 0x33, 0xb4,
        0xb2, 0xaf, 0x3a, 0x2e, 0x67, 0x87, 0x10, 0x8b,
        0x02, 0xf8, 0x94, 0xdc, 0xdd, 0xa3, 0x01, 0x00,
        0x85, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21,
        0x03, 0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84,
        0xf8, 0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e,
        0x57, 0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca,
        0x81, 0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39,
        0xe7, 0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48,
        0x6f, 0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39,
        0xe2, 0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0,
        0x9d, 0x5b, 0x88, 0xac, 0x68, 0x68, 0xf7, 0x01,
        0x00, 0x00,
    };
    const uint8_t HS4[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x57,
        0x9c, 0x18, 0x3e, 0xca, 0x9e, 0x82, 0x36, 0xa5,
        0xd7, 0xf5, 0xdc, 0xd7, 0x9c, 0xfe, 0xc3, 0x2c,
        0x49, 0x7f, 0xdc, 0x0e, 0xc6, 0x15, 0x33, 0xcd,
        0xe9, 0x9e, 0xcd, 0x43, 0x6c, 0xad, 0xd1, 0x03,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xd9, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x35, 0xca, 0xc8, 0x80, 0x40,
        0xa5, 0xbb, 0xa4, 0x20, 0xb1, 0xc4, 0x25, 0x72,
        0x35, 0xd5, 0x01, 0x53, 0x09, 0x11, 0x34, 0x60,
        0xbc, 0x33, 0xf2, 0x85, 0x3c, 0xd8, 0x1c, 0xa3,
        0x6e, 0x63, 0x24, 0x02, 0x20, 0x2f, 0xc9, 0x4f,
        0xd3, 0xe8, 0x1e, 0x9d, 0x34, 0xa9, 0xd0, 0x17,
        0x82, 0xa0, 0x28, 0x4f, 0x30, 0x44, 0x37, 0x0d,
        0x03, 0xd6, 0x0f, 0x3f, 0xc0, 0x41, 0xe2, 0xda,
        0x08, 0x8d, 0x2d, 0xe5, 0x8f, 0x01, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x0d, 0xaf, 0x2e, 0xb7, 0xaf,
        0xd3, 0x55, 0xb4, 0xca, 0xf6, 0xfb, 0x08, 0x38,
        0x7b, 0x5f, 0x03, 0x19, 0x40, 0xea, 0x29, 0xd1,
        0xa9, 0xf3, 0x50, 0x71, 0x28, 0x8a, 0x83, 0x9c,
        0x90, 0x39, 0xe4, 0x02, 0x20, 0x67, 0x20, 0x1b,
        0x56, 0x24, 0x56, 0xe7, 0x94, 0x86, 0x16, 0xc1,
        0x3a, 0xcb, 0x87, 0x6b, 0x38, 0x6b, 0x51, 0x15,
        0x99, 0xb5, 0x8a, 0xc1, 0xd9, 0x4d, 0x12, 0x7f,
        0x91, 0xc5, 0x04, 0x63, 0xa6, 0x01, 0x20, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x8a,
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc, 0x1a,
        0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d, 0x23,
        0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27, 0x43,
        0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const struct {
        const uint8_t *tx;
        size_t len;
    } HTLC_TX[] = {
        { HS0, sizeof(HS0) },
        { HS1, sizeof(HS1) },
        { HS2, sizeof(HS2) },
        { HS3, sizeof(HS3) },
        { HS4, sizeof(HS4) },
    };
    ///////////////////////////////////////////////////////////


    bool ret;
    int index;


    //各HTLCのsuccess transaction作成
    ptarm_tx_t tx2;

    ptarm_buf_t ws_buf;
    ln_create_script_success(&ws_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);

    //どのHTLCxがVOUTにいるか(ない場合は-1)
    //どのVOUTがどのHTLCなのかは、どうやって見つけるべきなのだろう？
    //                    HTLC0     HTLC1       HTLC2       HTLC3       HTLC4
    const int VOUTS[] = { -1,       1,          0,          2,          3     };

    ptarm_buf_t local_sig = PTARM_BUF_INIT;
    for (int lp = 0; lp < 5; lp++) {
        uint64_t fee = (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? feeinfo.htlc_timeout : feeinfo.htlc_success;
        index = VOUTS[lp];
        if ((index >= 0) && (tx.vout[index].value >= feeinfo.dust_limit_satoshi + fee)) {
            ptarm_tx_init(&tx2);
            ln_create_htlc_tx(&tx2, tx.vout[index].value - fee, &ws_buf, htlcinfos[lp].type, htlcinfos[lp].expiry, txid_commit, index);

            const ptarm_buf_t remote_sig = { (uint8_t *)REMOTE_SIGS[lp].sig, (uint16_t)REMOTE_SIGS[lp].len };
//            printf("[%d]%s\n", lp, (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? "offered" : "received");
            ret = ln_sign_htlc_tx(&tx2,
                        &local_sig,
                        tx.vout[index].value,
                        &keys_local_commit,
                        &remote_sig,
                        PREIMAGES[lp],
                        &htlcinfos[lp].script,
                        HTLCSIGN_TO_SUCCESS);
            ASSERT_TRUE(ret);
            ptarm_buf_t hs;
            ptarm_tx_create(&hs, &tx2);
            //ptarm_print_tx(&tx2);
            //ptarm_print_rawtx(HTLC_TX[lp].tx, HTLC_TX[lp].len);
            ASSERT_EQ(0, memcmp(HTLC_TX[lp].tx, hs.buf, HTLC_TX[lp].len));
            ASSERT_EQ(HTLC_TX[lp].len, hs.len);
            ptarm_buf_free(&local_sig);
            ptarm_buf_free(&hs);
            ptarm_tx_free(&tx2);
        }
    }

    for (int lp = 0; lp < 5; lp++) {
        ptarm_buf_free((ptarm_buf_t *)&htlcinfos[lp].script);
    }
    ptarm_buf_free(&ws_buf);
    ptarm_tx_free(&tx2);

    ptarm_tx_free(&tx);
}


// name: commitment tx with 6 outputs untrimmed (maximum feerate)
//      Commitment Transaction
TEST_F(ln_bolt3_c, committx6max_commit)
{
    ptarm_tx_init(&tx);

    bool ret;

    //amounts
    const uint64_t MSAT_LOCAL = 6988000000LL;
    const uint64_t MSAT_REMOTE = 3000000000LL;


    feeinfo.feerate_per_kw = 2069;
    uint64_t fee_act = ln_fee_calc(&feeinfo, (const ln_htlcinfo_t **)pp_htlcinfos, 5);

//    printf("base fee_committx=%llu\n", (unsigned long long)feeinfo.commit);
//    printf("actual fee_committx=%llu\n", (unsigned long long)fee_act);
//    printf("fee success=%d\n", (int)feeinfo.htlc_success);
//    printf("fee timeout=%d\n", (int)feeinfo.htlc_timeout);
    ASSERT_EQ(1454, feeinfo.htlc_success);
    ASSERT_EQ(1371, feeinfo.htlc_timeout);
    ASSERT_EQ(2921, feeinfo.commit);
    ASSERT_EQ(3921, fee_act);


    ///////////////////////////////////////
    const uint8_t WS_HTLC0[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0xb8, 0xbc, 0xb0,
        0x7f, 0x63, 0x44, 0xb4, 0x2a, 0xb0, 0x42, 0x50,
        0xc8, 0x6a, 0x6e, 0x8b, 0x75, 0xd3, 0xfd, 0xbb,
        0xc6, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf4, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC1[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b, 0x2e,
        0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb, 0x7b,
        0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc, 0xe2,
        0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC2[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e, 0x1b,
        0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c, 0xd9,
        0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9, 0xb5,
        0xd1, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC3[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48, 0x6f,
        0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39, 0xe2,
        0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0, 0x9d,
        0x5b, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC4[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc, 0x1a,
        0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d, 0x23,
        0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27, 0x43,
        0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };

    ///////////////////////////////////////

    const struct {
        const uint8_t *ws;
        size_t len;
    } SCRIPTS[] = {
        { WS_HTLC0, sizeof(WS_HTLC0) },
        { WS_HTLC1, sizeof(WS_HTLC1) },
        { WS_HTLC2, sizeof(WS_HTLC2) },
        { WS_HTLC3, sizeof(WS_HTLC3) },
        { WS_HTLC4, sizeof(WS_HTLC4) }
    };

    for (int lp = 0; lp < 5; lp++) {
        ln_create_htlcinfo(&pp_htlcinfos[lp]->script, pp_htlcinfos[lp]->type, LOCAL_KEY, LOCAL_REVO_KEY, REMOTE_KEY, pp_htlcinfos[lp]->preimage_hash, pp_htlcinfos[lp]->expiry);

        ASSERT_EQ(0, memcmp(SCRIPTS[lp].ws, htlcinfos[lp].script.buf, SCRIPTS[lp].len));
        ASSERT_EQ(SCRIPTS[lp].len, htlcinfos[lp].script.len);
    }


    //to-local wscript
    ptarm_buf_t ws_local_buf;

    ln_create_script_local(&ws_local_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);
//    dumpbin(ws_local_buf.buf, ws_local_buf.len);
//    printf("-[to-local]---------------------\n");
//    ptarm_print_script(ws_local_buf.buf, ws_local_buf.len);
//    printf("----------------------: %d\n", ws_local_buf.len);
    const uint8_t TO_LOCAL_WSCRIPT[] = {
        0x63, 0x21, 0x02, 0x12, 0xa1, 0x40, 0xcd, 0x0c,
        0x65, 0x39, 0xd0, 0x7c, 0xd0, 0x8d, 0xfe, 0x09,
        0x98, 0x4d, 0xec, 0x32, 0x51, 0xea, 0x80, 0x8b,
        0x89, 0x2e, 0xfe, 0xac, 0x3e, 0xde, 0x94, 0x02,
        0xbf, 0x2b, 0x19, 0x67, 0x02, 0x90, 0x00, 0xb2,
        0x75, 0x21, 0x03, 0xfd, 0x59, 0x60, 0x52, 0x8d,
        0xc1, 0x52, 0x01, 0x49, 0x52, 0xef, 0xdb, 0x70,
        0x2a, 0x88, 0xf7, 0x1e, 0x3c, 0x16, 0x53, 0xb2,
        0x31, 0x44, 0x31, 0x70, 0x1e, 0xc7, 0x7e, 0x57,
        0xfd, 0xe8, 0x3c, 0x68, 0xac,
    };
    ASSERT_EQ(0, memcmp(TO_LOCAL_WSCRIPT, ws_local_buf.buf, sizeof(TO_LOCAL_WSCRIPT)));
    ASSERT_EQ(sizeof(TO_LOCAL_WSCRIPT), ws_local_buf.len);


    //tx

    ln_tx_cmt_t lntx_commit;
    lntx_commit.fund.txid = TXID_FUND;
    lntx_commit.fund.txid_index = TXID_FUND_INDEX;
    lntx_commit.fund.satoshi = PTARM_MBTC2SATOSHI(100);
    lntx_commit.fund.p_script = &funding2of2;
    lntx_commit.local.satoshi = LN_MSAT2SATOSHI(MSAT_LOCAL);
    lntx_commit.local.p_script = &ws_local_buf;
    lntx_commit.remote.satoshi = LN_MSAT2SATOSHI(MSAT_REMOTE);
    lntx_commit.remote.pubkey = REMOTE_KEY;
    lntx_commit.obscured = obscured;
    lntx_commit.p_feeinfo = &feeinfo;
    lntx_commit.pp_htlcinfo = pp_htlcinfos;
    lntx_commit.htlcinfo_num = 5;
    ptarm_buf_t buf_sig_local;

    ret = ln_create_commit_tx(&tx, &buf_sig_local, &lntx_commit, true, &priv_data);
    ASSERT_TRUE(ret);


    const uint8_t LOCAL_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x3c, 0xa8, 0xf3, 0x1c,
        0x6a, 0x47, 0x51, 0x9f, 0x83, 0x25, 0x5d, 0xc6,
        0x9f, 0x18, 0x94, 0xd9, 0xa6, 0xd7, 0x47, 0x6a,
        0x19, 0xf4, 0x98, 0xd3, 0x1e, 0xaf, 0x0c, 0xd3,
        0xa8, 0x5e, 0xeb, 0x63, 0x02, 0x20, 0x26, 0xfd,
        0x92, 0xdc, 0x75, 0x2b, 0x33, 0x90, 0x5c, 0x4c,
        0x83, 0x8c, 0x52, 0x8b, 0x69, 0x2a, 0x8a, 0xd4,
        0xce, 0xd9, 0x59, 0x99, 0x0b, 0x5d, 0x5e, 0xe2,
        0xff, 0x94, 0x0f, 0xa9, 0x0e, 0xea, 0x01,
    };
    ASSERT_EQ(0, memcmp(LOCAL_SIGNATURE, buf_sig_local.buf, sizeof(LOCAL_SIGNATURE)));
    ASSERT_EQ(sizeof(LOCAL_SIGNATURE), buf_sig_local.len);

    const uint8_t REMOTE_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x01, 0xd5, 0x5e, 0x48,
        0x8b, 0x8b, 0x03, 0x5b, 0x2d, 0xd2, 0x9d, 0x50,
        0xb6, 0x5b, 0x53, 0x09, 0x23, 0xa4, 0x16, 0xd4,
        0x7f, 0x37, 0x72, 0x84, 0x14, 0x5b, 0xc8, 0x76,
        0x7b, 0x1b, 0x6a, 0x75, 0x02, 0x20, 0x19, 0xbb,
        0x53, 0xdd, 0xfe, 0x1c, 0xef, 0xaf, 0x15, 0x6f,
        0x92, 0x47, 0x77, 0xea, 0xaf, 0x8f, 0xdc, 0xa1,
        0x81, 0x06, 0x95, 0xa7, 0xd0, 0xa2, 0x47, 0xad,
        0x2a, 0xfb, 0xa8, 0x23, 0x2e, 0xb4, 0x01,
    };
    ptarm_buf_t buf_sig_remote;
    ptarm_buf_alloccopy(&buf_sig_remote, REMOTE_SIGNATURE, sizeof(REMOTE_SIGNATURE));
    ret = set_vin_p2wsh_2of2(&tx, 0, key_fund_sort,
                &buf_sig_local,
                &buf_sig_remote,
                &funding2of2);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&buf_sig_local);
    ptarm_buf_free(&buf_sig_remote);

    //ptarm_print_tx(&tx);

    //TestVectorとのチェック
    const uint8_t COMMIT_TX[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xbe,
        0xf6, 0x7e, 0x4e, 0x2f, 0xb9, 0xdd, 0xee, 0xb3,
        0x46, 0x19, 0x73, 0xcd, 0x4c, 0x62, 0xab, 0xb3,
        0x50, 0x50, 0xb1, 0xad, 0xd7, 0x72, 0x99, 0x5b,
        0x82, 0x0b, 0x58, 0x4a, 0x48, 0x84, 0x89, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x38, 0xb0, 0x2b, 0x80,
        0x06, 0xd0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x40, 0x3d, 0x39, 0x47,
        0x47, 0xca, 0xe4, 0x2e, 0x98, 0xff, 0x01, 0x73,
        0x4a, 0xd5, 0xc0, 0x8f, 0x82, 0xba, 0x12, 0x3d,
        0x3d, 0x9a, 0x62, 0x0a, 0xbd, 0xa8, 0x89, 0x89,
        0x65, 0x1e, 0x2a, 0xb5, 0xd0, 0x07, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x20, 0x74,
        0x8e, 0xba, 0x94, 0x4f, 0xed, 0xc8, 0x82, 0x7f,
        0x6b, 0x06, 0xbc, 0x44, 0x67, 0x8f, 0x93, 0xc0,
        0xf9, 0xe6, 0x07, 0x8b, 0x35, 0xc6, 0x33, 0x1e,
        0xd3, 0x1e, 0x75, 0xf8, 0xce, 0x0c, 0x2d, 0xb8,
        0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22,
        0x00, 0x20, 0xc2, 0x0b, 0x5d, 0x1f, 0x85, 0x84,
        0xfd, 0x90, 0x44, 0x3e, 0x7b, 0x7b, 0x72, 0x01,
        0x36, 0x17, 0x4f, 0xa4, 0xb9, 0x33, 0x3c, 0x26,
        0x1d, 0x04, 0xdb, 0xbd, 0x01, 0x26, 0x35, 0xc0,
        0xf4, 0x19, 0xa0, 0x0f, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x22, 0x00, 0x20, 0x8c, 0x48, 0xd1,
        0x51, 0x60, 0x39, 0x7c, 0x97, 0x31, 0xdf, 0x9b,
        0xc3, 0xb2, 0x36, 0x65, 0x6e, 0xfb, 0x66, 0x65,
        0xfb, 0xfe, 0x92, 0xb4, 0xa6, 0x87, 0x8e, 0x88,
        0xa4, 0x99, 0xf7, 0x41, 0xc4, 0xc0, 0xc6, 0x2d,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x14,
        0xcc, 0xf1, 0xaf, 0x2f, 0x2a, 0xab, 0xee, 0x14,
        0xbb, 0x40, 0xfa, 0x38, 0x51, 0xab, 0x23, 0x01,
        0xde, 0x84, 0x31, 0x10, 0x77, 0x95, 0x6a, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x20, 0x4a,
        0xdb, 0x4e, 0x2f, 0x00, 0x64, 0x3d, 0xb3, 0x96,
        0xdd, 0x12, 0x0d, 0x4e, 0x7d, 0xc1, 0x76, 0x25,
        0xf5, 0xf2, 0xc1, 0x1a, 0x40, 0xd8, 0x57, 0xac,
        0xcc, 0x86, 0x2d, 0x6b, 0x7d, 0xd8, 0x0e, 0x04,
        0x00, 0x47, 0x30, 0x44, 0x02, 0x20, 0x3c, 0xa8,
        0xf3, 0x1c, 0x6a, 0x47, 0x51, 0x9f, 0x83, 0x25,
        0x5d, 0xc6, 0x9f, 0x18, 0x94, 0xd9, 0xa6, 0xd7,
        0x47, 0x6a, 0x19, 0xf4, 0x98, 0xd3, 0x1e, 0xaf,
        0x0c, 0xd3, 0xa8, 0x5e, 0xeb, 0x63, 0x02, 0x20,
        0x26, 0xfd, 0x92, 0xdc, 0x75, 0x2b, 0x33, 0x90,
        0x5c, 0x4c, 0x83, 0x8c, 0x52, 0x8b, 0x69, 0x2a,
        0x8a, 0xd4, 0xce, 0xd9, 0x59, 0x99, 0x0b, 0x5d,
        0x5e, 0xe2, 0xff, 0x94, 0x0f, 0xa9, 0x0e, 0xea,
        0x01, 0x47, 0x30, 0x44, 0x02, 0x20, 0x01, 0xd5,
        0x5e, 0x48, 0x8b, 0x8b, 0x03, 0x5b, 0x2d, 0xd2,
        0x9d, 0x50, 0xb6, 0x5b, 0x53, 0x09, 0x23, 0xa4,
        0x16, 0xd4, 0x7f, 0x37, 0x72, 0x84, 0x14, 0x5b,
        0xc8, 0x76, 0x7b, 0x1b, 0x6a, 0x75, 0x02, 0x20,
        0x19, 0xbb, 0x53, 0xdd, 0xfe, 0x1c, 0xef, 0xaf,
        0x15, 0x6f, 0x92, 0x47, 0x77, 0xea, 0xaf, 0x8f,
        0xdc, 0xa1, 0x81, 0x06, 0x95, 0xa7, 0xd0, 0xa2,
        0x47, 0xad, 0x2a, 0xfb, 0xa8, 0x23, 0x2e, 0xb4,
        0x01, 0x47, 0x52, 0x21, 0x02, 0x3d, 0xa0, 0x92,
        0xf6, 0x98, 0x0e, 0x58, 0xd2, 0xc0, 0x37, 0x17,
        0x31, 0x80, 0xe9, 0xa4, 0x65, 0x47, 0x60, 0x26,
        0xee, 0x50, 0xf9, 0x66, 0x95, 0x96, 0x3e, 0x8e,
        0xfe, 0x43, 0x6f, 0x54, 0xeb, 0x21, 0x03, 0x0e,
        0x9f, 0x7b, 0x62, 0x3d, 0x2c, 0xcc, 0x7c, 0x9b,
        0xd4, 0x4d, 0x66, 0xd5, 0xce, 0x21, 0xce, 0x50,
        0x4c, 0x0a, 0xcf, 0x63, 0x85, 0xa1, 0x32, 0xce,
        0xc6, 0xd3, 0xc3, 0x9f, 0xa7, 0x11, 0xc1, 0x52,
        0xae, 0x3e, 0x19, 0x52, 0x20,
    };
    //ptarm_print_rawtx(COMMIT_TX, sizeof(COMMIT_TX));
    ptarm_buf_t tx_buf;

    ptarm_tx_create(&tx_buf, &tx);
    ASSERT_EQ(0, memcmp(COMMIT_TX, tx_buf.buf, sizeof(COMMIT_TX)));
    ASSERT_EQ(sizeof(COMMIT_TX), tx_buf.len);
    ret = ptarm_tx_txid(txid_commit, &tx);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&tx_buf);

    ptarm_buf_free(&ws_local_buf);
}


// name: commitment tx with 6 outputs untrimmed (maximum feerate)
//      HTLC-success Transaction
TEST_F(ln_bolt3_c, committx6max_success_to)
{
    ///////////////////////////////////////////////////////////
    const uint8_t REMOTE_SIG0[] = {
        0x01,
    };
    const uint8_t REMOTE_SIG1[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xd0, 0x65, 0x56,
        0x9d, 0xcb, 0x94, 0xf0, 0x90, 0x34, 0x54, 0x02,
        0x73, 0x63, 0x85, 0xef, 0xeb, 0x8e, 0xa2, 0x65,
        0x13, 0x18, 0x04, 0xbe, 0xac, 0x06, 0xdd, 0x84,
        0xd1, 0x5d, 0xd2, 0xd6, 0x88, 0x02, 0x20, 0x66,
        0x4f, 0xeb, 0x0b, 0x4b, 0x2e, 0xb9, 0x85, 0xfa,
        0xdb, 0x6e, 0xc7, 0xdc, 0x58, 0xc9, 0x33, 0x4e,
        0xa8, 0x8c, 0xe5, 0x99, 0xa9, 0xbe, 0x76, 0x05,
        0x54, 0xa2, 0xd4, 0xb3, 0xb5, 0xd9, 0xf4, 0x01,
    };
    const uint8_t REMOTE_SIG2[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xd1, 0xcf, 0x35,
        0x4d, 0xe4, 0x1c, 0x13, 0x69, 0x33, 0x6c, 0xf8,
        0x5b, 0x22, 0x5e, 0xd0, 0x33, 0xf1, 0xf8, 0x98,
        0x2a, 0x01, 0xbe, 0x50, 0x36, 0x68, 0xdf, 0x75,
        0x6a, 0x7e, 0x66, 0x8b, 0x66, 0x02, 0x20, 0x01,
        0x25, 0x41, 0x44, 0xfb, 0x4d, 0x0e, 0xec, 0xc6,
        0x19, 0x08, 0xfc, 0xcc, 0x33, 0x88, 0x89, 0x1b,
        0xa1, 0x7c, 0x5d, 0x7a, 0x1a, 0x8c, 0x62, 0xbd,
        0xd3, 0x07, 0xe5, 0xa5, 0x13, 0xf9, 0x92, 0x01,
    };
    const uint8_t REMOTE_SIG3[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xd4, 0xe6, 0x9d,
        0x36, 0x3d, 0xe9, 0x93, 0x68, 0x4e, 0xae, 0x7b,
        0x37, 0x85, 0x3c, 0x40, 0x72, 0x2a, 0x4c, 0x1b,
        0x4a, 0x7b, 0x58, 0x8a, 0xd7, 0xb5, 0xd8, 0xa9,
        0xb5, 0x00, 0x61, 0x37, 0xa1, 0x02, 0x20, 0x7a,
        0x06, 0x9c, 0x62, 0x81, 0x70, 0xee, 0x34, 0xbe,
        0x56, 0x12, 0x74, 0x70, 0x51, 0xbd, 0xcc, 0x08,
        0x74, 0x66, 0xdb, 0xaa, 0x68, 0xd5, 0x75, 0x6e,
        0xa8, 0x1c, 0x10, 0x15, 0x5a, 0xef, 0x18, 0x01,
    };
    const uint8_t REMOTE_SIG4[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0x8e, 0xc8, 0x88,
        0xe3, 0x6e, 0x4a, 0x4b, 0x3d, 0xc2, 0xed, 0x6b,
        0x82, 0x33, 0x19, 0x85, 0x5b, 0x2a, 0xe0, 0x30,
        0x06, 0xca, 0x6a, 0xe0, 0xd9, 0xaa, 0x7e, 0x24,
        0xbf, 0xc1, 0xd6, 0xf0, 0x71, 0x02, 0x20, 0x3b,
        0x0f, 0x78, 0x88, 0x54, 0x72, 0xa6, 0x7f, 0xf4,
        0xfe, 0x59, 0x16, 0xc0, 0xbb, 0x66, 0x94, 0x87,
        0xd6, 0x59, 0x52, 0x75, 0x09, 0x51, 0x6f, 0xc3,
        0xa0, 0x8e, 0x87, 0xa2, 0xcc, 0x0a, 0x7c, 0x01,
    };
    const struct {
        const uint8_t *sig;
        size_t len;
    } REMOTE_SIGS[] = {
        { REMOTE_SIG0, sizeof(REMOTE_SIG0) },
        { REMOTE_SIG1, sizeof(REMOTE_SIG1) },
        { REMOTE_SIG2, sizeof(REMOTE_SIG2) },
        { REMOTE_SIG3, sizeof(REMOTE_SIG3) },
        { REMOTE_SIG4, sizeof(REMOTE_SIG4) },
    };

    const uint8_t HS0[] = {
        0x00,
    };
    const uint8_t HS1[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xca,
        0x94, 0xa9, 0xad, 0x51, 0x6e, 0xbc, 0x0c, 0x4b,
        0xdd, 0x7b, 0x62, 0x54, 0x87, 0x1b, 0xab, 0xfa,
        0x97, 0x8d, 0x5a, 0xcc, 0xaf, 0xb5, 0x54, 0x21,
        0x41, 0x37, 0xd3, 0x98, 0xbf, 0xcf, 0x6a, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x22, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xd0, 0x65, 0x56, 0x9d,
        0xcb, 0x94, 0xf0, 0x90, 0x34, 0x54, 0x02, 0x73,
        0x63, 0x85, 0xef, 0xeb, 0x8e, 0xa2, 0x65, 0x13,
        0x18, 0x04, 0xbe, 0xac, 0x06, 0xdd, 0x84, 0xd1,
        0x5d, 0xd2, 0xd6, 0x88, 0x02, 0x20, 0x66, 0x4f,
        0xeb, 0x0b, 0x4b, 0x2e, 0xb9, 0x85, 0xfa, 0xdb,
        0x6e, 0xc7, 0xdc, 0x58, 0xc9, 0x33, 0x4e, 0xa8,
        0x8c, 0xe5, 0x99, 0xa9, 0xbe, 0x76, 0x05, 0x54,
        0xa2, 0xd4, 0xb3, 0xb5, 0xd9, 0xf4, 0x01, 0x48,
        0x30, 0x45, 0x02, 0x21, 0x00, 0x91, 0x4b, 0xb2,
        0x32, 0xcd, 0x4b, 0x26, 0x90, 0xee, 0x3d, 0x6c,
        0xb8, 0xc3, 0x71, 0x3c, 0x4a, 0xc9, 0xc4, 0xfb,
        0x92, 0x53, 0x23, 0x06, 0x8d, 0x8b, 0x07, 0xf6,
        0x7c, 0x85, 0x41, 0xf8, 0xd9, 0x02, 0x20, 0x57,
        0x15, 0x2f, 0x5f, 0x16, 0x15, 0xb7, 0x93, 0xd2,
        0xd4, 0x5a, 0xac, 0x75, 0x18, 0x98, 0x9a, 0xe4,
        0xfe, 0x97, 0x0f, 0x28, 0xb9, 0xb5, 0xc7, 0x75,
        0x04, 0x79, 0x9d, 0x25, 0x43, 0x3f, 0x7f, 0x01,
        0x20, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x8a, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f,
        0x72, 0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98,
        0x6c, 0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7,
        0xb5, 0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94,
        0x85, 0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12,
        0x2c, 0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a,
        0x21, 0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26,
        0xd6, 0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c,
        0x82, 0x01, 0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b,
        0x6b, 0x2e, 0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0,
        0xfb, 0x7b, 0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c,
        0xdc, 0xe2, 0x39, 0x88, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1,
        0x75, 0xac, 0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const uint8_t HS2[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xca,
        0x94, 0xa9, 0xad, 0x51, 0x6e, 0xbc, 0x0c, 0x4b,
        0xdd, 0x7b, 0x62, 0x54, 0x87, 0x1b, 0xab, 0xfa,
        0x97, 0x8d, 0x5a, 0xcc, 0xaf, 0xb5, 0x54, 0x21,
        0x41, 0x37, 0xd3, 0x98, 0xbf, 0xcf, 0x6a, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x75, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xd1, 0xcf, 0x35, 0x4d,
        0xe4, 0x1c, 0x13, 0x69, 0x33, 0x6c, 0xf8, 0x5b,
        0x22, 0x5e, 0xd0, 0x33, 0xf1, 0xf8, 0x98, 0x2a,
        0x01, 0xbe, 0x50, 0x36, 0x68, 0xdf, 0x75, 0x6a,
        0x7e, 0x66, 0x8b, 0x66, 0x02, 0x20, 0x01, 0x25,
        0x41, 0x44, 0xfb, 0x4d, 0x0e, 0xec, 0xc6, 0x19,
        0x08, 0xfc, 0xcc, 0x33, 0x88, 0x89, 0x1b, 0xa1,
        0x7c, 0x5d, 0x7a, 0x1a, 0x8c, 0x62, 0xbd, 0xd3,
        0x07, 0xe5, 0xa5, 0x13, 0xf9, 0x92, 0x01, 0x47,
        0x30, 0x44, 0x02, 0x20, 0x56, 0xeb, 0x1a, 0xf4,
        0x29, 0x66, 0x0e, 0x45, 0xa1, 0xb0, 0xb6, 0x65,
        0x68, 0xcb, 0x8c, 0x4a, 0x3a, 0xa7, 0xe4, 0xc9,
        0xc2, 0x92, 0xd5, 0xd6, 0xc4, 0x7f, 0x86, 0xeb,
        0xf2, 0xc8, 0x83, 0x8f, 0x02, 0x20, 0x65, 0xc3,
        0xac, 0x4e, 0xbe, 0x98, 0x0c, 0xa7, 0xa4, 0x11,
        0x48, 0x56, 0x9b, 0xe4, 0xad, 0x87, 0x51, 0xb0,
        0xa7, 0x24, 0xa4, 0x14, 0x05, 0x69, 0x7e, 0xc5,
        0x50, 0x35, 0xda, 0xe6, 0x64, 0x02, 0x01, 0x00,
        0x85, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21,
        0x03, 0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84,
        0xf8, 0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e,
        0x57, 0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca,
        0x81, 0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39,
        0xe7, 0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e,
        0x1b, 0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c,
        0xd9, 0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9,
        0xb5, 0xd1, 0x88, 0xac, 0x68, 0x68, 0xf6, 0x01,
        0x00, 0x00,
    };
    const uint8_t HS3[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xca,
        0x94, 0xa9, 0xad, 0x51, 0x6e, 0xbc, 0x0c, 0x4b,
        0xdd, 0x7b, 0x62, 0x54, 0x87, 0x1b, 0xab, 0xfa,
        0x97, 0x8d, 0x5a, 0xcc, 0xaf, 0xb5, 0x54, 0x21,
        0x41, 0x37, 0xd3, 0x98, 0xbf, 0xcf, 0x6a, 0x02,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x5d, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xd4, 0xe6, 0x9d, 0x36,
        0x3d, 0xe9, 0x93, 0x68, 0x4e, 0xae, 0x7b, 0x37,
        0x85, 0x3c, 0x40, 0x72, 0x2a, 0x4c, 0x1b, 0x4a,
        0x7b, 0x58, 0x8a, 0xd7, 0xb5, 0xd8, 0xa9, 0xb5,
        0x00, 0x61, 0x37, 0xa1, 0x02, 0x20, 0x7a, 0x06,
        0x9c, 0x62, 0x81, 0x70, 0xee, 0x34, 0xbe, 0x56,
        0x12, 0x74, 0x70, 0x51, 0xbd, 0xcc, 0x08, 0x74,
        0x66, 0xdb, 0xaa, 0x68, 0xd5, 0x75, 0x6e, 0xa8,
        0x1c, 0x10, 0x15, 0x5a, 0xef, 0x18, 0x01, 0x47,
        0x30, 0x44, 0x02, 0x20, 0x0e, 0x36, 0x24, 0x43,
        0xf7, 0xaf, 0x83, 0x0b, 0x41, 0x97, 0x71, 0xe8,
        0xe1, 0x61, 0x4f, 0xc3, 0x91, 0xdb, 0x3a, 0x4e,
        0xb7, 0x99, 0x98, 0x9a, 0xbf, 0xc5, 0xab, 0x26,
        0xd6, 0xfc, 0xd0, 0x32, 0x02, 0x20, 0x39, 0xab,
        0x0c, 0xad, 0x1c, 0x14, 0xdf, 0xbe, 0x94, 0x46,
        0xbf, 0x84, 0x79, 0x65, 0xe5, 0x6f, 0xe0, 0x16,
        0xe0, 0xcb, 0xcf, 0x71, 0x9f, 0xd1, 0x8c, 0x1b,
        0xfb, 0xf5, 0x3e, 0xcb, 0xd9, 0xf9, 0x01, 0x00,
        0x85, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21,
        0x03, 0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84,
        0xf8, 0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e,
        0x57, 0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca,
        0x81, 0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39,
        0xe7, 0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48,
        0x6f, 0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39,
        0xe2, 0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0,
        0x9d, 0x5b, 0x88, 0xac, 0x68, 0x68, 0xf7, 0x01,
        0x00, 0x00,
    };
    const uint8_t HS4[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xca,
        0x94, 0xa9, 0xad, 0x51, 0x6e, 0xbc, 0x0c, 0x4b,
        0xdd, 0x7b, 0x62, 0x54, 0x87, 0x1b, 0xab, 0xfa,
        0x97, 0x8d, 0x5a, 0xcc, 0xaf, 0xb5, 0x54, 0x21,
        0x41, 0x37, 0xd3, 0x98, 0xbf, 0xcf, 0x6a, 0x03,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xf2, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0x8e, 0xc8, 0x88, 0xe3,
        0x6e, 0x4a, 0x4b, 0x3d, 0xc2, 0xed, 0x6b, 0x82,
        0x33, 0x19, 0x85, 0x5b, 0x2a, 0xe0, 0x30, 0x06,
        0xca, 0x6a, 0xe0, 0xd9, 0xaa, 0x7e, 0x24, 0xbf,
        0xc1, 0xd6, 0xf0, 0x71, 0x02, 0x20, 0x3b, 0x0f,
        0x78, 0x88, 0x54, 0x72, 0xa6, 0x7f, 0xf4, 0xfe,
        0x59, 0x16, 0xc0, 0xbb, 0x66, 0x94, 0x87, 0xd6,
        0x59, 0x52, 0x75, 0x09, 0x51, 0x6f, 0xc3, 0xa0,
        0x8e, 0x87, 0xa2, 0xcc, 0x0a, 0x7c, 0x01, 0x47,
        0x30, 0x44, 0x02, 0x20, 0x2c, 0x3e, 0x14, 0x28,
        0x2b, 0x84, 0xb0, 0x27, 0x05, 0xdf, 0xd0, 0x0a,
        0x6d, 0xa3, 0x96, 0xc9, 0xfe, 0x8a, 0x8b, 0xcb,
        0x1d, 0x3f, 0xdb, 0x4b, 0x20, 0xa4, 0xfe, 0xba,
        0x09, 0x44, 0x0e, 0x8b, 0x02, 0x20, 0x2b, 0x05,
        0x8b, 0x39, 0xaa, 0x9b, 0x0c, 0x86, 0x5b, 0x22,
        0x09, 0x5e, 0xdc, 0xd9, 0xff, 0x1f, 0x71, 0xbb,
        0xfe, 0x20, 0xaa, 0x49, 0x93, 0x75, 0x5e, 0x54,
        0xd0, 0x42, 0x75, 0x5e, 0xd0, 0xd5, 0x01, 0x20,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x8a, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc,
        0x1a, 0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d,
        0x23, 0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27,
        0x43, 0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d,
        0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d,
        0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97,
        0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e,
        0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52,
        0xae, 0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75,
        0xac, 0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const struct {
        const uint8_t *tx;
        size_t len;
    } HTLC_TX[] = {
        { HS0, sizeof(HS0) },
        { HS1, sizeof(HS1) },
        { HS2, sizeof(HS2) },
        { HS3, sizeof(HS3) },
        { HS4, sizeof(HS4) },
    };
    ///////////////////////////////////////////////////////////


    bool ret;
    int index;


    //各HTLCのsuccess transaction作成
    ptarm_tx_t tx2;

    ptarm_buf_t ws_buf;
    ln_create_script_success(&ws_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);

    //どのHTLCxがVOUTにいるか(ない場合は-1)
    //どのVOUTがどのHTLCなのかは、どうやって見つけるべきなのだろう？
    //                    HTLC0     HTLC1       HTLC2       HTLC3       HTLC4
    const int VOUTS[] = { -1,       1,          0,          2,          3     };

    ptarm_buf_t local_sig = PTARM_BUF_INIT;
    for (int lp = 0; lp < 5; lp++) {
        uint64_t fee = (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? feeinfo.htlc_timeout : feeinfo.htlc_success;
        index = VOUTS[lp];
        if ((index >= 0) && (tx.vout[index].value >= feeinfo.dust_limit_satoshi + fee)) {
            ptarm_tx_init(&tx2);
            ln_create_htlc_tx(&tx2, tx.vout[index].value - fee, &ws_buf, htlcinfos[lp].type, htlcinfos[lp].expiry, txid_commit, index);

            const ptarm_buf_t remote_sig = { (uint8_t *)REMOTE_SIGS[lp].sig, (uint16_t)REMOTE_SIGS[lp].len };
//            printf("[%d]%s\n", lp, (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? "offered" : "received");
            ret = ln_sign_htlc_tx(&tx2,
                        &local_sig,
                        tx.vout[index].value,
                        &keys_local_commit,
                        &remote_sig,
                        PREIMAGES[lp],
                        &htlcinfos[lp].script,
                        HTLCSIGN_TO_SUCCESS);
            ASSERT_TRUE(ret);
            ptarm_buf_t hs;
            ptarm_tx_create(&hs, &tx2);
            //ptarm_print_tx(&tx2);
            //ptarm_print_rawtx(HTLC_TX[lp].tx, HTLC_TX[lp].len);
            ASSERT_EQ(0, memcmp(HTLC_TX[lp].tx, hs.buf, HTLC_TX[lp].len));
            ASSERT_EQ(HTLC_TX[lp].len, hs.len);
            ptarm_buf_free(&local_sig);
            ptarm_buf_free(&hs);
            ptarm_tx_free(&tx2);
        }
    }

    for (int lp = 0; lp < 5; lp++) {
        ptarm_buf_free((ptarm_buf_t *)&htlcinfos[lp].script);
    }
    ptarm_buf_free(&ws_buf);
    ptarm_tx_free(&tx2);

    ptarm_tx_free(&tx);
}


// name: commitment tx with 5 outputs untrimmed (minimum feerate)
//      Commitment Transaction
TEST_F(ln_bolt3_c, committx5min_commit)
{
    ptarm_tx_init(&tx);

    bool ret;

    //amounts
    const uint64_t MSAT_LOCAL = 6988000000LL;
    const uint64_t MSAT_REMOTE = 3000000000LL;


    feeinfo.feerate_per_kw = 2070;
    uint64_t fee_act = ln_fee_calc(&feeinfo, (const ln_htlcinfo_t **)pp_htlcinfos, 5);

//    printf("base fee_committx=%llu\n", (unsigned long long)feeinfo.commit);
//    printf("actual fee_committx=%llu\n", (unsigned long long)fee_act);
//    printf("fee success=%d\n", (int)feeinfo.htlc_success);
//    printf("fee timeout=%d\n", (int)feeinfo.htlc_timeout);
    ASSERT_EQ(1455, feeinfo.htlc_success);
    ASSERT_EQ(1372, feeinfo.htlc_timeout);
    ASSERT_EQ(2566, feeinfo.commit);
    ASSERT_EQ(5566, fee_act);


    ///////////////////////////////////////
    const uint8_t WS_HTLC0[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0xb8, 0xbc, 0xb0,
        0x7f, 0x63, 0x44, 0xb4, 0x2a, 0xb0, 0x42, 0x50,
        0xc8, 0x6a, 0x6e, 0x8b, 0x75, 0xd3, 0xfd, 0xbb,
        0xc6, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf4, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC1[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b, 0x2e,
        0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb, 0x7b,
        0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc, 0xe2,
        0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC2[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e, 0x1b,
        0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c, 0xd9,
        0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9, 0xb5,
        0xd1, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC3[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48, 0x6f,
        0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39, 0xe2,
        0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0, 0x9d,
        0x5b, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC4[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc, 0x1a,
        0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d, 0x23,
        0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27, 0x43,
        0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };

    ///////////////////////////////////////

    const struct {
        const uint8_t *ws;
        size_t len;
    } SCRIPTS[] = {
        { WS_HTLC0, sizeof(WS_HTLC0) },
        { WS_HTLC1, sizeof(WS_HTLC1) },
        { WS_HTLC2, sizeof(WS_HTLC2) },
        { WS_HTLC3, sizeof(WS_HTLC3) },
        { WS_HTLC4, sizeof(WS_HTLC4) }
    };

    for (int lp = 0; lp < 5; lp++) {
        ln_create_htlcinfo(&pp_htlcinfos[lp]->script, pp_htlcinfos[lp]->type, LOCAL_KEY, LOCAL_REVO_KEY, REMOTE_KEY, pp_htlcinfos[lp]->preimage_hash, pp_htlcinfos[lp]->expiry);

        ASSERT_EQ(0, memcmp(SCRIPTS[lp].ws, htlcinfos[lp].script.buf, SCRIPTS[lp].len));
        ASSERT_EQ(SCRIPTS[lp].len, htlcinfos[lp].script.len);
    }


    //to-local wscript
    ptarm_buf_t ws_local_buf;

    ln_create_script_local(&ws_local_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);
//    dumpbin(ws_local_buf.buf, ws_local_buf.len);
//    printf("-[to-local]---------------------\n");
//    ptarm_print_script(ws_local_buf.buf, ws_local_buf.len);
//    printf("----------------------: %d\n", ws_local_buf.len);
    const uint8_t TO_LOCAL_WSCRIPT[] = {
        0x63, 0x21, 0x02, 0x12, 0xa1, 0x40, 0xcd, 0x0c,
        0x65, 0x39, 0xd0, 0x7c, 0xd0, 0x8d, 0xfe, 0x09,
        0x98, 0x4d, 0xec, 0x32, 0x51, 0xea, 0x80, 0x8b,
        0x89, 0x2e, 0xfe, 0xac, 0x3e, 0xde, 0x94, 0x02,
        0xbf, 0x2b, 0x19, 0x67, 0x02, 0x90, 0x00, 0xb2,
        0x75, 0x21, 0x03, 0xfd, 0x59, 0x60, 0x52, 0x8d,
        0xc1, 0x52, 0x01, 0x49, 0x52, 0xef, 0xdb, 0x70,
        0x2a, 0x88, 0xf7, 0x1e, 0x3c, 0x16, 0x53, 0xb2,
        0x31, 0x44, 0x31, 0x70, 0x1e, 0xc7, 0x7e, 0x57,
        0xfd, 0xe8, 0x3c, 0x68, 0xac,
    };
    ASSERT_EQ(0, memcmp(TO_LOCAL_WSCRIPT, ws_local_buf.buf, sizeof(TO_LOCAL_WSCRIPT)));
    ASSERT_EQ(sizeof(TO_LOCAL_WSCRIPT), ws_local_buf.len);


    //tx

    ln_tx_cmt_t lntx_commit;
    lntx_commit.fund.txid = TXID_FUND;
    lntx_commit.fund.txid_index = TXID_FUND_INDEX;
    lntx_commit.fund.satoshi = PTARM_MBTC2SATOSHI(100);
    lntx_commit.fund.p_script = &funding2of2;
    lntx_commit.local.satoshi = LN_MSAT2SATOSHI(MSAT_LOCAL);
    lntx_commit.local.p_script = &ws_local_buf;
    lntx_commit.remote.satoshi = LN_MSAT2SATOSHI(MSAT_REMOTE);
    lntx_commit.remote.pubkey = REMOTE_KEY;
    lntx_commit.obscured = obscured;
    lntx_commit.p_feeinfo = &feeinfo;
    lntx_commit.pp_htlcinfo = pp_htlcinfos;
    lntx_commit.htlcinfo_num = 5;
    ptarm_buf_t buf_sig_local;

    ret = ln_create_commit_tx(&tx, &buf_sig_local, &lntx_commit, true, &priv_data);
    ASSERT_TRUE(ret);


    const uint8_t LOCAL_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x44, 0x3c, 0xb0, 0x7f,
        0x65, 0x0a, 0xeb, 0xbb, 0xa1, 0x4b, 0x8b, 0xc8,
        0xd8, 0x1e, 0x09, 0x67, 0x12, 0x59, 0x0f, 0x52,
        0x4c, 0x59, 0x91, 0xac, 0x0e, 0xd3, 0xbb, 0xc8,
        0xfd, 0x3b, 0xd0, 0xc7, 0x02, 0x20, 0x28, 0xa6,
        0x35, 0xf5, 0x48, 0xe3, 0xca, 0x64, 0xb1, 0x9b,
        0x69, 0xb1, 0xea, 0x00, 0xf0, 0x5b, 0x22, 0x75,
        0x2f, 0x91, 0xda, 0xf0, 0xb6, 0xda, 0xb7, 0x8e,
        0x62, 0xba, 0x52, 0xeb, 0x7f, 0xd0, 0x01,
    };
    ASSERT_EQ(0, memcmp(LOCAL_SIGNATURE, buf_sig_local.buf, sizeof(LOCAL_SIGNATURE)));
    ASSERT_EQ(sizeof(LOCAL_SIGNATURE), buf_sig_local.len);

    const uint8_t REMOTE_SIGNATURE[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xf2, 0x37, 0x7f,
        0x7a, 0x67, 0xb7, 0xfc, 0x7f, 0x4e, 0x2c, 0x0c,
        0x9e, 0x3a, 0x7d, 0xe9, 0x35, 0xc3, 0x24, 0x17,
        0xf5, 0x66, 0x8e, 0xda, 0x31, 0xea, 0x1d, 0xb4,
        0x01, 0xb7, 0xdc, 0x53, 0x03, 0x02, 0x20, 0x41,
        0x5f, 0xdb, 0xc8, 0xe9, 0x1d, 0x0f, 0x73, 0x5e,
        0x70, 0xc2, 0x19, 0x52, 0x34, 0x27, 0x42, 0xe2,
        0x52, 0x49, 0xb0, 0xd0, 0x62, 0xd4, 0x3e, 0xfb,
        0xfc, 0x56, 0x44, 0x99, 0xf3, 0x75, 0x26, 0x01,
    };
    ptarm_buf_t buf_sig_remote;
    ptarm_buf_alloccopy(&buf_sig_remote, REMOTE_SIGNATURE, sizeof(REMOTE_SIGNATURE));
    ret = set_vin_p2wsh_2of2(&tx, 0, key_fund_sort,
                &buf_sig_local,
                &buf_sig_remote,
                &funding2of2);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&buf_sig_local);
    ptarm_buf_free(&buf_sig_remote);

    //ptarm_print_tx(&tx);

    //TestVectorとのチェック
    const uint8_t COMMIT_TX[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xbe,
        0xf6, 0x7e, 0x4e, 0x2f, 0xb9, 0xdd, 0xee, 0xb3,
        0x46, 0x19, 0x73, 0xcd, 0x4c, 0x62, 0xab, 0xb3,
        0x50, 0x50, 0xb1, 0xad, 0xd7, 0x72, 0x99, 0x5b,
        0x82, 0x0b, 0x58, 0x4a, 0x48, 0x84, 0x89, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x38, 0xb0, 0x2b, 0x80,
        0x05, 0xd0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x40, 0x3d, 0x39, 0x47,
        0x47, 0xca, 0xe4, 0x2e, 0x98, 0xff, 0x01, 0x73,
        0x4a, 0xd5, 0xc0, 0x8f, 0x82, 0xba, 0x12, 0x3d,
        0x3d, 0x9a, 0x62, 0x0a, 0xbd, 0xa8, 0x89, 0x89,
        0x65, 0x1e, 0x2a, 0xb5, 0xb8, 0x0b, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x20, 0xc2,
        0x0b, 0x5d, 0x1f, 0x85, 0x84, 0xfd, 0x90, 0x44,
        0x3e, 0x7b, 0x7b, 0x72, 0x01, 0x36, 0x17, 0x4f,
        0xa4, 0xb9, 0x33, 0x3c, 0x26, 0x1d, 0x04, 0xdb,
        0xbd, 0x01, 0x26, 0x35, 0xc0, 0xf4, 0x19, 0xa0,
        0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22,
        0x00, 0x20, 0x8c, 0x48, 0xd1, 0x51, 0x60, 0x39,
        0x7c, 0x97, 0x31, 0xdf, 0x9b, 0xc3, 0xb2, 0x36,
        0x65, 0x6e, 0xfb, 0x66, 0x65, 0xfb, 0xfe, 0x92,
        0xb4, 0xa6, 0x87, 0x8e, 0x88, 0xa4, 0x99, 0xf7,
        0x41, 0xc4, 0xc0, 0xc6, 0x2d, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x16, 0x00, 0x14, 0xcc, 0xf1, 0xaf,
        0x2f, 0x2a, 0xab, 0xee, 0x14, 0xbb, 0x40, 0xfa,
        0x38, 0x51, 0xab, 0x23, 0x01, 0xde, 0x84, 0x31,
        0x10, 0xda, 0x96, 0x6a, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x04, 0x00, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x44, 0x3c, 0xb0, 0x7f, 0x65,
        0x0a, 0xeb, 0xbb, 0xa1, 0x4b, 0x8b, 0xc8, 0xd8,
        0x1e, 0x09, 0x67, 0x12, 0x59, 0x0f, 0x52, 0x4c,
        0x59, 0x91, 0xac, 0x0e, 0xd3, 0xbb, 0xc8, 0xfd,
        0x3b, 0xd0, 0xc7, 0x02, 0x20, 0x28, 0xa6, 0x35,
        0xf5, 0x48, 0xe3, 0xca, 0x64, 0xb1, 0x9b, 0x69,
        0xb1, 0xea, 0x00, 0xf0, 0x5b, 0x22, 0x75, 0x2f,
        0x91, 0xda, 0xf0, 0xb6, 0xda, 0xb7, 0x8e, 0x62,
        0xba, 0x52, 0xeb, 0x7f, 0xd0, 0x01, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xf2, 0x37, 0x7f, 0x7a,
        0x67, 0xb7, 0xfc, 0x7f, 0x4e, 0x2c, 0x0c, 0x9e,
        0x3a, 0x7d, 0xe9, 0x35, 0xc3, 0x24, 0x17, 0xf5,
        0x66, 0x8e, 0xda, 0x31, 0xea, 0x1d, 0xb4, 0x01,
        0xb7, 0xdc, 0x53, 0x03, 0x02, 0x20, 0x41, 0x5f,
        0xdb, 0xc8, 0xe9, 0x1d, 0x0f, 0x73, 0x5e, 0x70,
        0xc2, 0x19, 0x52, 0x34, 0x27, 0x42, 0xe2, 0x52,
        0x49, 0xb0, 0xd0, 0x62, 0xd4, 0x3e, 0xfb, 0xfc,
        0x56, 0x44, 0x99, 0xf3, 0x75, 0x26, 0x01, 0x47,
        0x52, 0x21, 0x02, 0x3d, 0xa0, 0x92, 0xf6, 0x98,
        0x0e, 0x58, 0xd2, 0xc0, 0x37, 0x17, 0x31, 0x80,
        0xe9, 0xa4, 0x65, 0x47, 0x60, 0x26, 0xee, 0x50,
        0xf9, 0x66, 0x95, 0x96, 0x3e, 0x8e, 0xfe, 0x43,
        0x6f, 0x54, 0xeb, 0x21, 0x03, 0x0e, 0x9f, 0x7b,
        0x62, 0x3d, 0x2c, 0xcc, 0x7c, 0x9b, 0xd4, 0x4d,
        0x66, 0xd5, 0xce, 0x21, 0xce, 0x50, 0x4c, 0x0a,
        0xcf, 0x63, 0x85, 0xa1, 0x32, 0xce, 0xc6, 0xd3,
        0xc3, 0x9f, 0xa7, 0x11, 0xc1, 0x52, 0xae, 0x3e,
        0x19, 0x52, 0x20,
    };
    //ptarm_print_rawtx(COMMIT_TX, sizeof(COMMIT_TX));
    ptarm_buf_t tx_buf;

    ptarm_tx_create(&tx_buf, &tx);
    ASSERT_EQ(0, memcmp(COMMIT_TX, tx_buf.buf, sizeof(COMMIT_TX)));
    ASSERT_EQ(sizeof(COMMIT_TX), tx_buf.len);
    ret = ptarm_tx_txid(txid_commit, &tx);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&tx_buf);

    ptarm_buf_free(&ws_local_buf);
}


// name: commitment tx with 5 outputs untrimmed (minimum feerate)
//      HTLC-success Transaction
TEST_F(ln_bolt3_c, committx5min_success_to)
{
    ///////////////////////////////////////////////////////////
    const uint8_t REMOTE_SIG0[] = {
        0x01,
    };
    const uint8_t REMOTE_SIG1[] = {
        01
    };
    const uint8_t REMOTE_SIG2[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xee, 0xd1, 0x43,
        0xb1, 0xee, 0x4b, 0xed, 0x5d, 0xc3, 0xcd, 0xe4,
        0x0a, 0xfa, 0x5d, 0xb3, 0xe7, 0x35, 0x4c, 0xbf,
        0x9c, 0x44, 0x05, 0x4b, 0x5f, 0x71, 0x3f, 0x72,
        0x93, 0x56, 0xf0, 0x8c, 0xf7, 0x02, 0x20, 0x77,
        0x16, 0x1d, 0x17, 0x1c, 0x2b, 0xbd, 0x9b, 0xad,
        0xf3, 0xc9, 0x93, 0x4d, 0xe6, 0x5a, 0x49, 0x18,
        0xde, 0x03, 0xbb, 0xac, 0x14, 0x50, 0xf7, 0x15,
        0x27, 0x5f, 0x75, 0xb1, 0x03, 0xf8, 0x91, 0x01,
    };
    const uint8_t REMOTE_SIG3[] = {
        0x30, 0x44, 0x02, 0x20, 0x71, 0xe9, 0x35, 0x76,
        0x19, 0xfd, 0x8d, 0x29, 0xa4, 0x11, 0xdc, 0x05,
        0x3b, 0x32, 0x6a, 0x52, 0x24, 0xc5, 0xd1, 0x12,
        0x68, 0x07, 0x0e, 0x88, 0xec, 0xb9, 0x81, 0xb1,
        0x74, 0x74, 0x7c, 0x7a, 0x02, 0x20, 0x2b, 0x76,
        0x3a, 0xe2, 0x9a, 0x9d, 0x07, 0x32, 0xfa, 0x88,
        0x36, 0xdd, 0x85, 0x97, 0x43, 0x94, 0x60, 0xb5,
        0x04, 0x72, 0x18, 0x3f, 0x42, 0x00, 0x21, 0xb7,
        0x68, 0x98, 0x1b, 0x4f, 0x7c, 0xf6, 0x01,
    };
    const uint8_t REMOTE_SIG4[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xc9, 0x45, 0x8a,
        0x4d, 0x2c, 0xbb, 0x74, 0x17, 0x05, 0x57, 0x7d,
        0xeb, 0x0a, 0x89, 0x0e, 0x5c, 0xb9, 0x0e, 0xe1,
        0x41, 0xbe, 0x04, 0x00, 0xd3, 0x16, 0x2e, 0x53,
        0x37, 0x27, 0xc9, 0xcb, 0x21, 0x02, 0x20, 0x6e,
        0xdc, 0xf7, 0x65, 0xc5, 0xdc, 0x5e, 0x5f, 0x9b,
        0x97, 0x6e, 0xa8, 0x14, 0x9b, 0xf8, 0x60, 0x7b,
        0x5a, 0x0e, 0xfb, 0x30, 0x69, 0x11, 0x38, 0xe1,
        0x23, 0x13, 0x02, 0xb6, 0x40, 0xd2, 0xa4, 0x01,
    };
    const struct {
        const uint8_t *sig;
        size_t len;
    } REMOTE_SIGS[] = {
        { REMOTE_SIG0, sizeof(REMOTE_SIG0) },
        { REMOTE_SIG1, sizeof(REMOTE_SIG1) },
        { REMOTE_SIG2, sizeof(REMOTE_SIG2) },
        { REMOTE_SIG3, sizeof(REMOTE_SIG3) },
        { REMOTE_SIG4, sizeof(REMOTE_SIG4) },
    };

    const uint8_t HS0[] = {
        0x00,
    };
    const uint8_t HS1[] = {
        0x00,
    };
    const uint8_t HS2[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x40,
        0xa8, 0x3c, 0xe3, 0x64, 0x74, 0x7f, 0xf2, 0x77,
        0xf4, 0xd7, 0x59, 0x5d, 0x8d, 0x15, 0xf7, 0x08,
        0x41, 0x87, 0x98, 0x92, 0x2c, 0x40, 0xbc, 0x2b,
        0x05, 0x6a, 0xca, 0x54, 0x85, 0xa2, 0x18, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x74, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xee, 0xd1, 0x43, 0xb1,
        0xee, 0x4b, 0xed, 0x5d, 0xc3, 0xcd, 0xe4, 0x0a,
        0xfa, 0x5d, 0xb3, 0xe7, 0x35, 0x4c, 0xbf, 0x9c,
        0x44, 0x05, 0x4b, 0x5f, 0x71, 0x3f, 0x72, 0x93,
        0x56, 0xf0, 0x8c, 0xf7, 0x02, 0x20, 0x77, 0x16,
        0x1d, 0x17, 0x1c, 0x2b, 0xbd, 0x9b, 0xad, 0xf3,
        0xc9, 0x93, 0x4d, 0xe6, 0x5a, 0x49, 0x18, 0xde,
        0x03, 0xbb, 0xac, 0x14, 0x50, 0xf7, 0x15, 0x27,
        0x5f, 0x75, 0xb1, 0x03, 0xf8, 0x91, 0x01, 0x48,
        0x30, 0x45, 0x02, 0x21, 0x00, 0xa0, 0xd0, 0x43,
        0xed, 0x53, 0x3e, 0x7f, 0xb1, 0x91, 0x1e, 0x05,
        0x53, 0xd3, 0x1a, 0x8e, 0x2f, 0x3e, 0x6d, 0xe1,
        0x9d, 0xbc, 0x03, 0x52, 0x57, 0xf2, 0x9d, 0x74,
        0x7c, 0x5e, 0x02, 0xf1, 0xf5, 0x02, 0x20, 0x30,
        0xcd, 0x38, 0xd8, 0xe8, 0x42, 0x82, 0x17, 0x5d,
        0x49, 0xc1, 0xeb, 0xe0, 0x47, 0x0d, 0xb3, 0xeb,
        0xd5, 0x97, 0x68, 0xcf, 0x40, 0x78, 0x0a, 0x78,
        0x4e, 0x24, 0x8a, 0x43, 0x90, 0x4f, 0xb8, 0x01,
        0x00, 0x85, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f,
        0x72, 0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98,
        0x6c, 0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7,
        0xb5, 0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94,
        0x85, 0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12,
        0x2c, 0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a,
        0x21, 0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26,
        0xd6, 0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c,
        0x82, 0x01, 0x20, 0x87, 0x64, 0x75, 0x52, 0x7c,
        0x21, 0x03, 0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63,
        0x84, 0xf8, 0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c,
        0x5e, 0x57, 0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda,
        0xca, 0x81, 0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06,
        0x39, 0xe7, 0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4,
        0x3e, 0x1b, 0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f,
        0x7c, 0xd9, 0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3,
        0xa9, 0xb5, 0xd1, 0x88, 0xac, 0x68, 0x68, 0xf6,
        0x01, 0x00, 0x00,
    };
    const uint8_t HS3[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x40,
        0xa8, 0x3c, 0xe3, 0x64, 0x74, 0x7f, 0xf2, 0x77,
        0xf4, 0xd7, 0x59, 0x5d, 0x8d, 0x15, 0xf7, 0x08,
        0x41, 0x87, 0x98, 0x92, 0x2c, 0x40, 0xbc, 0x2b,
        0x05, 0x6a, 0xca, 0x54, 0x85, 0xa2, 0x18, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x5c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x71, 0xe9, 0x35, 0x76, 0x19,
        0xfd, 0x8d, 0x29, 0xa4, 0x11, 0xdc, 0x05, 0x3b,
        0x32, 0x6a, 0x52, 0x24, 0xc5, 0xd1, 0x12, 0x68,
        0x07, 0x0e, 0x88, 0xec, 0xb9, 0x81, 0xb1, 0x74,
        0x74, 0x7c, 0x7a, 0x02, 0x20, 0x2b, 0x76, 0x3a,
        0xe2, 0x9a, 0x9d, 0x07, 0x32, 0xfa, 0x88, 0x36,
        0xdd, 0x85, 0x97, 0x43, 0x94, 0x60, 0xb5, 0x04,
        0x72, 0x18, 0x3f, 0x42, 0x00, 0x21, 0xb7, 0x68,
        0x98, 0x1b, 0x4f, 0x7c, 0xf6, 0x01, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xad, 0xb1, 0xd6, 0x79,
        0xf6, 0x5f, 0x96, 0x17, 0x8b, 0x59, 0xf2, 0x3e,
        0xd3, 0x7d, 0x3b, 0x70, 0x44, 0x31, 0x18, 0xf3,
        0x45, 0x22, 0x4a, 0x07, 0xec, 0xb0, 0x43, 0xee,
        0xe2, 0xac, 0xc1, 0x57, 0x02, 0x20, 0x34, 0xd2,
        0x45, 0x24, 0xfe, 0x85, 0x71, 0x44, 0xa3, 0xbc,
        0xff, 0xf3, 0x06, 0x5a, 0x99, 0x94, 0xd0, 0xa6,
        0xec, 0x5f, 0x11, 0xc6, 0x81, 0xe4, 0x94, 0x31,
        0xd5, 0x73, 0xe2, 0x42, 0x61, 0x2d, 0x01, 0x00,
        0x85, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21,
        0x03, 0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84,
        0xf8, 0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e,
        0x57, 0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca,
        0x81, 0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39,
        0xe7, 0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48,
        0x6f, 0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39,
        0xe2, 0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0,
        0x9d, 0x5b, 0x88, 0xac, 0x68, 0x68, 0xf7, 0x01,
        0x00, 0x00,
    };
    const uint8_t HS4[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x40,
        0xa8, 0x3c, 0xe3, 0x64, 0x74, 0x7f, 0xf2, 0x77,
        0xf4, 0xd7, 0x59, 0x5d, 0x8d, 0x15, 0xf7, 0x08,
        0x41, 0x87, 0x98, 0x92, 0x2c, 0x40, 0xbc, 0x2b,
        0x05, 0x6a, 0xca, 0x54, 0x85, 0xa2, 0x18, 0x02,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xf1, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xc9, 0x45, 0x8a, 0x4d,
        0x2c, 0xbb, 0x74, 0x17, 0x05, 0x57, 0x7d, 0xeb,
        0x0a, 0x89, 0x0e, 0x5c, 0xb9, 0x0e, 0xe1, 0x41,
        0xbe, 0x04, 0x00, 0xd3, 0x16, 0x2e, 0x53, 0x37,
        0x27, 0xc9, 0xcb, 0x21, 0x02, 0x20, 0x6e, 0xdc,
        0xf7, 0x65, 0xc5, 0xdc, 0x5e, 0x5f, 0x9b, 0x97,
        0x6e, 0xa8, 0x14, 0x9b, 0xf8, 0x60, 0x7b, 0x5a,
        0x0e, 0xfb, 0x30, 0x69, 0x11, 0x38, 0xe1, 0x23,
        0x13, 0x02, 0xb6, 0x40, 0xd2, 0xa4, 0x01, 0x47,
        0x30, 0x44, 0x02, 0x20, 0x08, 0x31, 0x42, 0x2a,
        0xa4, 0xe1, 0xee, 0x6d, 0x55, 0xe0, 0xb8, 0x94,
        0x20, 0x17, 0x70, 0xa8, 0xf8, 0x81, 0x7a, 0x18,
        0x93, 0x56, 0xf2, 0xd7, 0x0b, 0xe7, 0x66, 0x33,
        0xff, 0xa6, 0xa6, 0xf6, 0x02, 0x20, 0x0d, 0xd1,
        0xb8, 0x4a, 0x48, 0x55, 0xdc, 0x67, 0x27, 0xdd,
        0x46, 0xc9, 0x8d, 0xaa, 0xe4, 0x3d, 0xfc, 0x70,
        0x88, 0x9d, 0x1b, 0xa7, 0xef, 0x00, 0x87, 0x52,
        0x9a, 0x57, 0xc0, 0x6e, 0x5e, 0x04, 0x01, 0x20,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x8a, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc,
        0x1a, 0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d,
        0x23, 0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27,
        0x43, 0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d,
        0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d,
        0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97,
        0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e,
        0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52,
        0xae, 0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75,
        0xac, 0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const struct {
        const uint8_t *tx;
        size_t len;
    } HTLC_TX[] = {
        { HS0, sizeof(HS0) },
        { HS1, sizeof(HS1) },
        { HS2, sizeof(HS2) },
        { HS3, sizeof(HS3) },
        { HS4, sizeof(HS4) },
    };
    ///////////////////////////////////////////////////////////


    bool ret;
    int index;


    //各HTLCのsuccess transaction作成
    ptarm_tx_t tx2;

    ptarm_buf_t ws_buf;
    ln_create_script_success(&ws_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);

    //どのHTLCxがVOUTにいるか(ない場合は-1)
    //どのVOUTがどのHTLCなのかは、どうやって見つけるべきなのだろう？
    //                    HTLC0     HTLC1       HTLC2       HTLC3       HTLC4
    const int VOUTS[] = { -1,       -1,         0,          1,          2     };

    ptarm_buf_t local_sig = PTARM_BUF_INIT;
    for (int lp = 0; lp < 5; lp++) {
        uint64_t fee = (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? feeinfo.htlc_timeout : feeinfo.htlc_success;
        index = VOUTS[lp];
        if ((index >= 0) && (tx.vout[index].value >= feeinfo.dust_limit_satoshi + fee)) {
            ptarm_tx_init(&tx2);
            ln_create_htlc_tx(&tx2, tx.vout[index].value - fee, &ws_buf, htlcinfos[lp].type, htlcinfos[lp].expiry, txid_commit, index);

            const ptarm_buf_t remote_sig = { (uint8_t *)REMOTE_SIGS[lp].sig, (uint16_t)REMOTE_SIGS[lp].len };
//            printf("[%d]%s\n", lp, (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? "offered" : "received");
            ret = ln_sign_htlc_tx(&tx2,
                        &local_sig,
                        tx.vout[index].value,
                        &keys_local_commit,
                        &remote_sig,
                        PREIMAGES[lp],
                        &htlcinfos[lp].script,
                        HTLCSIGN_TO_SUCCESS);
            ASSERT_TRUE(ret);
            ptarm_buf_t hs;
            ptarm_tx_create(&hs, &tx2);
            //ptarm_print_tx(&tx2);
            //ptarm_print_rawtx(HTLC_TX[lp].tx, HTLC_TX[lp].len);
            ASSERT_EQ(0, memcmp(HTLC_TX[lp].tx, hs.buf, HTLC_TX[lp].len));
            ASSERT_EQ(HTLC_TX[lp].len, hs.len);
            ptarm_buf_free(&local_sig);
            ptarm_buf_free(&hs);
            ptarm_tx_free(&tx2);
        }
    }

    for (int lp = 0; lp < 5; lp++) {
        ptarm_buf_free((ptarm_buf_t *)&htlcinfos[lp].script);
    }
    ptarm_buf_free(&ws_buf);
    ptarm_tx_free(&tx2);

    ptarm_tx_free(&tx);
}


// name: commitment tx with 5 outputs untrimmed (maximum feerate)
//      Commitment Transaction
TEST_F(ln_bolt3_c, committx5max_commit)
{
    ptarm_tx_init(&tx);

    bool ret;

    //amounts
    const uint64_t MSAT_LOCAL = 6988000000LL;
    const uint64_t MSAT_REMOTE = 3000000000LL;


    feeinfo.feerate_per_kw = 2194;
    uint64_t fee_act = ln_fee_calc(&feeinfo, (const ln_htlcinfo_t **)pp_htlcinfos, 5);

//    printf("base fee_committx=%llu\n", (unsigned long long)feeinfo.commit);
//    printf("actual fee_committx=%llu\n", (unsigned long long)fee_act);
//    printf("fee success=%d\n", (int)feeinfo.htlc_success);
//    printf("fee timeout=%d\n", (int)feeinfo.htlc_timeout);
    ASSERT_EQ(1542, feeinfo.htlc_success);
    ASSERT_EQ(1454, feeinfo.htlc_timeout);
    ASSERT_EQ(2720, feeinfo.commit);
    ASSERT_EQ(5720, fee_act);


    ///////////////////////////////////////
    const uint8_t WS_HTLC0[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0xb8, 0xbc, 0xb0,
        0x7f, 0x63, 0x44, 0xb4, 0x2a, 0xb0, 0x42, 0x50,
        0xc8, 0x6a, 0x6e, 0x8b, 0x75, 0xd3, 0xfd, 0xbb,
        0xc6, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf4, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC1[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b, 0x2e,
        0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb, 0x7b,
        0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc, 0xe2,
        0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC2[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e, 0x1b,
        0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c, 0xd9,
        0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9, 0xb5,
        0xd1, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC3[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48, 0x6f,
        0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39, 0xe2,
        0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0, 0x9d,
        0x5b, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC4[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc, 0x1a,
        0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d, 0x23,
        0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27, 0x43,
        0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };

    ///////////////////////////////////////

    const struct {
        const uint8_t *ws;
        size_t len;
    } SCRIPTS[] = {
        { WS_HTLC0, sizeof(WS_HTLC0) },
        { WS_HTLC1, sizeof(WS_HTLC1) },
        { WS_HTLC2, sizeof(WS_HTLC2) },
        { WS_HTLC3, sizeof(WS_HTLC3) },
        { WS_HTLC4, sizeof(WS_HTLC4) }
    };

    for (int lp = 0; lp < 5; lp++) {
        ln_create_htlcinfo(&pp_htlcinfos[lp]->script, pp_htlcinfos[lp]->type, LOCAL_KEY, LOCAL_REVO_KEY, REMOTE_KEY, pp_htlcinfos[lp]->preimage_hash, pp_htlcinfos[lp]->expiry);

        ASSERT_EQ(0, memcmp(SCRIPTS[lp].ws, htlcinfos[lp].script.buf, SCRIPTS[lp].len));
        ASSERT_EQ(SCRIPTS[lp].len, htlcinfos[lp].script.len);
    }


    //to-local wscript
    ptarm_buf_t ws_local_buf;

    ln_create_script_local(&ws_local_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);
//    dumpbin(ws_local_buf.buf, ws_local_buf.len);
//    printf("-[to-local]---------------------\n");
//    ptarm_print_script(ws_local_buf.buf, ws_local_buf.len);
//    printf("----------------------: %d\n", ws_local_buf.len);
    const uint8_t TO_LOCAL_WSCRIPT[] = {
        0x63, 0x21, 0x02, 0x12, 0xa1, 0x40, 0xcd, 0x0c,
        0x65, 0x39, 0xd0, 0x7c, 0xd0, 0x8d, 0xfe, 0x09,
        0x98, 0x4d, 0xec, 0x32, 0x51, 0xea, 0x80, 0x8b,
        0x89, 0x2e, 0xfe, 0xac, 0x3e, 0xde, 0x94, 0x02,
        0xbf, 0x2b, 0x19, 0x67, 0x02, 0x90, 0x00, 0xb2,
        0x75, 0x21, 0x03, 0xfd, 0x59, 0x60, 0x52, 0x8d,
        0xc1, 0x52, 0x01, 0x49, 0x52, 0xef, 0xdb, 0x70,
        0x2a, 0x88, 0xf7, 0x1e, 0x3c, 0x16, 0x53, 0xb2,
        0x31, 0x44, 0x31, 0x70, 0x1e, 0xc7, 0x7e, 0x57,
        0xfd, 0xe8, 0x3c, 0x68, 0xac,
    };
    ASSERT_EQ(0, memcmp(TO_LOCAL_WSCRIPT, ws_local_buf.buf, sizeof(TO_LOCAL_WSCRIPT)));
    ASSERT_EQ(sizeof(TO_LOCAL_WSCRIPT), ws_local_buf.len);


    //tx

    ln_tx_cmt_t lntx_commit;
    lntx_commit.fund.txid = TXID_FUND;
    lntx_commit.fund.txid_index = TXID_FUND_INDEX;
    lntx_commit.fund.satoshi = PTARM_MBTC2SATOSHI(100);
    lntx_commit.fund.p_script = &funding2of2;
    lntx_commit.local.satoshi = LN_MSAT2SATOSHI(MSAT_LOCAL);
    lntx_commit.local.p_script = &ws_local_buf;
    lntx_commit.remote.satoshi = LN_MSAT2SATOSHI(MSAT_REMOTE);
    lntx_commit.remote.pubkey = REMOTE_KEY;
    lntx_commit.obscured = obscured;
    lntx_commit.p_feeinfo = &feeinfo;
    lntx_commit.pp_htlcinfo = pp_htlcinfos;
    lntx_commit.htlcinfo_num = 5;
    ptarm_buf_t buf_sig_local;

    ret = ln_create_commit_tx(&tx, &buf_sig_local, &lntx_commit, true, &priv_data);
    ASSERT_TRUE(ret);


    const uint8_t LOCAL_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x3b, 0x1b, 0x01, 0x0c,
        0x10, 0x9c, 0x2e, 0xcb, 0xe7, 0xfe, 0xb2, 0xd2,
        0x59, 0xb9, 0xc4, 0x12, 0x6b, 0xd5, 0xdc, 0x99,
        0xee, 0x69, 0x3c, 0x42, 0x2e, 0xc0, 0xa5, 0x78,
        0x1f, 0xe1, 0x61, 0xba, 0x02, 0x20, 0x57, 0x1f,
        0xe4, 0xe2, 0xc6, 0x49, 0xde, 0xa9, 0xc7, 0xaa,
        0xf7, 0xe4, 0x9b, 0x38, 0x29, 0x62, 0xf6, 0xa3,
        0x49, 0x49, 0x63, 0xc9, 0x7d, 0x80, 0xfe, 0xf9,
        0xa4, 0x30, 0xca, 0x3f, 0x70, 0x61, 0x01,
    };
    ASSERT_EQ(0, memcmp(LOCAL_SIGNATURE, buf_sig_local.buf, sizeof(LOCAL_SIGNATURE)));
    ASSERT_EQ(sizeof(LOCAL_SIGNATURE), buf_sig_local.len);

    const uint8_t REMOTE_SIGNATURE[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xd3, 0x3c, 0x4e,
        0x54, 0x1a, 0xa1, 0xd2, 0x55, 0xd4, 0x1e, 0xa9,
        0xa3, 0xb4, 0x43, 0xb3, 0xb8, 0x22, 0xad, 0x8f,
        0x7f, 0x86, 0x86, 0x26, 0x38, 0xaa, 0xc1, 0xf6,
        0x9f, 0x8f, 0x76, 0x05, 0x77, 0x02, 0x20, 0x07,
        0xe2, 0xa1, 0x8e, 0x69, 0x31, 0xce, 0x3d, 0x3a,
        0x80, 0x4b, 0x1c, 0x78, 0xed, 0xa1, 0xde, 0x17,
        0xdb, 0xe1, 0xfb, 0x7a, 0x95, 0x48, 0x8c, 0x9a,
        0x4e, 0xc8, 0x62, 0x03, 0x95, 0x33, 0x48, 0x01,
    };
    ptarm_buf_t buf_sig_remote;
    ptarm_buf_alloccopy(&buf_sig_remote, REMOTE_SIGNATURE, sizeof(REMOTE_SIGNATURE));
    ret = set_vin_p2wsh_2of2(&tx, 0, key_fund_sort,
                &buf_sig_local,
                &buf_sig_remote,
                &funding2of2);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&buf_sig_local);
    ptarm_buf_free(&buf_sig_remote);

    //ptarm_print_tx(&tx);

    //TestVectorとのチェック
    const uint8_t COMMIT_TX[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xbe,
        0xf6, 0x7e, 0x4e, 0x2f, 0xb9, 0xdd, 0xee, 0xb3,
        0x46, 0x19, 0x73, 0xcd, 0x4c, 0x62, 0xab, 0xb3,
        0x50, 0x50, 0xb1, 0xad, 0xd7, 0x72, 0x99, 0x5b,
        0x82, 0x0b, 0x58, 0x4a, 0x48, 0x84, 0x89, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x38, 0xb0, 0x2b, 0x80,
        0x05, 0xd0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x40, 0x3d, 0x39, 0x47,
        0x47, 0xca, 0xe4, 0x2e, 0x98, 0xff, 0x01, 0x73,
        0x4a, 0xd5, 0xc0, 0x8f, 0x82, 0xba, 0x12, 0x3d,
        0x3d, 0x9a, 0x62, 0x0a, 0xbd, 0xa8, 0x89, 0x89,
        0x65, 0x1e, 0x2a, 0xb5, 0xb8, 0x0b, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x20, 0xc2,
        0x0b, 0x5d, 0x1f, 0x85, 0x84, 0xfd, 0x90, 0x44,
        0x3e, 0x7b, 0x7b, 0x72, 0x01, 0x36, 0x17, 0x4f,
        0xa4, 0xb9, 0x33, 0x3c, 0x26, 0x1d, 0x04, 0xdb,
        0xbd, 0x01, 0x26, 0x35, 0xc0, 0xf4, 0x19, 0xa0,
        0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22,
        0x00, 0x20, 0x8c, 0x48, 0xd1, 0x51, 0x60, 0x39,
        0x7c, 0x97, 0x31, 0xdf, 0x9b, 0xc3, 0xb2, 0x36,
        0x65, 0x6e, 0xfb, 0x66, 0x65, 0xfb, 0xfe, 0x92,
        0xb4, 0xa6, 0x87, 0x8e, 0x88, 0xa4, 0x99, 0xf7,
        0x41, 0xc4, 0xc0, 0xc6, 0x2d, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x16, 0x00, 0x14, 0xcc, 0xf1, 0xaf,
        0x2f, 0x2a, 0xab, 0xee, 0x14, 0xbb, 0x40, 0xfa,
        0x38, 0x51, 0xab, 0x23, 0x01, 0xde, 0x84, 0x31,
        0x10, 0x40, 0x96, 0x6a, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x04, 0x00, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x3b, 0x1b, 0x01, 0x0c, 0x10,
        0x9c, 0x2e, 0xcb, 0xe7, 0xfe, 0xb2, 0xd2, 0x59,
        0xb9, 0xc4, 0x12, 0x6b, 0xd5, 0xdc, 0x99, 0xee,
        0x69, 0x3c, 0x42, 0x2e, 0xc0, 0xa5, 0x78, 0x1f,
        0xe1, 0x61, 0xba, 0x02, 0x20, 0x57, 0x1f, 0xe4,
        0xe2, 0xc6, 0x49, 0xde, 0xa9, 0xc7, 0xaa, 0xf7,
        0xe4, 0x9b, 0x38, 0x29, 0x62, 0xf6, 0xa3, 0x49,
        0x49, 0x63, 0xc9, 0x7d, 0x80, 0xfe, 0xf9, 0xa4,
        0x30, 0xca, 0x3f, 0x70, 0x61, 0x01, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xd3, 0x3c, 0x4e, 0x54,
        0x1a, 0xa1, 0xd2, 0x55, 0xd4, 0x1e, 0xa9, 0xa3,
        0xb4, 0x43, 0xb3, 0xb8, 0x22, 0xad, 0x8f, 0x7f,
        0x86, 0x86, 0x26, 0x38, 0xaa, 0xc1, 0xf6, 0x9f,
        0x8f, 0x76, 0x05, 0x77, 0x02, 0x20, 0x07, 0xe2,
        0xa1, 0x8e, 0x69, 0x31, 0xce, 0x3d, 0x3a, 0x80,
        0x4b, 0x1c, 0x78, 0xed, 0xa1, 0xde, 0x17, 0xdb,
        0xe1, 0xfb, 0x7a, 0x95, 0x48, 0x8c, 0x9a, 0x4e,
        0xc8, 0x62, 0x03, 0x95, 0x33, 0x48, 0x01, 0x47,
        0x52, 0x21, 0x02, 0x3d, 0xa0, 0x92, 0xf6, 0x98,
        0x0e, 0x58, 0xd2, 0xc0, 0x37, 0x17, 0x31, 0x80,
        0xe9, 0xa4, 0x65, 0x47, 0x60, 0x26, 0xee, 0x50,
        0xf9, 0x66, 0x95, 0x96, 0x3e, 0x8e, 0xfe, 0x43,
        0x6f, 0x54, 0xeb, 0x21, 0x03, 0x0e, 0x9f, 0x7b,
        0x62, 0x3d, 0x2c, 0xcc, 0x7c, 0x9b, 0xd4, 0x4d,
        0x66, 0xd5, 0xce, 0x21, 0xce, 0x50, 0x4c, 0x0a,
        0xcf, 0x63, 0x85, 0xa1, 0x32, 0xce, 0xc6, 0xd3,
        0xc3, 0x9f, 0xa7, 0x11, 0xc1, 0x52, 0xae, 0x3e,
        0x19, 0x52, 0x20,
    };
    //ptarm_print_rawtx(COMMIT_TX, sizeof(COMMIT_TX));
    ptarm_buf_t tx_buf;

    ptarm_tx_create(&tx_buf, &tx);
    ASSERT_EQ(0, memcmp(COMMIT_TX, tx_buf.buf, sizeof(COMMIT_TX)));
    ASSERT_EQ(sizeof(COMMIT_TX), tx_buf.len);
    ret = ptarm_tx_txid(txid_commit, &tx);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&tx_buf);

    ptarm_buf_free(&ws_local_buf);
}


// name: commitment tx with 5 outputs untrimmed (maximum feerate)
//      HTLC-success Transaction
TEST_F(ln_bolt3_c, committx5max_success_to)
{
    ///////////////////////////////////////////////////////////
    const uint8_t REMOTE_SIG0[] = {
        0x01,
    };
    const uint8_t REMOTE_SIG1[] = {
        01
    };
    const uint8_t REMOTE_SIG2[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0x9e, 0xd2, 0xf0,
        0xa6, 0x7f, 0x99, 0xe2, 0x9c, 0x3c, 0x8c, 0xf4,
        0x5c, 0x08, 0x20, 0x7b, 0x76, 0x59, 0x80, 0x69,
        0x77, 0x81, 0xbb, 0x72, 0x7f, 0xe0, 0xb1, 0x41,
        0x6d, 0xe0, 0xe7, 0x62, 0x29, 0x02, 0x20, 0x60,
        0x52, 0x68, 0x42, 0x29, 0xbc, 0x17, 0x14, 0x19,
        0xed, 0x29, 0x0f, 0x4b, 0x61, 0x5c, 0x94, 0x3f,
        0x81, 0x9c, 0x02, 0x62, 0x41, 0x4e, 0x43, 0xc5,
        0xb9, 0x1d, 0xcf, 0x72, 0xdd, 0xcf, 0x44, 0x01,
    };
    const uint8_t REMOTE_SIG3[] = {
        0x30, 0x44, 0x02, 0x20, 0x15, 0x5d, 0x3b, 0x90,
        0xc6, 0x7c, 0x33, 0xa8, 0x32, 0x19, 0x96, 0xa9,
        0xbe, 0x5b, 0x82, 0x43, 0x1b, 0x0c, 0x12, 0x66,
        0x13, 0xbe, 0x75, 0x1d, 0x40, 0x06, 0x69, 0xda,
        0x9d, 0x5c, 0x69, 0x67, 0x02, 0x20, 0x43, 0x18,
        0x44, 0x8b, 0xcd, 0x48, 0x82, 0x44, 0x39, 0xd2,
        0xc6, 0xa7, 0x0b, 0xe6, 0xe5, 0x74, 0x74, 0x46,
        0xbe, 0x47, 0xff, 0x45, 0x97, 0x7c, 0xf4, 0x16,
        0x72, 0xbd, 0xc9, 0xb6, 0xb1, 0x2d, 0x01,
    };
    const uint8_t REMOTE_SIG4[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xa1, 0x2a, 0x9a,
        0x47, 0x3e, 0xce, 0x54, 0x85, 0x84, 0xaa, 0xbd,
        0xd0, 0x51, 0x77, 0x90, 0x25, 0xa5, 0xed, 0x40,
        0x77, 0xc4, 0xb7, 0xaa, 0x37, 0x6e, 0xc7, 0xa0,
        0xb1, 0x64, 0x5e, 0x5a, 0x48, 0x02, 0x20, 0x39,
        0x49, 0x0b, 0x33, 0x3f, 0x53, 0xb5, 0xb3, 0xe2,
        0xdd, 0xde, 0x1d, 0x80, 0x9e, 0x49, 0x2c, 0xba,
        0x2b, 0x3e, 0x5f, 0xc3, 0xa4, 0x36, 0xcd, 0x3f,
        0xfb, 0x4c, 0xd3, 0xd5, 0x00, 0xfa, 0x5a, 0x01,
    };
    const struct {
        const uint8_t *sig;
        size_t len;
    } REMOTE_SIGS[] = {
        { REMOTE_SIG0, sizeof(REMOTE_SIG0) },
        { REMOTE_SIG1, sizeof(REMOTE_SIG1) },
        { REMOTE_SIG2, sizeof(REMOTE_SIG2) },
        { REMOTE_SIG3, sizeof(REMOTE_SIG3) },
        { REMOTE_SIG4, sizeof(REMOTE_SIG4) },
    };

    const uint8_t HS0[] = {
        0x00,
    };
    const uint8_t HS1[] = {

    };
    const uint8_t HS2[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xfb,
        0x82, 0x4d, 0x4e, 0x4d, 0xaf, 0xc0, 0xf5, 0x67,
        0x78, 0x9d, 0xee, 0x3a, 0x6b, 0xce, 0x8d, 0x41,
        0x1f, 0xe8, 0x0f, 0x55, 0x63, 0xd8, 0xcd, 0xfd,
        0xcc, 0x7d, 0x7e, 0x44, 0x47, 0xd4, 0x3a, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x22, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0x9e, 0xd2, 0xf0, 0xa6,
        0x7f, 0x99, 0xe2, 0x9c, 0x3c, 0x8c, 0xf4, 0x5c,
        0x08, 0x20, 0x7b, 0x76, 0x59, 0x80, 0x69, 0x77,
        0x81, 0xbb, 0x72, 0x7f, 0xe0, 0xb1, 0x41, 0x6d,
        0xe0, 0xe7, 0x62, 0x29, 0x02, 0x20, 0x60, 0x52,
        0x68, 0x42, 0x29, 0xbc, 0x17, 0x14, 0x19, 0xed,
        0x29, 0x0f, 0x4b, 0x61, 0x5c, 0x94, 0x3f, 0x81,
        0x9c, 0x02, 0x62, 0x41, 0x4e, 0x43, 0xc5, 0xb9,
        0x1d, 0xcf, 0x72, 0xdd, 0xcf, 0x44, 0x01, 0x47,
        0x30, 0x44, 0x02, 0x20, 0x04, 0xad, 0x5f, 0x04,
        0xae, 0x69, 0xc7, 0x1b, 0x3b, 0x14, 0x1d, 0x4d,
        0xb9, 0xd0, 0xd4, 0xc3, 0x8d, 0x84, 0x00, 0x9f,
        0xb3, 0xcf, 0xee, 0xae, 0x6e, 0xfd, 0xad, 0x41,
        0x44, 0x87, 0xa9, 0xa0, 0x02, 0x20, 0x42, 0xd3,
        0xfe, 0x13, 0x88, 0xc1, 0xff, 0x51, 0x7d, 0x1d,
        0xa7, 0xfb, 0x40, 0x25, 0x66, 0x3d, 0x37, 0x2c,
        0x14, 0x72, 0x8e, 0xd5, 0x2d, 0xc8, 0x86, 0x08,
        0x36, 0x34, 0x50, 0xff, 0x6a, 0x2f, 0x01, 0x00,
        0x85, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21,
        0x03, 0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84,
        0xf8, 0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e,
        0x57, 0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca,
        0x81, 0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39,
        0xe7, 0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e,
        0x1b, 0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c,
        0xd9, 0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9,
        0xb5, 0xd1, 0x88, 0xac, 0x68, 0x68, 0xf6, 0x01,
        0x00, 0x00,
    };
    const uint8_t HS3[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xfb,
        0x82, 0x4d, 0x4e, 0x4d, 0xaf, 0xc0, 0xf5, 0x67,
        0x78, 0x9d, 0xee, 0x3a, 0x6b, 0xce, 0x8d, 0x41,
        0x1f, 0xe8, 0x0f, 0x55, 0x63, 0xd8, 0xcd, 0xfd,
        0xcc, 0x7d, 0x7e, 0x44, 0x47, 0xd4, 0x3a, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x0a, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x15, 0x5d, 0x3b, 0x90, 0xc6,
        0x7c, 0x33, 0xa8, 0x32, 0x19, 0x96, 0xa9, 0xbe,
        0x5b, 0x82, 0x43, 0x1b, 0x0c, 0x12, 0x66, 0x13,
        0xbe, 0x75, 0x1d, 0x40, 0x06, 0x69, 0xda, 0x9d,
        0x5c, 0x69, 0x67, 0x02, 0x20, 0x43, 0x18, 0x44,
        0x8b, 0xcd, 0x48, 0x82, 0x44, 0x39, 0xd2, 0xc6,
        0xa7, 0x0b, 0xe6, 0xe5, 0x74, 0x74, 0x46, 0xbe,
        0x47, 0xff, 0x45, 0x97, 0x7c, 0xf4, 0x16, 0x72,
        0xbd, 0xc9, 0xb6, 0xb1, 0x2d, 0x01, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x17, 0x07, 0x05, 0x0c, 0x87,
        0x0c, 0x1f, 0x77, 0xcc, 0x3e, 0xd5, 0x8d, 0x6d,
        0x71, 0xbf, 0x28, 0x1d, 0xe2, 0x39, 0xe9, 0xea,
        0xbd, 0x8e, 0xf0, 0x95, 0x5b, 0xad, 0x0d, 0x7f,
        0xe3, 0x8d, 0xcc, 0x02, 0x20, 0x4d, 0x36, 0xd8,
        0x0d, 0x00, 0x19, 0xb3, 0xa7, 0x1e, 0x64, 0x6a,
        0x08, 0xfa, 0x4a, 0x56, 0x07, 0x76, 0x1d, 0x34,
        0x1a, 0xe8, 0xbe, 0x37, 0x19, 0x46, 0xeb, 0xe4,
        0x37, 0xc2, 0x89, 0xc9, 0x15, 0x01, 0x00, 0x85,
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48, 0x6f,
        0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39, 0xe2,
        0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0, 0x9d,
        0x5b, 0x88, 0xac, 0x68, 0x68, 0xf7, 0x01, 0x00,
        0x00,
    };
    const uint8_t HS4[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xfb,
        0x82, 0x4d, 0x4e, 0x4d, 0xaf, 0xc0, 0xf5, 0x67,
        0x78, 0x9d, 0xee, 0x3a, 0x6b, 0xce, 0x8d, 0x41,
        0x1f, 0xe8, 0x0f, 0x55, 0x63, 0xd8, 0xcd, 0xfd,
        0xcc, 0x7d, 0x7e, 0x44, 0x47, 0xd4, 0x3a, 0x02,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x9a, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xa1, 0x2a, 0x9a, 0x47,
        0x3e, 0xce, 0x54, 0x85, 0x84, 0xaa, 0xbd, 0xd0,
        0x51, 0x77, 0x90, 0x25, 0xa5, 0xed, 0x40, 0x77,
        0xc4, 0xb7, 0xaa, 0x37, 0x6e, 0xc7, 0xa0, 0xb1,
        0x64, 0x5e, 0x5a, 0x48, 0x02, 0x20, 0x39, 0x49,
        0x0b, 0x33, 0x3f, 0x53, 0xb5, 0xb3, 0xe2, 0xdd,
        0xde, 0x1d, 0x80, 0x9e, 0x49, 0x2c, 0xba, 0x2b,
        0x3e, 0x5f, 0xc3, 0xa4, 0x36, 0xcd, 0x3f, 0xfb,
        0x4c, 0xd3, 0xd5, 0x00, 0xfa, 0x5a, 0x01, 0x48,
        0x30, 0x45, 0x02, 0x21, 0x00, 0xff, 0x20, 0x0b,
        0xc9, 0x34, 0xab, 0x26, 0xce, 0x9a, 0x55, 0x9e,
        0x99, 0x8c, 0xeb, 0x0a, 0xee, 0x53, 0xbc, 0x40,
        0x36, 0x8e, 0x11, 0x4a, 0xb9, 0xd3, 0x05, 0x4d,
        0x99, 0x60, 0x54, 0x6e, 0x28, 0x02, 0x20, 0x24,
        0x96, 0x85, 0x6c, 0xa1, 0x63, 0xac, 0x12, 0xc1,
        0x43, 0x11, 0x0b, 0x6b, 0x3a, 0xc9, 0xd5, 0x98,
        0xdf, 0x72, 0x54, 0xf2, 0xe1, 0x7b, 0x3b, 0x94,
        0xc3, 0xab, 0x53, 0x01, 0xf4, 0xc3, 0xb0, 0x01,
        0x20, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x8a, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f,
        0x72, 0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98,
        0x6c, 0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7,
        0xb5, 0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94,
        0x85, 0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12,
        0x2c, 0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a,
        0x21, 0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26,
        0xd6, 0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c,
        0x82, 0x01, 0x20, 0x87, 0x63, 0xa9, 0x14, 0x18,
        0xbc, 0x1a, 0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d,
        0x3d, 0x23, 0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12,
        0x27, 0x43, 0x42, 0x88, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1,
        0x75, 0xac, 0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const struct {
        const uint8_t *tx;
        size_t len;
    } HTLC_TX[] = {
        { HS0, sizeof(HS0) },
        { HS1, sizeof(HS1) },
        { HS2, sizeof(HS2) },
        { HS3, sizeof(HS3) },
        { HS4, sizeof(HS4) },
    };
    ///////////////////////////////////////////////////////////


    bool ret;
    int index;


    //各HTLCのsuccess transaction作成
    ptarm_tx_t tx2;

    ptarm_buf_t ws_buf;
    ln_create_script_success(&ws_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);

    //どのHTLCxがVOUTにいるか(ない場合は-1)
    //どのVOUTがどのHTLCなのかは、どうやって見つけるべきなのだろう？
    //                    HTLC0     HTLC1       HTLC2       HTLC3       HTLC4
    const int VOUTS[] = { -1,       -1,         0,          1,          2     };

    ptarm_buf_t local_sig = PTARM_BUF_INIT;
    for (int lp = 0; lp < 5; lp++) {
        uint64_t fee = (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? feeinfo.htlc_timeout : feeinfo.htlc_success;
        index = VOUTS[lp];
        if ((index >= 0) && (tx.vout[index].value >= feeinfo.dust_limit_satoshi + fee)) {
            ptarm_tx_init(&tx2);
            ln_create_htlc_tx(&tx2, tx.vout[index].value - fee, &ws_buf, htlcinfos[lp].type, htlcinfos[lp].expiry, txid_commit, index);

            const ptarm_buf_t remote_sig = { (uint8_t *)REMOTE_SIGS[lp].sig, (uint16_t)REMOTE_SIGS[lp].len };
//            printf("[%d]%s\n", lp, (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? "offered" : "received");
            ret = ln_sign_htlc_tx(&tx2,
                        &local_sig,
                        tx.vout[index].value,
                        &keys_local_commit,
                        &remote_sig,
                        PREIMAGES[lp],
                        &htlcinfos[lp].script,
                        HTLCSIGN_TO_SUCCESS);
            ASSERT_TRUE(ret);
            ptarm_buf_t hs;
            ptarm_tx_create(&hs, &tx2);
            //ptarm_print_tx(&tx2);
            //ptarm_print_rawtx(HTLC_TX[lp].tx, HTLC_TX[lp].len);
            ASSERT_EQ(0, memcmp(HTLC_TX[lp].tx, hs.buf, HTLC_TX[lp].len));
            ASSERT_EQ(HTLC_TX[lp].len, hs.len);
            ptarm_buf_free(&local_sig);
            ptarm_buf_free(&hs);
            ptarm_tx_free(&tx2);
        }
    }

    for (int lp = 0; lp < 5; lp++) {
        ptarm_buf_free((ptarm_buf_t *)&htlcinfos[lp].script);
    }
    ptarm_buf_free(&ws_buf);
    ptarm_tx_free(&tx2);

    ptarm_tx_free(&tx);
}


// name: commitment tx with 4 outputs untrimmed (minimum feerate)
//      Commitment Transaction
TEST_F(ln_bolt3_c, committx4min_commit)
{
    ptarm_tx_init(&tx);

    bool ret;

    //amounts
    const uint64_t MSAT_LOCAL = 6988000000LL;
    const uint64_t MSAT_REMOTE = 3000000000LL;


    feeinfo.feerate_per_kw = 2195;
    uint64_t fee_act = ln_fee_calc(&feeinfo, (const ln_htlcinfo_t **)pp_htlcinfos, 5);

//    printf("base fee_committx=%llu\n", (unsigned long long)feeinfo.commit);
//    printf("actual fee_committx=%llu\n", (unsigned long long)fee_act);
//    printf("fee success=%d\n", (int)feeinfo.htlc_success);
//    printf("fee timeout=%d\n", (int)feeinfo.htlc_timeout);
    ASSERT_EQ(1543, feeinfo.htlc_success);
    ASSERT_EQ(1455, feeinfo.htlc_timeout);
    ASSERT_EQ(2344, feeinfo.commit);
    ASSERT_EQ(7344, fee_act);


    ///////////////////////////////////////
    const uint8_t WS_HTLC0[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0xb8, 0xbc, 0xb0,
        0x7f, 0x63, 0x44, 0xb4, 0x2a, 0xb0, 0x42, 0x50,
        0xc8, 0x6a, 0x6e, 0x8b, 0x75, 0xd3, 0xfd, 0xbb,
        0xc6, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf4, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC1[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b, 0x2e,
        0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb, 0x7b,
        0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc, 0xe2,
        0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC2[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e, 0x1b,
        0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c, 0xd9,
        0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9, 0xb5,
        0xd1, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC3[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48, 0x6f,
        0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39, 0xe2,
        0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0, 0x9d,
        0x5b, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC4[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc, 0x1a,
        0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d, 0x23,
        0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27, 0x43,
        0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };

    ///////////////////////////////////////

    const struct {
        const uint8_t *ws;
        size_t len;
    } SCRIPTS[] = {
        { WS_HTLC0, sizeof(WS_HTLC0) },
        { WS_HTLC1, sizeof(WS_HTLC1) },
        { WS_HTLC2, sizeof(WS_HTLC2) },
        { WS_HTLC3, sizeof(WS_HTLC3) },
        { WS_HTLC4, sizeof(WS_HTLC4) }
    };

    for (int lp = 0; lp < 5; lp++) {
        ln_create_htlcinfo(&pp_htlcinfos[lp]->script, pp_htlcinfos[lp]->type, LOCAL_KEY, LOCAL_REVO_KEY, REMOTE_KEY, pp_htlcinfos[lp]->preimage_hash, pp_htlcinfos[lp]->expiry);

        ASSERT_EQ(0, memcmp(SCRIPTS[lp].ws, htlcinfos[lp].script.buf, SCRIPTS[lp].len));
        ASSERT_EQ(SCRIPTS[lp].len, htlcinfos[lp].script.len);
    }


    //to-local wscript
    ptarm_buf_t ws_local_buf;

    ln_create_script_local(&ws_local_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);
//    dumpbin(ws_local_buf.buf, ws_local_buf.len);
//    printf("-[to-local]---------------------\n");
//    ptarm_print_script(ws_local_buf.buf, ws_local_buf.len);
//    printf("----------------------: %d\n", ws_local_buf.len);
    const uint8_t TO_LOCAL_WSCRIPT[] = {
        0x63, 0x21, 0x02, 0x12, 0xa1, 0x40, 0xcd, 0x0c,
        0x65, 0x39, 0xd0, 0x7c, 0xd0, 0x8d, 0xfe, 0x09,
        0x98, 0x4d, 0xec, 0x32, 0x51, 0xea, 0x80, 0x8b,
        0x89, 0x2e, 0xfe, 0xac, 0x3e, 0xde, 0x94, 0x02,
        0xbf, 0x2b, 0x19, 0x67, 0x02, 0x90, 0x00, 0xb2,
        0x75, 0x21, 0x03, 0xfd, 0x59, 0x60, 0x52, 0x8d,
        0xc1, 0x52, 0x01, 0x49, 0x52, 0xef, 0xdb, 0x70,
        0x2a, 0x88, 0xf7, 0x1e, 0x3c, 0x16, 0x53, 0xb2,
        0x31, 0x44, 0x31, 0x70, 0x1e, 0xc7, 0x7e, 0x57,
        0xfd, 0xe8, 0x3c, 0x68, 0xac,
    };
    ASSERT_EQ(0, memcmp(TO_LOCAL_WSCRIPT, ws_local_buf.buf, sizeof(TO_LOCAL_WSCRIPT)));
    ASSERT_EQ(sizeof(TO_LOCAL_WSCRIPT), ws_local_buf.len);


    //tx

    ln_tx_cmt_t lntx_commit;
    lntx_commit.fund.txid = TXID_FUND;
    lntx_commit.fund.txid_index = TXID_FUND_INDEX;
    lntx_commit.fund.satoshi = PTARM_MBTC2SATOSHI(100);
    lntx_commit.fund.p_script = &funding2of2;
    lntx_commit.local.satoshi = LN_MSAT2SATOSHI(MSAT_LOCAL);
    lntx_commit.local.p_script = &ws_local_buf;
    lntx_commit.remote.satoshi = LN_MSAT2SATOSHI(MSAT_REMOTE);
    lntx_commit.remote.pubkey = REMOTE_KEY;
    lntx_commit.obscured = obscured;
    lntx_commit.p_feeinfo = &feeinfo;
    lntx_commit.pp_htlcinfo = pp_htlcinfos;
    lntx_commit.htlcinfo_num = 5;
    ptarm_buf_t buf_sig_local;

    ret = ln_create_commit_tx(&tx, &buf_sig_local, &lntx_commit, true, &priv_data);
    ASSERT_TRUE(ret);


    const uint8_t LOCAL_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x3b, 0x12, 0xd4, 0x42,
        0x54, 0x24, 0x4b, 0x8f, 0xf3, 0xbb, 0x41, 0x29,
        0xb0, 0x92, 0x0f, 0xd4, 0x51, 0x20, 0xab, 0x42,
        0xf5, 0x53, 0xd9, 0x97, 0x63, 0x94, 0xb0, 0x99,
        0xd5, 0x00, 0xc9, 0x9e, 0x02, 0x20, 0x5e, 0x95,
        0xbb, 0x7a, 0x31, 0x64, 0x85, 0x2e, 0xf0, 0xc4,
        0x8f, 0x9e, 0x0e, 0xaf, 0x14, 0x52, 0x18, 0xf8,
        0xe2, 0xc4, 0x12, 0x51, 0xb2, 0x31, 0xf0, 0x3c,
        0xbd, 0xc4, 0xf2, 0x9a, 0x54, 0x29, 0x01,
    };
    ASSERT_EQ(0, memcmp(LOCAL_SIGNATURE, buf_sig_local.buf, sizeof(LOCAL_SIGNATURE)));
    ASSERT_EQ(sizeof(LOCAL_SIGNATURE), buf_sig_local.len);

    const uint8_t REMOTE_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x5e, 0x2f, 0x76, 0xd4,
        0x65, 0x7f, 0xb7, 0x32, 0xc0, 0xdf, 0xc8, 0x20,
        0xa1, 0x8a, 0x73, 0x01, 0xe3, 0x68, 0xf5, 0x79,
        0x9e, 0x06, 0xb7, 0x82, 0x80, 0x07, 0x63, 0x37,
        0x41, 0xbd, 0xa6, 0xdf, 0x02, 0x20, 0x45, 0x80,
        0x09, 0xae, 0x59, 0xd0, 0xc6, 0x24, 0x60, 0x65,
        0xc4, 0x19, 0x35, 0x9e, 0x05, 0xeb, 0x2a, 0x4b,
        0x4e, 0xf4, 0xa1, 0xb3, 0x10, 0xcc, 0x91, 0x2d,
        0xb4, 0x4e, 0xb7, 0x92, 0x42, 0x98, 0x01,
    };
    ptarm_buf_t buf_sig_remote;
    ptarm_buf_alloccopy(&buf_sig_remote, REMOTE_SIGNATURE, sizeof(REMOTE_SIGNATURE));
    ret = set_vin_p2wsh_2of2(&tx, 0, key_fund_sort,
                &buf_sig_local,
                &buf_sig_remote,
                &funding2of2);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&buf_sig_local);
    ptarm_buf_free(&buf_sig_remote);

    //ptarm_print_tx(&tx);

    //TestVectorとのチェック
    const uint8_t COMMIT_TX[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xbe,
        0xf6, 0x7e, 0x4e, 0x2f, 0xb9, 0xdd, 0xee, 0xb3,
        0x46, 0x19, 0x73, 0xcd, 0x4c, 0x62, 0xab, 0xb3,
        0x50, 0x50, 0xb1, 0xad, 0xd7, 0x72, 0x99, 0x5b,
        0x82, 0x0b, 0x58, 0x4a, 0x48, 0x84, 0x89, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x38, 0xb0, 0x2b, 0x80,
        0x04, 0xb8, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0xc2, 0x0b, 0x5d, 0x1f,
        0x85, 0x84, 0xfd, 0x90, 0x44, 0x3e, 0x7b, 0x7b,
        0x72, 0x01, 0x36, 0x17, 0x4f, 0xa4, 0xb9, 0x33,
        0x3c, 0x26, 0x1d, 0x04, 0xdb, 0xbd, 0x01, 0x26,
        0x35, 0xc0, 0xf4, 0x19, 0xa0, 0x0f, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x20, 0x8c,
        0x48, 0xd1, 0x51, 0x60, 0x39, 0x7c, 0x97, 0x31,
        0xdf, 0x9b, 0xc3, 0xb2, 0x36, 0x65, 0x6e, 0xfb,
        0x66, 0x65, 0xfb, 0xfe, 0x92, 0xb4, 0xa6, 0x87,
        0x8e, 0x88, 0xa4, 0x99, 0xf7, 0x41, 0xc4, 0xc0,
        0xc6, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16,
        0x00, 0x14, 0xcc, 0xf1, 0xaf, 0x2f, 0x2a, 0xab,
        0xee, 0x14, 0xbb, 0x40, 0xfa, 0x38, 0x51, 0xab,
        0x23, 0x01, 0xde, 0x84, 0x31, 0x10, 0xb8, 0x97,
        0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
        0x20, 0x4a, 0xdb, 0x4e, 0x2f, 0x00, 0x64, 0x3d,
        0xb3, 0x96, 0xdd, 0x12, 0x0d, 0x4e, 0x7d, 0xc1,
        0x76, 0x25, 0xf5, 0xf2, 0xc1, 0x1a, 0x40, 0xd8,
        0x57, 0xac, 0xcc, 0x86, 0x2d, 0x6b, 0x7d, 0xd8,
        0x0e, 0x04, 0x00, 0x47, 0x30, 0x44, 0x02, 0x20,
        0x3b, 0x12, 0xd4, 0x42, 0x54, 0x24, 0x4b, 0x8f,
        0xf3, 0xbb, 0x41, 0x29, 0xb0, 0x92, 0x0f, 0xd4,
        0x51, 0x20, 0xab, 0x42, 0xf5, 0x53, 0xd9, 0x97,
        0x63, 0x94, 0xb0, 0x99, 0xd5, 0x00, 0xc9, 0x9e,
        0x02, 0x20, 0x5e, 0x95, 0xbb, 0x7a, 0x31, 0x64,
        0x85, 0x2e, 0xf0, 0xc4, 0x8f, 0x9e, 0x0e, 0xaf,
        0x14, 0x52, 0x18, 0xf8, 0xe2, 0xc4, 0x12, 0x51,
        0xb2, 0x31, 0xf0, 0x3c, 0xbd, 0xc4, 0xf2, 0x9a,
        0x54, 0x29, 0x01, 0x47, 0x30, 0x44, 0x02, 0x20,
        0x5e, 0x2f, 0x76, 0xd4, 0x65, 0x7f, 0xb7, 0x32,
        0xc0, 0xdf, 0xc8, 0x20, 0xa1, 0x8a, 0x73, 0x01,
        0xe3, 0x68, 0xf5, 0x79, 0x9e, 0x06, 0xb7, 0x82,
        0x80, 0x07, 0x63, 0x37, 0x41, 0xbd, 0xa6, 0xdf,
        0x02, 0x20, 0x45, 0x80, 0x09, 0xae, 0x59, 0xd0,
        0xc6, 0x24, 0x60, 0x65, 0xc4, 0x19, 0x35, 0x9e,
        0x05, 0xeb, 0x2a, 0x4b, 0x4e, 0xf4, 0xa1, 0xb3,
        0x10, 0xcc, 0x91, 0x2d, 0xb4, 0x4e, 0xb7, 0x92,
        0x42, 0x98, 0x01, 0x47, 0x52, 0x21, 0x02, 0x3d,
        0xa0, 0x92, 0xf6, 0x98, 0x0e, 0x58, 0xd2, 0xc0,
        0x37, 0x17, 0x31, 0x80, 0xe9, 0xa4, 0x65, 0x47,
        0x60, 0x26, 0xee, 0x50, 0xf9, 0x66, 0x95, 0x96,
        0x3e, 0x8e, 0xfe, 0x43, 0x6f, 0x54, 0xeb, 0x21,
        0x03, 0x0e, 0x9f, 0x7b, 0x62, 0x3d, 0x2c, 0xcc,
        0x7c, 0x9b, 0xd4, 0x4d, 0x66, 0xd5, 0xce, 0x21,
        0xce, 0x50, 0x4c, 0x0a, 0xcf, 0x63, 0x85, 0xa1,
        0x32, 0xce, 0xc6, 0xd3, 0xc3, 0x9f, 0xa7, 0x11,
        0xc1, 0x52, 0xae, 0x3e, 0x19, 0x52, 0x20,
    };
    //ptarm_print_rawtx(COMMIT_TX, sizeof(COMMIT_TX));
    ptarm_buf_t tx_buf;

    ptarm_tx_create(&tx_buf, &tx);
    ASSERT_EQ(0, memcmp(COMMIT_TX, tx_buf.buf, sizeof(COMMIT_TX)));
    ASSERT_EQ(sizeof(COMMIT_TX), tx_buf.len);
    ret = ptarm_tx_txid(txid_commit, &tx);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&tx_buf);

    ptarm_buf_free(&ws_local_buf);
}


// name: commitment tx with 4 outputs untrimmed (minimum feerate)
//      HTLC-success Transaction
TEST_F(ln_bolt3_c, committx4min_success_to)
{
    ///////////////////////////////////////////////////////////
    const uint8_t REMOTE_SIG0[] = {
        0x01,
    };
    const uint8_t REMOTE_SIG1[] = {
        01
    };
    const uint8_t REMOTE_SIG2[] = {
        01
    };
    const uint8_t REMOTE_SIG3[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xa8, 0xa7, 0x8f,
        0xa1, 0x01, 0x6a, 0x5c, 0x5c, 0x37, 0x04, 0xf2,
        0xe8, 0x90, 0x87, 0x15, 0xa3, 0xce, 0xf6, 0x67,
        0x23, 0xfb, 0x95, 0xf3, 0x13, 0x2e, 0xc4, 0xd2,
        0xd0, 0x5c, 0xd8, 0x4f, 0xb4, 0x02, 0x20, 0x25,
        0xac, 0x49, 0x28, 0x7b, 0x08, 0x61, 0xec, 0x21,
        0x93, 0x24, 0x05, 0xf5, 0x60, 0x0c, 0xbc, 0xe9,
        0x43, 0x13, 0xdb, 0xde, 0x0e, 0x6c, 0x5d, 0x5a,
        0xf1, 0xb3, 0x36, 0x6d, 0x8a, 0xfb, 0xfc, 0x01,
    };
    const uint8_t REMOTE_SIG4[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xe7, 0x69, 0xcb,
        0x15, 0x6a, 0xa2, 0xf7, 0x51, 0x5d, 0x12, 0x6c,
        0xef, 0x7a, 0x69, 0x96, 0x86, 0x29, 0x62, 0x0c,
        0xe8, 0x2a, 0xfc, 0xaa, 0x9e, 0x21, 0x09, 0x69,
        0xde, 0x68, 0x50, 0xdf, 0x46, 0x02, 0x20, 0x0b,
        0x16, 0xb3, 0xf3, 0x48, 0x6a, 0x22, 0x9a, 0x48,
        0xaa, 0xdd, 0xe5, 0x20, 0xdb, 0xee, 0x31, 0xae,
        0x34, 0x0d, 0xba, 0xda, 0xff, 0xae, 0x74, 0xfb,
        0xb5, 0x66, 0x81, 0xfe, 0xf2, 0x7b, 0x92, 0x01,
    };
    const struct {
        const uint8_t *sig;
        size_t len;
    } REMOTE_SIGS[] = {
        { REMOTE_SIG0, sizeof(REMOTE_SIG0) },
        { REMOTE_SIG1, sizeof(REMOTE_SIG1) },
        { REMOTE_SIG2, sizeof(REMOTE_SIG2) },
        { REMOTE_SIG3, sizeof(REMOTE_SIG3) },
        { REMOTE_SIG4, sizeof(REMOTE_SIG4) },
    };

    const uint8_t HS0[] = {
        0x00,
    };
    const uint8_t HS1[] = {

    };
    const uint8_t HS2[] = {

    };
    const uint8_t HS3[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x4e,
        0x16, 0xc4, 0x88, 0xfa, 0x15, 0x84, 0x31, 0xc1,
        0xa8, 0x2e, 0x8f, 0x66, 0x12, 0x40, 0xec, 0x0a,
        0x71, 0xba, 0x0c, 0xe9, 0x2f, 0x27, 0x21, 0xa6,
        0x53, 0x8c, 0x51, 0x02, 0x26, 0xad, 0x5c, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x09, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xa8, 0xa7, 0x8f, 0xa1,
        0x01, 0x6a, 0x5c, 0x5c, 0x37, 0x04, 0xf2, 0xe8,
        0x90, 0x87, 0x15, 0xa3, 0xce, 0xf6, 0x67, 0x23,
        0xfb, 0x95, 0xf3, 0x13, 0x2e, 0xc4, 0xd2, 0xd0,
        0x5c, 0xd8, 0x4f, 0xb4, 0x02, 0x20, 0x25, 0xac,
        0x49, 0x28, 0x7b, 0x08, 0x61, 0xec, 0x21, 0x93,
        0x24, 0x05, 0xf5, 0x60, 0x0c, 0xbc, 0xe9, 0x43,
        0x13, 0xdb, 0xde, 0x0e, 0x6c, 0x5d, 0x5a, 0xf1,
        0xb3, 0x36, 0x6d, 0x8a, 0xfb, 0xfc, 0x01, 0x48,
        0x30, 0x45, 0x02, 0x21, 0x00, 0xbe, 0x6a, 0xe1,
        0x97, 0x7f, 0xd7, 0xb6, 0x30, 0xa5, 0x36, 0x23,
        0xf3, 0xf2, 0x5c, 0x54, 0x23, 0x17, 0xcc, 0xfc,
        0x2b, 0x97, 0x17, 0x82, 0x80, 0x2a, 0x4f, 0x1e,
        0xf5, 0x38, 0xeb, 0x22, 0xb4, 0x02, 0x20, 0x7e,
        0xdc, 0x4d, 0x04, 0x08, 0xf8, 0xf3, 0x8f, 0xd3,
        0xc7, 0x36, 0x5d, 0x1c, 0xfc, 0x26, 0x51, 0x1b,
        0x7c, 0xd2, 0xd4, 0xfe, 0xcd, 0x8b, 0x00, 0x5f,
        0xba, 0x3c, 0xd5, 0xbc, 0x70, 0x43, 0x90, 0x01,
        0x00, 0x85, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f,
        0x72, 0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98,
        0x6c, 0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7,
        0xb5, 0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94,
        0x85, 0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12,
        0x2c, 0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a,
        0x21, 0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26,
        0xd6, 0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c,
        0x82, 0x01, 0x20, 0x87, 0x64, 0x75, 0x52, 0x7c,
        0x21, 0x03, 0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63,
        0x84, 0xf8, 0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c,
        0x5e, 0x57, 0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda,
        0xca, 0x81, 0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06,
        0x39, 0xe7, 0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a,
        0x48, 0x6f, 0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf,
        0x39, 0xe2, 0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef,
        0xd0, 0x9d, 0x5b, 0x88, 0xac, 0x68, 0x68, 0xf7,
        0x01, 0x00, 0x00,
    };
    const uint8_t HS4[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x4e,
        0x16, 0xc4, 0x88, 0xfa, 0x15, 0x84, 0x31, 0xc1,
        0xa8, 0x2e, 0x8f, 0x66, 0x12, 0x40, 0xec, 0x0a,
        0x71, 0xba, 0x0c, 0xe9, 0x2f, 0x27, 0x21, 0xa6,
        0x53, 0x8c, 0x51, 0x02, 0x26, 0xad, 0x5c, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x99, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xe7, 0x69, 0xcb, 0x15,
        0x6a, 0xa2, 0xf7, 0x51, 0x5d, 0x12, 0x6c, 0xef,
        0x7a, 0x69, 0x96, 0x86, 0x29, 0x62, 0x0c, 0xe8,
        0x2a, 0xfc, 0xaa, 0x9e, 0x21, 0x09, 0x69, 0xde,
        0x68, 0x50, 0xdf, 0x46, 0x02, 0x20, 0x0b, 0x16,
        0xb3, 0xf3, 0x48, 0x6a, 0x22, 0x9a, 0x48, 0xaa,
        0xdd, 0xe5, 0x20, 0xdb, 0xee, 0x31, 0xae, 0x34,
        0x0d, 0xba, 0xda, 0xff, 0xae, 0x74, 0xfb, 0xb5,
        0x66, 0x81, 0xfe, 0xf2, 0x7b, 0x92, 0x01, 0x47,
        0x30, 0x44, 0x02, 0x20, 0x66, 0x5b, 0x9c, 0xb4,
        0xa9, 0x78, 0xc0, 0x9d, 0x1c, 0xa8, 0x97, 0x7a,
        0x53, 0x49, 0x99, 0xbc, 0x8a, 0x49, 0xda, 0x62,
        0x4d, 0x0c, 0x54, 0x39, 0x45, 0x1d, 0xd6, 0x9c,
        0xde, 0x1a, 0x00, 0x3d, 0x02, 0x20, 0x70, 0xea,
        0xe0, 0x62, 0x0f, 0x01, 0xf3, 0xc1, 0xbd, 0x02,
        0x9c, 0xc1, 0x48, 0x8d, 0xa1, 0x3f, 0xb4, 0x0f,
        0xda, 0xb7, 0x6f, 0x39, 0x6c, 0xcd, 0x33, 0x54,
        0x79, 0xa1, 0x1c, 0x52, 0x76, 0xd8, 0x01, 0x20,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x8a, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc,
        0x1a, 0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d,
        0x23, 0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27,
        0x43, 0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d,
        0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d,
        0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97,
        0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e,
        0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52,
        0xae, 0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75,
        0xac, 0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const struct {
        const uint8_t *tx;
        size_t len;
    } HTLC_TX[] = {
        { HS0, sizeof(HS0) },
        { HS1, sizeof(HS1) },
        { HS2, sizeof(HS2) },
        { HS3, sizeof(HS3) },
        { HS4, sizeof(HS4) },
    };
    ///////////////////////////////////////////////////////////


    bool ret;
    int index;


    //各HTLCのsuccess transaction作成
    ptarm_tx_t tx2;

    ptarm_buf_t ws_buf;
    ln_create_script_success(&ws_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);

    //どのHTLCxがVOUTにいるか(ない場合は-1)
    //どのVOUTがどのHTLCなのかは、どうやって見つけるべきなのだろう？
    //                    HTLC0     HTLC1       HTLC2       HTLC3       HTLC4
    const int VOUTS[] = { -1,       -1,         -1,         0,          1     };

    ptarm_buf_t local_sig = PTARM_BUF_INIT;
    for (int lp = 0; lp < 5; lp++) {
        uint64_t fee = (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? feeinfo.htlc_timeout : feeinfo.htlc_success;
        index = VOUTS[lp];
        if ((index >= 0) && (tx.vout[index].value >= feeinfo.dust_limit_satoshi + fee)) {
            ptarm_tx_init(&tx2);
            ln_create_htlc_tx(&tx2, tx.vout[index].value - fee, &ws_buf, htlcinfos[lp].type, htlcinfos[lp].expiry, txid_commit, index);

            const ptarm_buf_t remote_sig = { (uint8_t *)REMOTE_SIGS[lp].sig, (uint16_t)REMOTE_SIGS[lp].len };
//            printf("[%d]%s\n", lp, (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? "offered" : "received");
            ret = ln_sign_htlc_tx(&tx2,
                        &local_sig,
                        tx.vout[index].value,
                        &keys_local_commit,
                        &remote_sig,
                        PREIMAGES[lp],
                        &htlcinfos[lp].script,
                        HTLCSIGN_TO_SUCCESS);
            ASSERT_TRUE(ret);
            ptarm_buf_t hs;
            ptarm_tx_create(&hs, &tx2);
            //ptarm_print_tx(&tx2);
            //ptarm_print_rawtx(HTLC_TX[lp].tx, HTLC_TX[lp].len);
            ASSERT_EQ(0, memcmp(HTLC_TX[lp].tx, hs.buf, HTLC_TX[lp].len));
            ASSERT_EQ(HTLC_TX[lp].len, hs.len);
            ptarm_buf_free(&local_sig);
            ptarm_buf_free(&hs);
            ptarm_tx_free(&tx2);
        }
    }

    for (int lp = 0; lp < 5; lp++) {
        ptarm_buf_free((ptarm_buf_t *)&htlcinfos[lp].script);
    }
    ptarm_buf_free(&ws_buf);
    ptarm_tx_free(&tx2);

    ptarm_tx_free(&tx);
}


// name: commitment tx with 4 outputs untrimmed (maximum feerate)
//      Commitment Transaction
TEST_F(ln_bolt3_c, committx4max_commit)
{
    ptarm_tx_init(&tx);

    bool ret;

    //amounts
    const uint64_t MSAT_LOCAL = 6988000000LL;
    const uint64_t MSAT_REMOTE = 3000000000LL;


    feeinfo.feerate_per_kw = 3702;
    uint64_t fee_act = ln_fee_calc(&feeinfo, (const ln_htlcinfo_t **)pp_htlcinfos, 5);

//    printf("base fee_committx=%llu\n", (unsigned long long)feeinfo.commit);
//    printf("actual fee_committx=%llu\n", (unsigned long long)fee_act);
//    printf("fee success=%d\n", (int)feeinfo.htlc_success);
//    printf("fee timeout=%d\n", (int)feeinfo.htlc_timeout);
    ASSERT_EQ(2602, feeinfo.htlc_success);
    ASSERT_EQ(2454, feeinfo.htlc_timeout);
    ASSERT_EQ(3953, feeinfo.commit);
    ASSERT_EQ(8953, fee_act);


    ///////////////////////////////////////
    const uint8_t WS_HTLC0[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0xb8, 0xbc, 0xb0,
        0x7f, 0x63, 0x44, 0xb4, 0x2a, 0xb0, 0x42, 0x50,
        0xc8, 0x6a, 0x6e, 0x8b, 0x75, 0xd3, 0xfd, 0xbb,
        0xc6, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf4, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC1[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b, 0x2e,
        0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb, 0x7b,
        0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc, 0xe2,
        0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC2[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e, 0x1b,
        0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c, 0xd9,
        0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9, 0xb5,
        0xd1, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC3[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48, 0x6f,
        0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39, 0xe2,
        0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0, 0x9d,
        0x5b, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC4[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc, 0x1a,
        0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d, 0x23,
        0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27, 0x43,
        0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };

    ///////////////////////////////////////

    const struct {
        const uint8_t *ws;
        size_t len;
    } SCRIPTS[] = {
        { WS_HTLC0, sizeof(WS_HTLC0) },
        { WS_HTLC1, sizeof(WS_HTLC1) },
        { WS_HTLC2, sizeof(WS_HTLC2) },
        { WS_HTLC3, sizeof(WS_HTLC3) },
        { WS_HTLC4, sizeof(WS_HTLC4) }
    };

    for (int lp = 0; lp < 5; lp++) {
        ln_create_htlcinfo(&pp_htlcinfos[lp]->script, pp_htlcinfos[lp]->type, LOCAL_KEY, LOCAL_REVO_KEY, REMOTE_KEY, pp_htlcinfos[lp]->preimage_hash, pp_htlcinfos[lp]->expiry);

        ASSERT_EQ(0, memcmp(SCRIPTS[lp].ws, htlcinfos[lp].script.buf, SCRIPTS[lp].len));
        ASSERT_EQ(SCRIPTS[lp].len, htlcinfos[lp].script.len);
    }


    //to-local wscript
    ptarm_buf_t ws_local_buf;

    ln_create_script_local(&ws_local_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);
//    dumpbin(ws_local_buf.buf, ws_local_buf.len);
//    printf("-[to-local]---------------------\n");
//    ptarm_print_script(ws_local_buf.buf, ws_local_buf.len);
//    printf("----------------------: %d\n", ws_local_buf.len);
    const uint8_t TO_LOCAL_WSCRIPT[] = {
        0x63, 0x21, 0x02, 0x12, 0xa1, 0x40, 0xcd, 0x0c,
        0x65, 0x39, 0xd0, 0x7c, 0xd0, 0x8d, 0xfe, 0x09,
        0x98, 0x4d, 0xec, 0x32, 0x51, 0xea, 0x80, 0x8b,
        0x89, 0x2e, 0xfe, 0xac, 0x3e, 0xde, 0x94, 0x02,
        0xbf, 0x2b, 0x19, 0x67, 0x02, 0x90, 0x00, 0xb2,
        0x75, 0x21, 0x03, 0xfd, 0x59, 0x60, 0x52, 0x8d,
        0xc1, 0x52, 0x01, 0x49, 0x52, 0xef, 0xdb, 0x70,
        0x2a, 0x88, 0xf7, 0x1e, 0x3c, 0x16, 0x53, 0xb2,
        0x31, 0x44, 0x31, 0x70, 0x1e, 0xc7, 0x7e, 0x57,
        0xfd, 0xe8, 0x3c, 0x68, 0xac,
    };
    ASSERT_EQ(0, memcmp(TO_LOCAL_WSCRIPT, ws_local_buf.buf, sizeof(TO_LOCAL_WSCRIPT)));
    ASSERT_EQ(sizeof(TO_LOCAL_WSCRIPT), ws_local_buf.len);


    //tx

    ln_tx_cmt_t lntx_commit;
    lntx_commit.fund.txid = TXID_FUND;
    lntx_commit.fund.txid_index = TXID_FUND_INDEX;
    lntx_commit.fund.satoshi = PTARM_MBTC2SATOSHI(100);
    lntx_commit.fund.p_script = &funding2of2;
    lntx_commit.local.satoshi = LN_MSAT2SATOSHI(MSAT_LOCAL);
    lntx_commit.local.p_script = &ws_local_buf;
    lntx_commit.remote.satoshi = LN_MSAT2SATOSHI(MSAT_REMOTE);
    lntx_commit.remote.pubkey = REMOTE_KEY;
    lntx_commit.obscured = obscured;
    lntx_commit.p_feeinfo = &feeinfo;
    lntx_commit.pp_htlcinfo = pp_htlcinfos;
    lntx_commit.htlcinfo_num = 5;
    ptarm_buf_t buf_sig_local;

    ret = ln_create_commit_tx(&tx, &buf_sig_local, &lntx_commit, true, &priv_data);
    ASSERT_TRUE(ret);


    const uint8_t LOCAL_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x0e, 0x93, 0x0a, 0x43,
        0xc7, 0x95, 0x11, 0x62, 0xdc, 0x15, 0xa2, 0xb7,
        0x34, 0x4f, 0x48, 0x09, 0x1c, 0x74, 0xc7, 0x0f,
        0x70, 0x24, 0xe7, 0x11, 0x6e, 0x90, 0x0d, 0x8b,
        0xcf, 0xba, 0x86, 0x1c, 0x02, 0x20, 0x66, 0xfa,
        0x6c, 0xbd, 0xa3, 0x92, 0x9e, 0x21, 0xda, 0xa2,
        0xe7, 0xe1, 0x6a, 0x4b, 0x94, 0x8d, 0xb7, 0xe8,
        0x91, 0x9e, 0xf9, 0x78, 0x40, 0x23, 0x60, 0xd1,
        0x09, 0x5f, 0xfd, 0xaf, 0xf7, 0xb0, 0x01,
    };
    ASSERT_EQ(0, memcmp(LOCAL_SIGNATURE, buf_sig_local.buf, sizeof(LOCAL_SIGNATURE)));
    ASSERT_EQ(sizeof(LOCAL_SIGNATURE), buf_sig_local.len);

    const uint8_t REMOTE_SIGNATURE[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xc1, 0xa3, 0xb0,
        0xb6, 0x0c, 0xa0, 0x92, 0xed, 0x50, 0x80, 0x12,
        0x1f, 0x26, 0xa7, 0x4a, 0x20, 0xce, 0xc6, 0xbd,
        0xee, 0x3f, 0x8e, 0x47, 0xba, 0xe9, 0x73, 0xfc,
        0xdc, 0xeb, 0x3e, 0xda, 0x55, 0x02, 0x20, 0x7d,
        0x46, 0x7a, 0x98, 0x73, 0xc9, 0x39, 0xbf, 0x3a,
        0xa7, 0x58, 0x01, 0x4a, 0xe6, 0x72, 0x95, 0xfe,
        0xdb, 0xca, 0x52, 0x41, 0x26, 0x33, 0xf7, 0xe5,
        0xb2, 0x67, 0x0f, 0xc7, 0xc3, 0x81, 0xc1, 0x01,
    };
    ptarm_buf_t buf_sig_remote;
    ptarm_buf_alloccopy(&buf_sig_remote, REMOTE_SIGNATURE, sizeof(REMOTE_SIGNATURE));
    ret = set_vin_p2wsh_2of2(&tx, 0, key_fund_sort,
                &buf_sig_local,
                &buf_sig_remote,
                &funding2of2);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&buf_sig_local);
    ptarm_buf_free(&buf_sig_remote);

    //ptarm_print_tx(&tx);

    //TestVectorとのチェック
    const uint8_t COMMIT_TX[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xbe,
        0xf6, 0x7e, 0x4e, 0x2f, 0xb9, 0xdd, 0xee, 0xb3,
        0x46, 0x19, 0x73, 0xcd, 0x4c, 0x62, 0xab, 0xb3,
        0x50, 0x50, 0xb1, 0xad, 0xd7, 0x72, 0x99, 0x5b,
        0x82, 0x0b, 0x58, 0x4a, 0x48, 0x84, 0x89, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x38, 0xb0, 0x2b, 0x80,
        0x04, 0xb8, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0xc2, 0x0b, 0x5d, 0x1f,
        0x85, 0x84, 0xfd, 0x90, 0x44, 0x3e, 0x7b, 0x7b,
        0x72, 0x01, 0x36, 0x17, 0x4f, 0xa4, 0xb9, 0x33,
        0x3c, 0x26, 0x1d, 0x04, 0xdb, 0xbd, 0x01, 0x26,
        0x35, 0xc0, 0xf4, 0x19, 0xa0, 0x0f, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x20, 0x8c,
        0x48, 0xd1, 0x51, 0x60, 0x39, 0x7c, 0x97, 0x31,
        0xdf, 0x9b, 0xc3, 0xb2, 0x36, 0x65, 0x6e, 0xfb,
        0x66, 0x65, 0xfb, 0xfe, 0x92, 0xb4, 0xa6, 0x87,
        0x8e, 0x88, 0xa4, 0x99, 0xf7, 0x41, 0xc4, 0xc0,
        0xc6, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16,
        0x00, 0x14, 0xcc, 0xf1, 0xaf, 0x2f, 0x2a, 0xab,
        0xee, 0x14, 0xbb, 0x40, 0xfa, 0x38, 0x51, 0xab,
        0x23, 0x01, 0xde, 0x84, 0x31, 0x10, 0x6f, 0x91,
        0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
        0x20, 0x4a, 0xdb, 0x4e, 0x2f, 0x00, 0x64, 0x3d,
        0xb3, 0x96, 0xdd, 0x12, 0x0d, 0x4e, 0x7d, 0xc1,
        0x76, 0x25, 0xf5, 0xf2, 0xc1, 0x1a, 0x40, 0xd8,
        0x57, 0xac, 0xcc, 0x86, 0x2d, 0x6b, 0x7d, 0xd8,
        0x0e, 0x04, 0x00, 0x47, 0x30, 0x44, 0x02, 0x20,
        0x0e, 0x93, 0x0a, 0x43, 0xc7, 0x95, 0x11, 0x62,
        0xdc, 0x15, 0xa2, 0xb7, 0x34, 0x4f, 0x48, 0x09,
        0x1c, 0x74, 0xc7, 0x0f, 0x70, 0x24, 0xe7, 0x11,
        0x6e, 0x90, 0x0d, 0x8b, 0xcf, 0xba, 0x86, 0x1c,
        0x02, 0x20, 0x66, 0xfa, 0x6c, 0xbd, 0xa3, 0x92,
        0x9e, 0x21, 0xda, 0xa2, 0xe7, 0xe1, 0x6a, 0x4b,
        0x94, 0x8d, 0xb7, 0xe8, 0x91, 0x9e, 0xf9, 0x78,
        0x40, 0x23, 0x60, 0xd1, 0x09, 0x5f, 0xfd, 0xaf,
        0xf7, 0xb0, 0x01, 0x48, 0x30, 0x45, 0x02, 0x21,
        0x00, 0xc1, 0xa3, 0xb0, 0xb6, 0x0c, 0xa0, 0x92,
        0xed, 0x50, 0x80, 0x12, 0x1f, 0x26, 0xa7, 0x4a,
        0x20, 0xce, 0xc6, 0xbd, 0xee, 0x3f, 0x8e, 0x47,
        0xba, 0xe9, 0x73, 0xfc, 0xdc, 0xeb, 0x3e, 0xda,
        0x55, 0x02, 0x20, 0x7d, 0x46, 0x7a, 0x98, 0x73,
        0xc9, 0x39, 0xbf, 0x3a, 0xa7, 0x58, 0x01, 0x4a,
        0xe6, 0x72, 0x95, 0xfe, 0xdb, 0xca, 0x52, 0x41,
        0x26, 0x33, 0xf7, 0xe5, 0xb2, 0x67, 0x0f, 0xc7,
        0xc3, 0x81, 0xc1, 0x01, 0x47, 0x52, 0x21, 0x02,
        0x3d, 0xa0, 0x92, 0xf6, 0x98, 0x0e, 0x58, 0xd2,
        0xc0, 0x37, 0x17, 0x31, 0x80, 0xe9, 0xa4, 0x65,
        0x47, 0x60, 0x26, 0xee, 0x50, 0xf9, 0x66, 0x95,
        0x96, 0x3e, 0x8e, 0xfe, 0x43, 0x6f, 0x54, 0xeb,
        0x21, 0x03, 0x0e, 0x9f, 0x7b, 0x62, 0x3d, 0x2c,
        0xcc, 0x7c, 0x9b, 0xd4, 0x4d, 0x66, 0xd5, 0xce,
        0x21, 0xce, 0x50, 0x4c, 0x0a, 0xcf, 0x63, 0x85,
        0xa1, 0x32, 0xce, 0xc6, 0xd3, 0xc3, 0x9f, 0xa7,
        0x11, 0xc1, 0x52, 0xae, 0x3e, 0x19, 0x52, 0x20,
    };
    //ptarm_print_rawtx(COMMIT_TX, sizeof(COMMIT_TX));
    ptarm_buf_t tx_buf;

    ptarm_tx_create(&tx_buf, &tx);
    ASSERT_EQ(0, memcmp(COMMIT_TX, tx_buf.buf, sizeof(COMMIT_TX)));
    ASSERT_EQ(sizeof(COMMIT_TX), tx_buf.len);
    ret = ptarm_tx_txid(txid_commit, &tx);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&tx_buf);

    ptarm_buf_free(&ws_local_buf);
}


// name: commitment tx with 4 outputs untrimmed (maximum feerate)
//      HTLC-success Transaction
TEST_F(ln_bolt3_c, committx4max_success_to)
{
    ///////////////////////////////////////////////////////////
    const uint8_t REMOTE_SIG0[] = {
        0x01,
    };
    const uint8_t REMOTE_SIG1[] = {
        01
    };
    const uint8_t REMOTE_SIG2[] = {
        01
    };
    const uint8_t REMOTE_SIG3[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xdf, 0xb7, 0x3b,
        0x4f, 0xe9, 0x61, 0xb3, 0x1a, 0x85, 0x9b, 0x2b,
        0xb1, 0xf4, 0xf1, 0x5c, 0xab, 0xab, 0x92, 0x65,
        0x01, 0x6d, 0xd0, 0x27, 0x23, 0x23, 0xdc, 0x6a,
        0x9e, 0x85, 0x88, 0x5c, 0x54, 0x02, 0x20, 0x59,
        0xa7, 0xb8, 0x7c, 0x02, 0x86, 0x1e, 0xe7, 0x06,
        0x62, 0x90, 0x7f, 0x25, 0xce, 0x11, 0x59, 0x7d,
        0x7b, 0x68, 0xd3, 0x39, 0x94, 0x43, 0xa8, 0x31,
        0xae, 0x40, 0xe7, 0x77, 0xb7, 0x6b, 0xdb, 0x01,
    };
    const uint8_t REMOTE_SIG4[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xea, 0x9d, 0xc2,
        0xa7, 0xc3, 0xc3, 0x64, 0x03, 0x34, 0xda, 0xb7,
        0x33, 0xbb, 0x4e, 0x03, 0x6e, 0x32, 0xa3, 0x10,
        0x6d, 0xc7, 0x07, 0xb2, 0x42, 0x27, 0x87, 0x4f,
        0xa4, 0xf7, 0xda, 0x74, 0x68, 0x02, 0x20, 0x4d,
        0x67, 0x2f, 0x7a, 0xc0, 0xfe, 0x76, 0x59, 0x31,
        0xa8, 0xdf, 0x10, 0xb8, 0x1e, 0x53, 0xa3, 0x24,
        0x2d, 0xd3, 0x2b, 0xd9, 0xdc, 0x93, 0x31, 0xeb,
        0x4a, 0x59, 0x6d, 0xa8, 0x79, 0x54, 0xe9, 0x01,
    };
    const struct {
        const uint8_t *sig;
        size_t len;
    } REMOTE_SIGS[] = {
        { REMOTE_SIG0, sizeof(REMOTE_SIG0) },
        { REMOTE_SIG1, sizeof(REMOTE_SIG1) },
        { REMOTE_SIG2, sizeof(REMOTE_SIG2) },
        { REMOTE_SIG3, sizeof(REMOTE_SIG3) },
        { REMOTE_SIG4, sizeof(REMOTE_SIG4) },
    };

    const uint8_t HS0[] = {
        0x00,
    };
    const uint8_t HS1[] = {
        0x00,
    };
    const uint8_t HS2[] = {
        0x00,
    };
    const uint8_t HS3[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xb8,
        0xde, 0x11, 0xeb, 0x51, 0xc2, 0x24, 0x98, 0xfe,
        0x39, 0x72, 0x2c, 0x72, 0x27, 0xb6, 0xe5, 0x5f,
        0xf1, 0xa9, 0x41, 0x46, 0xcf, 0x63, 0x84, 0x58,
        0xcb, 0x9b, 0xc6, 0xa0, 0x60, 0xd3, 0xa3, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x22, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xdf, 0xb7, 0x3b, 0x4f,
        0xe9, 0x61, 0xb3, 0x1a, 0x85, 0x9b, 0x2b, 0xb1,
        0xf4, 0xf1, 0x5c, 0xab, 0xab, 0x92, 0x65, 0x01,
        0x6d, 0xd0, 0x27, 0x23, 0x23, 0xdc, 0x6a, 0x9e,
        0x85, 0x88, 0x5c, 0x54, 0x02, 0x20, 0x59, 0xa7,
        0xb8, 0x7c, 0x02, 0x86, 0x1e, 0xe7, 0x06, 0x62,
        0x90, 0x7f, 0x25, 0xce, 0x11, 0x59, 0x7d, 0x7b,
        0x68, 0xd3, 0x39, 0x94, 0x43, 0xa8, 0x31, 0xae,
        0x40, 0xe7, 0x77, 0xb7, 0x6b, 0xdb, 0x01, 0x47,
        0x30, 0x44, 0x02, 0x20, 0x27, 0x65, 0xb9, 0xc9,
        0xec, 0xe4, 0xf1, 0x27, 0xfa, 0x54, 0x07, 0xfa,
        0xf6, 0x6d, 0xa4, 0xc5, 0xce, 0x27, 0x19, 0xcd,
        0xbe, 0x47, 0xcd, 0x31, 0x75, 0xfc, 0x7d, 0x48,
        0xb4, 0x82, 0xe4, 0x3d, 0x02, 0x20, 0x56, 0x05,
        0x12, 0x59, 0x25, 0xe0, 0x7b, 0xad, 0x1e, 0x41,
        0xc6, 0x18, 0xa4, 0xb4, 0x34, 0xd7, 0x2c, 0x88,
        0xa1, 0x64, 0x98, 0x1c, 0x4b, 0x8a, 0xf5, 0xea,
        0xf4, 0xee, 0x91, 0x42, 0xec, 0x3a, 0x01, 0x00,
        0x85, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21,
        0x03, 0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84,
        0xf8, 0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e,
        0x57, 0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca,
        0x81, 0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39,
        0xe7, 0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48,
        0x6f, 0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39,
        0xe2, 0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0,
        0x9d, 0x5b, 0x88, 0xac, 0x68, 0x68, 0xf7, 0x01,
        0x00, 0x00,
    };
    const uint8_t HS4[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xb8,
        0xde, 0x11, 0xeb, 0x51, 0xc2, 0x24, 0x98, 0xfe,
        0x39, 0x72, 0x2c, 0x72, 0x27, 0xb6, 0xe5, 0x5f,
        0xf1, 0xa9, 0x41, 0x46, 0xcf, 0x63, 0x84, 0x58,
        0xcb, 0x9b, 0xc6, 0xa0, 0x60, 0xd3, 0xa3, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x76, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xea, 0x9d, 0xc2, 0xa7,
        0xc3, 0xc3, 0x64, 0x03, 0x34, 0xda, 0xb7, 0x33,
        0xbb, 0x4e, 0x03, 0x6e, 0x32, 0xa3, 0x10, 0x6d,
        0xc7, 0x07, 0xb2, 0x42, 0x27, 0x87, 0x4f, 0xa4,
        0xf7, 0xda, 0x74, 0x68, 0x02, 0x20, 0x4d, 0x67,
        0x2f, 0x7a, 0xc0, 0xfe, 0x76, 0x59, 0x31, 0xa8,
        0xdf, 0x10, 0xb8, 0x1e, 0x53, 0xa3, 0x24, 0x2d,
        0xd3, 0x2b, 0xd9, 0xdc, 0x93, 0x31, 0xeb, 0x4a,
        0x59, 0x6d, 0xa8, 0x79, 0x54, 0xe9, 0x01, 0x47,
        0x30, 0x44, 0x02, 0x20, 0x04, 0x8a, 0x41, 0xc6,
        0x60, 0xc4, 0x84, 0x16, 0x93, 0xde, 0x03, 0x7d,
        0x00, 0xa4, 0x07, 0x81, 0x03, 0x89, 0xf4, 0x57,
        0x4b, 0x32, 0x86, 0xaf, 0xb7, 0xbc, 0x39, 0x2a,
        0x43, 0x8f, 0xa3, 0xf8, 0x02, 0x20, 0x04, 0x01,
        0xd7, 0x1f, 0xa8, 0x7c, 0x64, 0xfe, 0x62, 0x1b,
        0x49, 0xac, 0x07, 0xe3, 0xbf, 0x85, 0x15, 0x7a,
        0xc6, 0x80, 0xac, 0xb9, 0x77, 0x12, 0x4d, 0xa2,
        0x86, 0x52, 0xcc, 0x7f, 0x1a, 0x5c, 0x01, 0x20,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x8a, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc,
        0x1a, 0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d,
        0x23, 0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27,
        0x43, 0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d,
        0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d,
        0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97,
        0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e,
        0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52,
        0xae, 0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75,
        0xac, 0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const struct {
        const uint8_t *tx;
        size_t len;
    } HTLC_TX[] = {
        { HS0, sizeof(HS0) },
        { HS1, sizeof(HS1) },
        { HS2, sizeof(HS2) },
        { HS3, sizeof(HS3) },
        { HS4, sizeof(HS4) },
    };
    ///////////////////////////////////////////////////////////


    bool ret;
    int index;


    //各HTLCのsuccess transaction作成
    ptarm_tx_t tx2;

    ptarm_buf_t ws_buf;
    ln_create_script_success(&ws_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);

    //どのHTLCxがVOUTにいるか(ない場合は-1)
    //どのVOUTがどのHTLCなのかは、どうやって見つけるべきなのだろう？
    //                    HTLC0     HTLC1       HTLC2       HTLC3       HTLC4
    const int VOUTS[] = { -1,       -1,         -1,         0,          1     };

    ptarm_buf_t local_sig = PTARM_BUF_INIT;
    for (int lp = 0; lp < 5; lp++) {
        uint64_t fee = (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? feeinfo.htlc_timeout : feeinfo.htlc_success;
        index = VOUTS[lp];
        if ((index >= 0) && (tx.vout[index].value >= feeinfo.dust_limit_satoshi + fee)) {
            ptarm_tx_init(&tx2);
            ln_create_htlc_tx(&tx2, tx.vout[index].value - fee, &ws_buf, htlcinfos[lp].type, htlcinfos[lp].expiry, txid_commit, index);

            const ptarm_buf_t remote_sig = { (uint8_t *)REMOTE_SIGS[lp].sig, (uint16_t)REMOTE_SIGS[lp].len };
//            printf("[%d]%s\n", lp, (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? "offered" : "received");
            ret = ln_sign_htlc_tx(&tx2,
                        &local_sig,
                        tx.vout[index].value,
                        &keys_local_commit,
                        &remote_sig,
                        PREIMAGES[lp],
                        &htlcinfos[lp].script,
                        HTLCSIGN_TO_SUCCESS);
            ASSERT_TRUE(ret);
            ptarm_buf_t hs;
            ptarm_tx_create(&hs, &tx2);
            //ptarm_print_tx(&tx2);
            //ptarm_print_rawtx(HTLC_TX[lp].tx, HTLC_TX[lp].len);
            ASSERT_EQ(0, memcmp(HTLC_TX[lp].tx, hs.buf, HTLC_TX[lp].len));
            ASSERT_EQ(HTLC_TX[lp].len, hs.len);
            ptarm_buf_free(&local_sig);
            ptarm_buf_free(&hs);
            ptarm_tx_free(&tx2);
        }
    }

    for (int lp = 0; lp < 5; lp++) {
        ptarm_buf_free((ptarm_buf_t *)&htlcinfos[lp].script);
    }
    ptarm_buf_free(&ws_buf);
    ptarm_tx_free(&tx2);

    ptarm_tx_free(&tx);
}


// name: commitment tx with 3 outputs untrimmed (minimum feerate)
//      Commitment Transaction
TEST_F(ln_bolt3_c, committx3min_commit)
{
    ptarm_tx_init(&tx);

    bool ret;

    //amounts
    const uint64_t MSAT_LOCAL = 6988000000LL;
    const uint64_t MSAT_REMOTE = 3000000000LL;


    feeinfo.feerate_per_kw = 3703;
    uint64_t fee_act = ln_fee_calc(&feeinfo, (const ln_htlcinfo_t **)pp_htlcinfos, 5);

//    printf("base fee_committx=%llu\n", (unsigned long long)feeinfo.commit);
//    printf("actual fee_committx=%llu\n", (unsigned long long)fee_act);
//    printf("fee success=%d\n", (int)feeinfo.htlc_success);
//    printf("fee timeout=%d\n", (int)feeinfo.htlc_timeout);
    ASSERT_EQ(2603, feeinfo.htlc_success);
    ASSERT_EQ(2455, feeinfo.htlc_timeout);
    ASSERT_EQ(3317, feeinfo.commit);
    ASSERT_EQ(11317, fee_act);


    ///////////////////////////////////////
    const uint8_t WS_HTLC0[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0xb8, 0xbc, 0xb0,
        0x7f, 0x63, 0x44, 0xb4, 0x2a, 0xb0, 0x42, 0x50,
        0xc8, 0x6a, 0x6e, 0x8b, 0x75, 0xd3, 0xfd, 0xbb,
        0xc6, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf4, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC1[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b, 0x2e,
        0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb, 0x7b,
        0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc, 0xe2,
        0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC2[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e, 0x1b,
        0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c, 0xd9,
        0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9, 0xb5,
        0xd1, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC3[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48, 0x6f,
        0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39, 0xe2,
        0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0, 0x9d,
        0x5b, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC4[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc, 0x1a,
        0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d, 0x23,
        0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27, 0x43,
        0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };

    ///////////////////////////////////////

    const struct {
        const uint8_t *ws;
        size_t len;
    } SCRIPTS[] = {
        { WS_HTLC0, sizeof(WS_HTLC0) },
        { WS_HTLC1, sizeof(WS_HTLC1) },
        { WS_HTLC2, sizeof(WS_HTLC2) },
        { WS_HTLC3, sizeof(WS_HTLC3) },
        { WS_HTLC4, sizeof(WS_HTLC4) }
    };

    for (int lp = 0; lp < 5; lp++) {
        ln_create_htlcinfo(&pp_htlcinfos[lp]->script, pp_htlcinfos[lp]->type, LOCAL_KEY, LOCAL_REVO_KEY, REMOTE_KEY, pp_htlcinfos[lp]->preimage_hash, pp_htlcinfos[lp]->expiry);

        ASSERT_EQ(0, memcmp(SCRIPTS[lp].ws, htlcinfos[lp].script.buf, SCRIPTS[lp].len));
        ASSERT_EQ(SCRIPTS[lp].len, htlcinfos[lp].script.len);
    }


    //to-local wscript
    ptarm_buf_t ws_local_buf;

    ln_create_script_local(&ws_local_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);
//    dumpbin(ws_local_buf.buf, ws_local_buf.len);
//    printf("-[to-local]---------------------\n");
//    ptarm_print_script(ws_local_buf.buf, ws_local_buf.len);
//    printf("----------------------: %d\n", ws_local_buf.len);
    const uint8_t TO_LOCAL_WSCRIPT[] = {
        0x63, 0x21, 0x02, 0x12, 0xa1, 0x40, 0xcd, 0x0c,
        0x65, 0x39, 0xd0, 0x7c, 0xd0, 0x8d, 0xfe, 0x09,
        0x98, 0x4d, 0xec, 0x32, 0x51, 0xea, 0x80, 0x8b,
        0x89, 0x2e, 0xfe, 0xac, 0x3e, 0xde, 0x94, 0x02,
        0xbf, 0x2b, 0x19, 0x67, 0x02, 0x90, 0x00, 0xb2,
        0x75, 0x21, 0x03, 0xfd, 0x59, 0x60, 0x52, 0x8d,
        0xc1, 0x52, 0x01, 0x49, 0x52, 0xef, 0xdb, 0x70,
        0x2a, 0x88, 0xf7, 0x1e, 0x3c, 0x16, 0x53, 0xb2,
        0x31, 0x44, 0x31, 0x70, 0x1e, 0xc7, 0x7e, 0x57,
        0xfd, 0xe8, 0x3c, 0x68, 0xac,
    };
    ASSERT_EQ(0, memcmp(TO_LOCAL_WSCRIPT, ws_local_buf.buf, sizeof(TO_LOCAL_WSCRIPT)));
    ASSERT_EQ(sizeof(TO_LOCAL_WSCRIPT), ws_local_buf.len);


    //tx

    ln_tx_cmt_t lntx_commit;
    lntx_commit.fund.txid = TXID_FUND;
    lntx_commit.fund.txid_index = TXID_FUND_INDEX;
    lntx_commit.fund.satoshi = PTARM_MBTC2SATOSHI(100);
    lntx_commit.fund.p_script = &funding2of2;
    lntx_commit.local.satoshi = LN_MSAT2SATOSHI(MSAT_LOCAL);
    lntx_commit.local.p_script = &ws_local_buf;
    lntx_commit.remote.satoshi = LN_MSAT2SATOSHI(MSAT_REMOTE);
    lntx_commit.remote.pubkey = REMOTE_KEY;
    lntx_commit.obscured = obscured;
    lntx_commit.p_feeinfo = &feeinfo;
    lntx_commit.pp_htlcinfo = pp_htlcinfos;
    lntx_commit.htlcinfo_num = 5;
    ptarm_buf_t buf_sig_local;

    ret = ln_create_commit_tx(&tx, &buf_sig_local, &lntx_commit, true, &priv_data);
    ASSERT_TRUE(ret);


    const uint8_t LOCAL_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x47, 0x30, 0x55, 0x31,
        0xdd, 0x44, 0x39, 0x1d, 0xce, 0x03, 0xae, 0x20,
        0xf8, 0x73, 0x50, 0x05, 0xc6, 0x15, 0xeb, 0x07,
        0x7a, 0x97, 0x4e, 0xdb, 0x00, 0x59, 0xea, 0x1a,
        0x31, 0x18, 0x57, 0xd6, 0x02, 0x20, 0x2e, 0x0e,
        0xd6, 0x97, 0x2f, 0xbd, 0xd1, 0xe8, 0xcb, 0x54,
        0x2b, 0x06, 0xe0, 0x92, 0x9b, 0xc4, 0x1b, 0x2d,
        0xdf, 0x23, 0x6e, 0x04, 0xcb, 0x75, 0xed, 0xd5,
        0x61, 0x51, 0xf4, 0x19, 0x75, 0x06, 0x01,
    };
    ASSERT_EQ(0, memcmp(LOCAL_SIGNATURE, buf_sig_local.buf, sizeof(LOCAL_SIGNATURE)));
    ASSERT_EQ(sizeof(LOCAL_SIGNATURE), buf_sig_local.len);

    const uint8_t REMOTE_SIGNATURE[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0x8b, 0x7c, 0x19,
        0x1d, 0xd4, 0x68, 0x93, 0xb6, 0x7b, 0x62, 0x8e,
        0x61, 0x8d, 0x2d, 0xc8, 0xe8, 0x11, 0x69, 0xd3,
        0x8b, 0xad, 0xe3, 0x10, 0x18, 0x1a, 0xb7, 0x7d,
        0x7c, 0x94, 0xc6, 0x67, 0x5e, 0x02, 0x20, 0x3b,
        0x4d, 0xd1, 0x31, 0xfd, 0x7c, 0x9d, 0xeb, 0x29,
        0x95, 0x60, 0x98, 0x3d, 0xcd, 0xc4, 0x85, 0x54,
        0x5c, 0x98, 0xf9, 0x89, 0xf7, 0xae, 0x81, 0x80,
        0xc2, 0x82, 0x89, 0xf9, 0xe6, 0xbd, 0xb0, 0x01,
    };
    ptarm_buf_t buf_sig_remote;
    ptarm_buf_alloccopy(&buf_sig_remote, REMOTE_SIGNATURE, sizeof(REMOTE_SIGNATURE));
    ret = set_vin_p2wsh_2of2(&tx, 0, key_fund_sort,
                &buf_sig_local,
                &buf_sig_remote,
                &funding2of2);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&buf_sig_local);
    ptarm_buf_free(&buf_sig_remote);

    //ptarm_print_tx(&tx);

    //TestVectorとのチェック
    const uint8_t COMMIT_TX[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xbe,
        0xf6, 0x7e, 0x4e, 0x2f, 0xb9, 0xdd, 0xee, 0xb3,
        0x46, 0x19, 0x73, 0xcd, 0x4c, 0x62, 0xab, 0xb3,
        0x50, 0x50, 0xb1, 0xad, 0xd7, 0x72, 0x99, 0x5b,
        0x82, 0x0b, 0x58, 0x4a, 0x48, 0x84, 0x89, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x38, 0xb0, 0x2b, 0x80,
        0x03, 0xa0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x8c, 0x48, 0xd1, 0x51,
        0x60, 0x39, 0x7c, 0x97, 0x31, 0xdf, 0x9b, 0xc3,
        0xb2, 0x36, 0x65, 0x6e, 0xfb, 0x66, 0x65, 0xfb,
        0xfe, 0x92, 0xb4, 0xa6, 0x87, 0x8e, 0x88, 0xa4,
        0x99, 0xf7, 0x41, 0xc4, 0xc0, 0xc6, 0x2d, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x14, 0xcc,
        0xf1, 0xaf, 0x2f, 0x2a, 0xab, 0xee, 0x14, 0xbb,
        0x40, 0xfa, 0x38, 0x51, 0xab, 0x23, 0x01, 0xde,
        0x84, 0x31, 0x10, 0xeb, 0x93, 0x6a, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb,
        0x4e, 0x2f, 0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd,
        0x12, 0x0d, 0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5,
        0xf2, 0xc1, 0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc,
        0x86, 0x2d, 0x6b, 0x7d, 0xd8, 0x0e, 0x04, 0x00,
        0x47, 0x30, 0x44, 0x02, 0x20, 0x47, 0x30, 0x55,
        0x31, 0xdd, 0x44, 0x39, 0x1d, 0xce, 0x03, 0xae,
        0x20, 0xf8, 0x73, 0x50, 0x05, 0xc6, 0x15, 0xeb,
        0x07, 0x7a, 0x97, 0x4e, 0xdb, 0x00, 0x59, 0xea,
        0x1a, 0x31, 0x18, 0x57, 0xd6, 0x02, 0x20, 0x2e,
        0x0e, 0xd6, 0x97, 0x2f, 0xbd, 0xd1, 0xe8, 0xcb,
        0x54, 0x2b, 0x06, 0xe0, 0x92, 0x9b, 0xc4, 0x1b,
        0x2d, 0xdf, 0x23, 0x6e, 0x04, 0xcb, 0x75, 0xed,
        0xd5, 0x61, 0x51, 0xf4, 0x19, 0x75, 0x06, 0x01,
        0x48, 0x30, 0x45, 0x02, 0x21, 0x00, 0x8b, 0x7c,
        0x19, 0x1d, 0xd4, 0x68, 0x93, 0xb6, 0x7b, 0x62,
        0x8e, 0x61, 0x8d, 0x2d, 0xc8, 0xe8, 0x11, 0x69,
        0xd3, 0x8b, 0xad, 0xe3, 0x10, 0x18, 0x1a, 0xb7,
        0x7d, 0x7c, 0x94, 0xc6, 0x67, 0x5e, 0x02, 0x20,
        0x3b, 0x4d, 0xd1, 0x31, 0xfd, 0x7c, 0x9d, 0xeb,
        0x29, 0x95, 0x60, 0x98, 0x3d, 0xcd, 0xc4, 0x85,
        0x54, 0x5c, 0x98, 0xf9, 0x89, 0xf7, 0xae, 0x81,
        0x80, 0xc2, 0x82, 0x89, 0xf9, 0xe6, 0xbd, 0xb0,
        0x01, 0x47, 0x52, 0x21, 0x02, 0x3d, 0xa0, 0x92,
        0xf6, 0x98, 0x0e, 0x58, 0xd2, 0xc0, 0x37, 0x17,
        0x31, 0x80, 0xe9, 0xa4, 0x65, 0x47, 0x60, 0x26,
        0xee, 0x50, 0xf9, 0x66, 0x95, 0x96, 0x3e, 0x8e,
        0xfe, 0x43, 0x6f, 0x54, 0xeb, 0x21, 0x03, 0x0e,
        0x9f, 0x7b, 0x62, 0x3d, 0x2c, 0xcc, 0x7c, 0x9b,
        0xd4, 0x4d, 0x66, 0xd5, 0xce, 0x21, 0xce, 0x50,
        0x4c, 0x0a, 0xcf, 0x63, 0x85, 0xa1, 0x32, 0xce,
        0xc6, 0xd3, 0xc3, 0x9f, 0xa7, 0x11, 0xc1, 0x52,
        0xae, 0x3e, 0x19, 0x52, 0x20,
    };
    //ptarm_print_rawtx(COMMIT_TX, sizeof(COMMIT_TX));
    ptarm_buf_t tx_buf;

    ptarm_tx_create(&tx_buf, &tx);
    ASSERT_EQ(0, memcmp(COMMIT_TX, tx_buf.buf, sizeof(COMMIT_TX)));
    ASSERT_EQ(sizeof(COMMIT_TX), tx_buf.len);
    ret = ptarm_tx_txid(txid_commit, &tx);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&tx_buf);

    ptarm_buf_free(&ws_local_buf);
}


// name: commitment tx with 3 outputs untrimmed (minimum feerate)
//      HTLC-success Transaction
TEST_F(ln_bolt3_c, committx3min_success_to)
{
    ///////////////////////////////////////////////////////////
    const uint8_t REMOTE_SIG0[] = {
        0x01,
    };
    const uint8_t REMOTE_SIG1[] = {
        01
    };
    const uint8_t REMOTE_SIG2[] = {
        01
    };
    const uint8_t REMOTE_SIG3[] = {
        01
    };
    const uint8_t REMOTE_SIG4[] = {
        0x30, 0x44, 0x02, 0x20, 0x44, 0xf6, 0x5c, 0xf8,
        0x33, 0xaf, 0xdc, 0xb9, 0xd1, 0x87, 0x95, 0xca,
        0x93, 0xf7, 0x23, 0x00, 0x05, 0x77, 0x76, 0x62,
        0x53, 0x98, 0x15, 0xb8, 0xa6, 0x01, 0xee, 0xb3,
        0xe5, 0x71, 0x29, 0xa9, 0x02, 0x20, 0x6a, 0x4b,
        0xf3, 0xe5, 0x33, 0x92, 0xaf, 0xfb, 0xba, 0x52,
        0x64, 0x06, 0x27, 0xde, 0xfa, 0x8d, 0xc8, 0xaf,
        0x61, 0xc9, 0x58, 0xc9, 0xe8, 0x27, 0xb2, 0x79,
        0x8a, 0xb4, 0x58, 0x28, 0xab, 0xdd, 0x01,
    };
    const struct {
        const uint8_t *sig;
        size_t len;
    } REMOTE_SIGS[] = {
        { REMOTE_SIG0, sizeof(REMOTE_SIG0) },
        { REMOTE_SIG1, sizeof(REMOTE_SIG1) },
        { REMOTE_SIG2, sizeof(REMOTE_SIG2) },
        { REMOTE_SIG3, sizeof(REMOTE_SIG3) },
        { REMOTE_SIG4, sizeof(REMOTE_SIG4) },
    };

    const uint8_t HS0[] = {
        0x00,
    };
    const uint8_t HS1[] = {

    };
    const uint8_t HS2[] = {

    };
    const uint8_t HS3[] = {

    };
    const uint8_t HS4[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x1c,
        0x07, 0x6a, 0xa7, 0xfb, 0x3d, 0x74, 0x60, 0xd1,
        0x0d, 0xf6, 0x94, 0x32, 0xc9, 0x04, 0x22, 0x7e,
        0xa8, 0x4b, 0xbf, 0x31, 0x34, 0xd4, 0xce, 0xee,
        0x5f, 0xb0, 0xf1, 0x35, 0xef, 0x20, 0x6d, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x75, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x44, 0xf6, 0x5c, 0xf8, 0x33,
        0xaf, 0xdc, 0xb9, 0xd1, 0x87, 0x95, 0xca, 0x93,
        0xf7, 0x23, 0x00, 0x05, 0x77, 0x76, 0x62, 0x53,
        0x98, 0x15, 0xb8, 0xa6, 0x01, 0xee, 0xb3, 0xe5,
        0x71, 0x29, 0xa9, 0x02, 0x20, 0x6a, 0x4b, 0xf3,
        0xe5, 0x33, 0x92, 0xaf, 0xfb, 0xba, 0x52, 0x64,
        0x06, 0x27, 0xde, 0xfa, 0x8d, 0xc8, 0xaf, 0x61,
        0xc9, 0x58, 0xc9, 0xe8, 0x27, 0xb2, 0x79, 0x8a,
        0xb4, 0x58, 0x28, 0xab, 0xdd, 0x01, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xb9, 0x4d, 0x93, 0x1a,
        0x81, 0x1b, 0x32, 0xee, 0xb8, 0x85, 0xc2, 0x8d,
        0xdc, 0xf9, 0x99, 0xae, 0x19, 0x81, 0x89, 0x3b,
        0x21, 0xdd, 0x13, 0x29, 0x92, 0x95, 0x43, 0xfe,
        0x87, 0xce, 0x79, 0x30, 0x02, 0x20, 0x63, 0x70,
        0x10, 0x7f, 0xdd, 0x15, 0x1c, 0x5f, 0x23, 0x84,
        0xf9, 0xce, 0xb7, 0x1b, 0x31, 0x07, 0xc6, 0x9c,
        0x74, 0xc8, 0xed, 0x5a, 0x28, 0xa9, 0x4a, 0x4a,
        0xb2, 0xd2, 0x7d, 0x3b, 0x07, 0x24, 0x01, 0x20,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x8a, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72,
        0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c,
        0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5,
        0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85,
        0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c,
        0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21,
        0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6,
        0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82,
        0x01, 0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc,
        0x1a, 0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d,
        0x23, 0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27,
        0x43, 0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d,
        0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d,
        0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97,
        0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e,
        0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52,
        0xae, 0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75,
        0xac, 0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const struct {
        const uint8_t *tx;
        size_t len;
    } HTLC_TX[] = {
        { HS0, sizeof(HS0) },
        { HS1, sizeof(HS1) },
        { HS2, sizeof(HS2) },
        { HS3, sizeof(HS3) },
        { HS4, sizeof(HS4) },
    };
    ///////////////////////////////////////////////////////////


    bool ret;
    int index;


    //各HTLCのsuccess transaction作成
    ptarm_tx_t tx2;

    ptarm_buf_t ws_buf;
    ln_create_script_success(&ws_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);

    //どのHTLCxがVOUTにいるか(ない場合は-1)
    //どのVOUTがどのHTLCなのかは、どうやって見つけるべきなのだろう？
    //                    HTLC0     HTLC1       HTLC2       HTLC3       HTLC4
    const int VOUTS[] = { -1,       -1,         -1,         -1,         0     };

    ptarm_buf_t local_sig = PTARM_BUF_INIT;
    for (int lp = 0; lp < 5; lp++) {
        uint64_t fee = (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? feeinfo.htlc_timeout : feeinfo.htlc_success;
        index = VOUTS[lp];
        if ((index >= 0) && (tx.vout[index].value >= feeinfo.dust_limit_satoshi + fee)) {
            ptarm_tx_init(&tx2);
            ln_create_htlc_tx(&tx2, tx.vout[index].value - fee, &ws_buf, htlcinfos[lp].type, htlcinfos[lp].expiry, txid_commit, index);

            const ptarm_buf_t remote_sig = { (uint8_t *)REMOTE_SIGS[lp].sig, (uint16_t)REMOTE_SIGS[lp].len };
//            printf("[%d]%s\n", lp, (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? "offered" : "received");
            ret = ln_sign_htlc_tx(&tx2,
                        &local_sig,
                        tx.vout[index].value,
                        &keys_local_commit,
                        &remote_sig,
                        PREIMAGES[lp],
                        &htlcinfos[lp].script,
                        HTLCSIGN_TO_SUCCESS);
            ASSERT_TRUE(ret);
            ptarm_buf_t hs;
            ptarm_tx_create(&hs, &tx2);
            //ptarm_print_tx(&tx2);
            //ptarm_print_rawtx(HTLC_TX[lp].tx, HTLC_TX[lp].len);
            ASSERT_EQ(0, memcmp(HTLC_TX[lp].tx, hs.buf, HTLC_TX[lp].len));
            ASSERT_EQ(HTLC_TX[lp].len, hs.len);
            ptarm_buf_free(&local_sig);
            ptarm_buf_free(&hs);
            ptarm_tx_free(&tx2);
        }
    }

    for (int lp = 0; lp < 5; lp++) {
        ptarm_buf_free((ptarm_buf_t *)&htlcinfos[lp].script);
    }
    ptarm_buf_free(&ws_buf);
    ptarm_tx_free(&tx2);

    ptarm_tx_free(&tx);
}


// name: commitment tx with 3 outputs untrimmed (maximum feerate)
//      Commitment Transaction
TEST_F(ln_bolt3_c, committx3max_commit)
{
    ptarm_tx_init(&tx);

    bool ret;

    //amounts
    const uint64_t MSAT_LOCAL = 6988000000LL;
    const uint64_t MSAT_REMOTE = 3000000000LL;


    feeinfo.feerate_per_kw = 4914;
    uint64_t fee_act = ln_fee_calc(&feeinfo, (const ln_htlcinfo_t **)pp_htlcinfos, 5);

//    printf("base fee_committx=%llu\n", (unsigned long long)feeinfo.commit);
//    printf("actual fee_committx=%llu\n", (unsigned long long)fee_act);
//    printf("fee success=%d\n", (int)feeinfo.htlc_success);
//    printf("fee timeout=%d\n", (int)feeinfo.htlc_timeout);
    ASSERT_EQ(3454, feeinfo.htlc_success);
    ASSERT_EQ(3257, feeinfo.htlc_timeout);
    ASSERT_EQ(4402, feeinfo.commit);
    ASSERT_EQ(12402, fee_act);


    ///////////////////////////////////////
    const uint8_t WS_HTLC0[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0xb8, 0xbc, 0xb0,
        0x7f, 0x63, 0x44, 0xb4, 0x2a, 0xb0, 0x42, 0x50,
        0xc8, 0x6a, 0x6e, 0x8b, 0x75, 0xd3, 0xfd, 0xbb,
        0xc6, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf4, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC1[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b, 0x2e,
        0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb, 0x7b,
        0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc, 0xe2,
        0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC2[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e, 0x1b,
        0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c, 0xd9,
        0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9, 0xb5,
        0xd1, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC3[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48, 0x6f,
        0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39, 0xe2,
        0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0, 0x9d,
        0x5b, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC4[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc, 0x1a,
        0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d, 0x23,
        0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27, 0x43,
        0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };

    ///////////////////////////////////////

    const struct {
        const uint8_t *ws;
        size_t len;
    } SCRIPTS[] = {
        { WS_HTLC0, sizeof(WS_HTLC0) },
        { WS_HTLC1, sizeof(WS_HTLC1) },
        { WS_HTLC2, sizeof(WS_HTLC2) },
        { WS_HTLC3, sizeof(WS_HTLC3) },
        { WS_HTLC4, sizeof(WS_HTLC4) }
    };

    for (int lp = 0; lp < 5; lp++) {
        ln_create_htlcinfo(&pp_htlcinfos[lp]->script, pp_htlcinfos[lp]->type, LOCAL_KEY, LOCAL_REVO_KEY, REMOTE_KEY, pp_htlcinfos[lp]->preimage_hash, pp_htlcinfos[lp]->expiry);

        ASSERT_EQ(0, memcmp(SCRIPTS[lp].ws, htlcinfos[lp].script.buf, SCRIPTS[lp].len));
        ASSERT_EQ(SCRIPTS[lp].len, htlcinfos[lp].script.len);
    }

    //to-local wscript
    ptarm_buf_t ws_local_buf;

    ln_create_script_local(&ws_local_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);
//    dumpbin(ws_local_buf.buf, ws_local_buf.len);
//    printf("-[to-local]---------------------\n");
//    ptarm_print_script(ws_local_buf.buf, ws_local_buf.len);
//    printf("----------------------: %d\n", ws_local_buf.len);
    const uint8_t TO_LOCAL_WSCRIPT[] = {
        0x63, 0x21, 0x02, 0x12, 0xa1, 0x40, 0xcd, 0x0c,
        0x65, 0x39, 0xd0, 0x7c, 0xd0, 0x8d, 0xfe, 0x09,
        0x98, 0x4d, 0xec, 0x32, 0x51, 0xea, 0x80, 0x8b,
        0x89, 0x2e, 0xfe, 0xac, 0x3e, 0xde, 0x94, 0x02,
        0xbf, 0x2b, 0x19, 0x67, 0x02, 0x90, 0x00, 0xb2,
        0x75, 0x21, 0x03, 0xfd, 0x59, 0x60, 0x52, 0x8d,
        0xc1, 0x52, 0x01, 0x49, 0x52, 0xef, 0xdb, 0x70,
        0x2a, 0x88, 0xf7, 0x1e, 0x3c, 0x16, 0x53, 0xb2,
        0x31, 0x44, 0x31, 0x70, 0x1e, 0xc7, 0x7e, 0x57,
        0xfd, 0xe8, 0x3c, 0x68, 0xac,
    };
    ASSERT_EQ(0, memcmp(TO_LOCAL_WSCRIPT, ws_local_buf.buf, sizeof(TO_LOCAL_WSCRIPT)));
    ASSERT_EQ(sizeof(TO_LOCAL_WSCRIPT), ws_local_buf.len);


    //tx

    ln_tx_cmt_t lntx_commit;
    lntx_commit.fund.txid = TXID_FUND;
    lntx_commit.fund.txid_index = TXID_FUND_INDEX;
    lntx_commit.fund.satoshi = PTARM_MBTC2SATOSHI(100);
    lntx_commit.fund.p_script = &funding2of2;
    lntx_commit.local.satoshi = LN_MSAT2SATOSHI(MSAT_LOCAL);
    lntx_commit.local.p_script = &ws_local_buf;
    lntx_commit.remote.satoshi = LN_MSAT2SATOSHI(MSAT_REMOTE);
    lntx_commit.remote.pubkey = REMOTE_KEY;
    lntx_commit.obscured = obscured;
    lntx_commit.p_feeinfo = &feeinfo;
    lntx_commit.pp_htlcinfo = pp_htlcinfos;
    lntx_commit.htlcinfo_num = 5;
    ptarm_buf_t buf_sig_local;

    ret = ln_create_commit_tx(&tx, &buf_sig_local, &lntx_commit, true, &priv_data);
    ASSERT_TRUE(ret);


    const uint8_t LOCAL_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x6a, 0x26, 0x79, 0xef,
        0xa3, 0xc7, 0xaa, 0xff, 0xd2, 0xa4, 0x47, 0xfd,
        0x0d, 0xf7, 0xab, 0xa8, 0x79, 0x28, 0x58, 0xb5,
        0x89, 0x75, 0x0f, 0x6a, 0x12, 0x03, 0xf9, 0x25,
        0x91, 0x73, 0x19, 0x8a, 0x02, 0x20, 0x08, 0xd5,
        0x2a, 0x0e, 0x77, 0xa9, 0x9a, 0xb5, 0x33, 0xc3,
        0x62, 0x06, 0xcb, 0x15, 0xad, 0x7a, 0xeb, 0x2a,
        0xa7, 0x2b, 0x93, 0xd4, 0xb5, 0x71, 0xe7, 0x28,
        0xcb, 0x5e, 0xc2, 0xf6, 0xfe, 0x26, 0x01,
    };
    ASSERT_EQ(0, memcmp(LOCAL_SIGNATURE, buf_sig_local.buf, sizeof(LOCAL_SIGNATURE)));
    ASSERT_EQ(sizeof(LOCAL_SIGNATURE), buf_sig_local.len);

    const uint8_t REMOTE_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x6d, 0x6c, 0xb9, 0x39,
        0x69, 0xd3, 0x91, 0x77, 0xa0, 0x9d, 0x5d, 0x45,
        0xb5, 0x83, 0xf3, 0x49, 0x66, 0x19, 0x5b, 0x77,
        0xc7, 0xe5, 0x85, 0xcf, 0x47, 0xac, 0x5c, 0xce,
        0x0c, 0x90, 0xce, 0xfb, 0x02, 0x20, 0x31, 0xd7,
        0x1a, 0xe4, 0xe3, 0x3a, 0x4e, 0x80, 0xdf, 0x7f,
        0x98, 0x1d, 0x69, 0x6f, 0xbd, 0xee, 0x51, 0x73,
        0x37, 0x80, 0x6a, 0x3c, 0x71, 0x38, 0xb7, 0x49,
        0x1e, 0x2c, 0xbb, 0x07, 0x7a, 0x0e, 0x01,
    };
    ptarm_buf_t buf_sig_remote;
    ptarm_buf_alloccopy(&buf_sig_remote, REMOTE_SIGNATURE, sizeof(REMOTE_SIGNATURE));
    ret = set_vin_p2wsh_2of2(&tx, 0, key_fund_sort,
                &buf_sig_local,
                &buf_sig_remote,
                &funding2of2);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&buf_sig_local);
    ptarm_buf_free(&buf_sig_remote);

    //ptarm_print_tx(&tx);

    //TestVectorとのチェック
    const uint8_t COMMIT_TX[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xbe,
        0xf6, 0x7e, 0x4e, 0x2f, 0xb9, 0xdd, 0xee, 0xb3,
        0x46, 0x19, 0x73, 0xcd, 0x4c, 0x62, 0xab, 0xb3,
        0x50, 0x50, 0xb1, 0xad, 0xd7, 0x72, 0x99, 0x5b,
        0x82, 0x0b, 0x58, 0x4a, 0x48, 0x84, 0x89, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x38, 0xb0, 0x2b, 0x80,
        0x03, 0xa0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x8c, 0x48, 0xd1, 0x51,
        0x60, 0x39, 0x7c, 0x97, 0x31, 0xdf, 0x9b, 0xc3,
        0xb2, 0x36, 0x65, 0x6e, 0xfb, 0x66, 0x65, 0xfb,
        0xfe, 0x92, 0xb4, 0xa6, 0x87, 0x8e, 0x88, 0xa4,
        0x99, 0xf7, 0x41, 0xc4, 0xc0, 0xc6, 0x2d, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x14, 0xcc,
        0xf1, 0xaf, 0x2f, 0x2a, 0xab, 0xee, 0x14, 0xbb,
        0x40, 0xfa, 0x38, 0x51, 0xab, 0x23, 0x01, 0xde,
        0x84, 0x31, 0x10, 0xae, 0x8f, 0x6a, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb,
        0x4e, 0x2f, 0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd,
        0x12, 0x0d, 0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5,
        0xf2, 0xc1, 0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc,
        0x86, 0x2d, 0x6b, 0x7d, 0xd8, 0x0e, 0x04, 0x00,
        0x47, 0x30, 0x44, 0x02, 0x20, 0x6a, 0x26, 0x79,
        0xef, 0xa3, 0xc7, 0xaa, 0xff, 0xd2, 0xa4, 0x47,
        0xfd, 0x0d, 0xf7, 0xab, 0xa8, 0x79, 0x28, 0x58,
        0xb5, 0x89, 0x75, 0x0f, 0x6a, 0x12, 0x03, 0xf9,
        0x25, 0x91, 0x73, 0x19, 0x8a, 0x02, 0x20, 0x08,
        0xd5, 0x2a, 0x0e, 0x77, 0xa9, 0x9a, 0xb5, 0x33,
        0xc3, 0x62, 0x06, 0xcb, 0x15, 0xad, 0x7a, 0xeb,
        0x2a, 0xa7, 0x2b, 0x93, 0xd4, 0xb5, 0x71, 0xe7,
        0x28, 0xcb, 0x5e, 0xc2, 0xf6, 0xfe, 0x26, 0x01,
        0x47, 0x30, 0x44, 0x02, 0x20, 0x6d, 0x6c, 0xb9,
        0x39, 0x69, 0xd3, 0x91, 0x77, 0xa0, 0x9d, 0x5d,
        0x45, 0xb5, 0x83, 0xf3, 0x49, 0x66, 0x19, 0x5b,
        0x77, 0xc7, 0xe5, 0x85, 0xcf, 0x47, 0xac, 0x5c,
        0xce, 0x0c, 0x90, 0xce, 0xfb, 0x02, 0x20, 0x31,
        0xd7, 0x1a, 0xe4, 0xe3, 0x3a, 0x4e, 0x80, 0xdf,
        0x7f, 0x98, 0x1d, 0x69, 0x6f, 0xbd, 0xee, 0x51,
        0x73, 0x37, 0x80, 0x6a, 0x3c, 0x71, 0x38, 0xb7,
        0x49, 0x1e, 0x2c, 0xbb, 0x07, 0x7a, 0x0e, 0x01,
        0x47, 0x52, 0x21, 0x02, 0x3d, 0xa0, 0x92, 0xf6,
        0x98, 0x0e, 0x58, 0xd2, 0xc0, 0x37, 0x17, 0x31,
        0x80, 0xe9, 0xa4, 0x65, 0x47, 0x60, 0x26, 0xee,
        0x50, 0xf9, 0x66, 0x95, 0x96, 0x3e, 0x8e, 0xfe,
        0x43, 0x6f, 0x54, 0xeb, 0x21, 0x03, 0x0e, 0x9f,
        0x7b, 0x62, 0x3d, 0x2c, 0xcc, 0x7c, 0x9b, 0xd4,
        0x4d, 0x66, 0xd5, 0xce, 0x21, 0xce, 0x50, 0x4c,
        0x0a, 0xcf, 0x63, 0x85, 0xa1, 0x32, 0xce, 0xc6,
        0xd3, 0xc3, 0x9f, 0xa7, 0x11, 0xc1, 0x52, 0xae,
        0x3e, 0x19, 0x52, 0x20,
    };
    //ptarm_print_rawtx(COMMIT_TX, sizeof(COMMIT_TX));
    ptarm_buf_t tx_buf;

    ptarm_tx_create(&tx_buf, &tx);
    ASSERT_EQ(0, memcmp(COMMIT_TX, tx_buf.buf, sizeof(COMMIT_TX)));
    ASSERT_EQ(sizeof(COMMIT_TX), tx_buf.len);
    ret = ptarm_tx_txid(txid_commit, &tx);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&tx_buf);

    ptarm_buf_free(&ws_local_buf);
}


// name: commitment tx with 3 outputs untrimmed (maximum feerate)
//      HTLC-success Transaction
TEST_F(ln_bolt3_c, committx3max_success_to)
{
    ///////////////////////////////////////////////////////////
    const uint8_t REMOTE_SIG0[] = {
        0x01,
    };
    const uint8_t REMOTE_SIG1[] = {
        01
    };
    const uint8_t REMOTE_SIG2[] = {
        01
    };
    const uint8_t REMOTE_SIG3[] = {
        01
    };
    const uint8_t REMOTE_SIG4[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xfc, 0xb3, 0x85,
        0x06, 0xbf, 0xa1, 0x1c, 0x02, 0x87, 0x40, 0x92,
        0xa8, 0x43, 0xd0, 0xcc, 0x0a, 0x86, 0x13, 0xc2,
        0x3b, 0x63, 0x98, 0x32, 0x56, 0x4a, 0x5f, 0x69,
        0x02, 0x0c, 0xb0, 0xf6, 0xba, 0x02, 0x20, 0x65,
        0x08, 0xb9, 0xe9, 0x1e, 0xaa, 0x00, 0x14, 0x25,
        0xc1, 0x90, 0xc6, 0x8e, 0xe5, 0xf8, 0x87, 0xe1,
        0xad, 0x5b, 0x1b, 0x31, 0x40, 0x02, 0xe7, 0x4d,
        0xb9, 0xdb, 0xd9, 0xe4, 0x2d, 0xbe, 0xcf, 0x01,
    };
    const struct {
        const uint8_t *sig;
        size_t len;
    } REMOTE_SIGS[] = {
        { REMOTE_SIG0, sizeof(REMOTE_SIG0) },
        { REMOTE_SIG1, sizeof(REMOTE_SIG1) },
        { REMOTE_SIG2, sizeof(REMOTE_SIG2) },
        { REMOTE_SIG3, sizeof(REMOTE_SIG3) },
        { REMOTE_SIG4, sizeof(REMOTE_SIG4) },
    };

    const uint8_t HS0[] = {
        0x00,
    };
    const uint8_t HS1[] = {

    };
    const uint8_t HS2[] = {

    };
    const uint8_t HS3[] = {

    };
    const uint8_t HS4[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x10,
        0xa3, 0xfd, 0xcb, 0xcd, 0x5d, 0xb4, 0x77, 0xcd,
        0x3a, 0xd4, 0x65, 0xe7, 0xf5, 0x01, 0xff, 0xa8,
        0xc4, 0x37, 0xe8, 0x30, 0x1f, 0x00, 0xa6, 0x06,
        0x11, 0x38, 0x59, 0x0a, 0xdd, 0x75, 0x7f, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x22, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0x05, 0x00, 0x48, 0x30,
        0x45, 0x02, 0x21, 0x00, 0xfc, 0xb3, 0x85, 0x06,
        0xbf, 0xa1, 0x1c, 0x02, 0x87, 0x40, 0x92, 0xa8,
        0x43, 0xd0, 0xcc, 0x0a, 0x86, 0x13, 0xc2, 0x3b,
        0x63, 0x98, 0x32, 0x56, 0x4a, 0x5f, 0x69, 0x02,
        0x0c, 0xb0, 0xf6, 0xba, 0x02, 0x20, 0x65, 0x08,
        0xb9, 0xe9, 0x1e, 0xaa, 0x00, 0x14, 0x25, 0xc1,
        0x90, 0xc6, 0x8e, 0xe5, 0xf8, 0x87, 0xe1, 0xad,
        0x5b, 0x1b, 0x31, 0x40, 0x02, 0xe7, 0x4d, 0xb9,
        0xdb, 0xd9, 0xe4, 0x2d, 0xbe, 0xcf, 0x01, 0x48,
        0x30, 0x45, 0x02, 0x21, 0x00, 0x86, 0xe7, 0x6b,
        0x46, 0x0d, 0xdd, 0x3c, 0xea, 0x10, 0x52, 0x5f,
        0xba, 0x29, 0x84, 0x05, 0xd3, 0xfe, 0x11, 0x38,
        0x3e, 0x56, 0x96, 0x6a, 0x50, 0x91, 0x81, 0x13,
        0x68, 0x36, 0x2f, 0x68, 0x9a, 0x02, 0x20, 0x0f,
        0x72, 0xee, 0x75, 0x65, 0x79, 0x15, 0xe0, 0xed,
        0xe8, 0x9c, 0x28, 0x70, 0x9a, 0xcd, 0x11, 0x3e,
        0xde, 0x9e, 0x1b, 0x7b, 0xe5, 0x20, 0xe3, 0xbc,
        0x5c, 0xda, 0x42, 0x5e, 0xcd, 0x6e, 0x68, 0x01,
        0x20, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x8a, 0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f,
        0x72, 0x54, 0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98,
        0x6c, 0x27, 0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7,
        0xb5, 0x87, 0x63, 0xac, 0x67, 0x21, 0x03, 0x94,
        0x85, 0x4a, 0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12,
        0x2c, 0xc7, 0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a,
        0x21, 0x84, 0xd8, 0x82, 0x56, 0x81, 0x68, 0x26,
        0xd6, 0x23, 0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c,
        0x82, 0x01, 0x20, 0x87, 0x63, 0xa9, 0x14, 0x18,
        0xbc, 0x1a, 0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d,
        0x3d, 0x23, 0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12,
        0x27, 0x43, 0x42, 0x88, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1,
        0x75, 0xac, 0x68, 0x68, 0x00, 0x00, 0x00, 0x00,
    };
    const struct {
        const uint8_t *tx;
        size_t len;
    } HTLC_TX[] = {
        { HS0, sizeof(HS0) },
        { HS1, sizeof(HS1) },
        { HS2, sizeof(HS2) },
        { HS3, sizeof(HS3) },
        { HS4, sizeof(HS4) },
    };
    ///////////////////////////////////////////////////////////


    bool ret;
    int index;


    //各HTLCのsuccess transaction作成
    ptarm_tx_t tx2;

    ptarm_buf_t ws_buf;
    ln_create_script_success(&ws_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);

    //どのHTLCxがVOUTにいるか(ない場合は-1)
    //どのVOUTがどのHTLCなのかは、どうやって見つけるべきなのだろう？
    //                    HTLC0     HTLC1       HTLC2       HTLC3       HTLC4
    const int VOUTS[] = { -1,       -1,         -1,         -1,         0     };

    ptarm_buf_t local_sig = PTARM_BUF_INIT;
    for (int lp = 0; lp < 5; lp++) {
        uint64_t fee = (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? feeinfo.htlc_timeout : feeinfo.htlc_success;
        index = VOUTS[lp];
        if ((index >= 0) && (tx.vout[index].value >= feeinfo.dust_limit_satoshi + fee)) {
            ptarm_tx_init(&tx2);
            ln_create_htlc_tx(&tx2, tx.vout[index].value - fee, &ws_buf, htlcinfos[lp].type, htlcinfos[lp].expiry, txid_commit, index);

            const ptarm_buf_t remote_sig = { (uint8_t *)REMOTE_SIGS[lp].sig, (uint16_t)REMOTE_SIGS[lp].len };
//            printf("[%d]%s\n", lp, (htlcinfos[lp].type == LN_HTLCTYPE_OFFERED) ? "offered" : "received");
            ret = ln_sign_htlc_tx(&tx2,
                        &local_sig,
                        tx.vout[index].value,
                        &keys_local_commit,
                        &remote_sig,
                        PREIMAGES[lp],
                        &htlcinfos[lp].script,
                        HTLCSIGN_TO_SUCCESS);
            ASSERT_TRUE(ret);
            ptarm_buf_t hs;
            ptarm_tx_create(&hs, &tx2);
            //ptarm_print_tx(&tx2);
            //ptarm_print_rawtx(HTLC_TX[lp].tx, HTLC_TX[lp].len);
            ASSERT_EQ(0, memcmp(HTLC_TX[lp].tx, hs.buf, HTLC_TX[lp].len));
            ASSERT_EQ(HTLC_TX[lp].len, hs.len);
            ptarm_buf_free(&local_sig);
            ptarm_buf_free(&hs);
            ptarm_tx_free(&tx2);
        }
    }

    for (int lp = 0; lp < 5; lp++) {
        ptarm_buf_free((ptarm_buf_t *)&htlcinfos[lp].script);
    }
    ptarm_buf_free(&ws_buf);
    ptarm_tx_free(&tx2);

    ptarm_tx_free(&tx);
}


// name: commitment tx with 2 outputs untrimmed (minimum feerate)
//      Commitment Transaction
TEST_F(ln_bolt3_c, committx2min_commit)
{
    ptarm_tx_init(&tx);

    bool ret;

    //amounts
    const uint64_t MSAT_LOCAL = 6988000000LL;
    const uint64_t MSAT_REMOTE = 3000000000LL;


    feeinfo.feerate_per_kw = 4915;
    uint64_t fee_act = ln_fee_calc(&feeinfo, (const ln_htlcinfo_t **)pp_htlcinfos, 5);

//    printf("base fee_committx=%llu\n", (unsigned long long)feeinfo.commit);
//    printf("actual fee_committx=%llu\n", (unsigned long long)fee_act);
//    printf("fee success=%d\n", (int)feeinfo.htlc_success);
//    printf("fee timeout=%d\n", (int)feeinfo.htlc_timeout);
    ASSERT_EQ(3455, feeinfo.htlc_success);
    ASSERT_EQ(3258, feeinfo.htlc_timeout);
    ASSERT_EQ(3558, feeinfo.commit);
    ASSERT_EQ(15558, fee_act);


    ///////////////////////////////////////
    const uint8_t WS_HTLC0[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0xb8, 0xbc, 0xb0,
        0x7f, 0x63, 0x44, 0xb4, 0x2a, 0xb0, 0x42, 0x50,
        0xc8, 0x6a, 0x6e, 0x8b, 0x75, 0xd3, 0xfd, 0xbb,
        0xc6, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf4, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC1[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b, 0x2e,
        0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb, 0x7b,
        0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc, 0xe2,
        0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC2[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e, 0x1b,
        0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c, 0xd9,
        0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9, 0xb5,
        0xd1, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC3[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48, 0x6f,
        0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39, 0xe2,
        0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0, 0x9d,
        0x5b, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC4[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc, 0x1a,
        0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d, 0x23,
        0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27, 0x43,
        0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };

    ///////////////////////////////////////

    const struct {
        const uint8_t *ws;
        size_t len;
    } SCRIPTS[] = {
        { WS_HTLC0, sizeof(WS_HTLC0) },
        { WS_HTLC1, sizeof(WS_HTLC1) },
        { WS_HTLC2, sizeof(WS_HTLC2) },
        { WS_HTLC3, sizeof(WS_HTLC3) },
        { WS_HTLC4, sizeof(WS_HTLC4) }
    };

    for (int lp = 0; lp < 5; lp++) {
        ln_create_htlcinfo(&pp_htlcinfos[lp]->script, pp_htlcinfos[lp]->type, LOCAL_KEY, LOCAL_REVO_KEY, REMOTE_KEY, pp_htlcinfos[lp]->preimage_hash, pp_htlcinfos[lp]->expiry);

        ASSERT_EQ(0, memcmp(SCRIPTS[lp].ws, htlcinfos[lp].script.buf, SCRIPTS[lp].len));
        ASSERT_EQ(SCRIPTS[lp].len, htlcinfos[lp].script.len);
    }


    //to-local wscript
    ptarm_buf_t ws_local_buf;

    ln_create_script_local(&ws_local_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);
//    dumpbin(ws_local_buf.buf, ws_local_buf.len);
//    printf("-[to-local]---------------------\n");
//    ptarm_print_script(ws_local_buf.buf, ws_local_buf.len);
//    printf("----------------------: %d\n", ws_local_buf.len);
    const uint8_t TO_LOCAL_WSCRIPT[] = {
        0x63, 0x21, 0x02, 0x12, 0xa1, 0x40, 0xcd, 0x0c,
        0x65, 0x39, 0xd0, 0x7c, 0xd0, 0x8d, 0xfe, 0x09,
        0x98, 0x4d, 0xec, 0x32, 0x51, 0xea, 0x80, 0x8b,
        0x89, 0x2e, 0xfe, 0xac, 0x3e, 0xde, 0x94, 0x02,
        0xbf, 0x2b, 0x19, 0x67, 0x02, 0x90, 0x00, 0xb2,
        0x75, 0x21, 0x03, 0xfd, 0x59, 0x60, 0x52, 0x8d,
        0xc1, 0x52, 0x01, 0x49, 0x52, 0xef, 0xdb, 0x70,
        0x2a, 0x88, 0xf7, 0x1e, 0x3c, 0x16, 0x53, 0xb2,
        0x31, 0x44, 0x31, 0x70, 0x1e, 0xc7, 0x7e, 0x57,
        0xfd, 0xe8, 0x3c, 0x68, 0xac,
    };
    ASSERT_EQ(0, memcmp(TO_LOCAL_WSCRIPT, ws_local_buf.buf, sizeof(TO_LOCAL_WSCRIPT)));
    ASSERT_EQ(sizeof(TO_LOCAL_WSCRIPT), ws_local_buf.len);


    //tx

    ln_tx_cmt_t lntx_commit;
    lntx_commit.fund.txid = TXID_FUND;
    lntx_commit.fund.txid_index = TXID_FUND_INDEX;
    lntx_commit.fund.satoshi = PTARM_MBTC2SATOSHI(100);
    lntx_commit.fund.p_script = &funding2of2;
    lntx_commit.local.satoshi = LN_MSAT2SATOSHI(MSAT_LOCAL);
    lntx_commit.local.p_script = &ws_local_buf;
    lntx_commit.remote.satoshi = LN_MSAT2SATOSHI(MSAT_REMOTE);
    lntx_commit.remote.pubkey = REMOTE_KEY;
    lntx_commit.obscured = obscured;
    lntx_commit.p_feeinfo = &feeinfo;
    lntx_commit.pp_htlcinfo = pp_htlcinfos;
    lntx_commit.htlcinfo_num = 5;
    ptarm_buf_t buf_sig_local;

    ret = ln_create_commit_tx(&tx, &buf_sig_local, &lntx_commit, true, &priv_data);
    ASSERT_TRUE(ret);


    const uint8_t LOCAL_SIGNATURE[] = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xa0, 0x12, 0x69,
        0x1b, 0xa6, 0xce, 0xa2, 0xf7, 0x3f, 0xa8, 0xba,
        0xc3, 0x77, 0x50, 0x47, 0x7e, 0x66, 0x36, 0x3c,
        0x6d, 0x28, 0x81, 0x3b, 0x0b, 0xb6, 0xda, 0x77,
        0xc8, 0xeb, 0x3f, 0xb0, 0x27, 0x02, 0x20, 0x36,
        0x5e, 0x99, 0xc5, 0x13, 0x04, 0xb0, 0xb1, 0xa6,
        0xab, 0x9e, 0xa1, 0xc8, 0x50, 0x0d, 0xb1, 0x86,
        0x69, 0x3e, 0x39, 0xec, 0x1a, 0xd5, 0x74, 0x3e,
        0xe2, 0x31, 0xb0, 0x13, 0x83, 0x84, 0xb9, 0x01,
    };
    ASSERT_EQ(0, memcmp(LOCAL_SIGNATURE, buf_sig_local.buf, sizeof(LOCAL_SIGNATURE)));
    ASSERT_EQ(sizeof(LOCAL_SIGNATURE), buf_sig_local.len);

    const uint8_t REMOTE_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x07, 0x69, 0xba, 0x89,
        0xc7, 0x33, 0x0d, 0xfa, 0x4f, 0xeb, 0xa4, 0x47,
        0xb6, 0xe3, 0x22, 0x30, 0x5f, 0x12, 0xac, 0x7d,
        0xac, 0x70, 0xec, 0x6b, 0xa9, 0x97, 0xed, 0x7c,
        0x1b, 0x59, 0x8d, 0x08, 0x02, 0x20, 0x4f, 0xe8,
        0xd3, 0x37, 0xe7, 0xfe, 0xe7, 0x81, 0xf9, 0xb7,
        0xb1, 0xa0, 0x6e, 0x58, 0x0b, 0x22, 0xf4, 0xf7,
        0x9d, 0x74, 0x00, 0x59, 0x56, 0x01, 0x91, 0xd7,
        0xdb, 0x53, 0xf8, 0x76, 0x55, 0x52, 0x01,
    };
    ptarm_buf_t buf_sig_remote;
    ptarm_buf_alloccopy(&buf_sig_remote, REMOTE_SIGNATURE, sizeof(REMOTE_SIGNATURE));
    ret = set_vin_p2wsh_2of2(&tx, 0, key_fund_sort,
                &buf_sig_local,
                &buf_sig_remote,
                &funding2of2);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&buf_sig_local);
    ptarm_buf_free(&buf_sig_remote);

    //ptarm_print_tx(&tx);

    //TestVectorとのチェック
    const uint8_t COMMIT_TX[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xbe,
        0xf6, 0x7e, 0x4e, 0x2f, 0xb9, 0xdd, 0xee, 0xb3,
        0x46, 0x19, 0x73, 0xcd, 0x4c, 0x62, 0xab, 0xb3,
        0x50, 0x50, 0xb1, 0xad, 0xd7, 0x72, 0x99, 0x5b,
        0x82, 0x0b, 0x58, 0x4a, 0x48, 0x84, 0x89, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x38, 0xb0, 0x2b, 0x80,
        0x02, 0xc0, 0xc6, 0x2d, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x16, 0x00, 0x14, 0xcc, 0xf1, 0xaf, 0x2f,
        0x2a, 0xab, 0xee, 0x14, 0xbb, 0x40, 0xfa, 0x38,
        0x51, 0xab, 0x23, 0x01, 0xde, 0x84, 0x31, 0x10,
        0xfa, 0x92, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f, 0x00,
        0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d, 0x4e,
        0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1, 0x1a,
        0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d, 0x6b,
        0x7d, 0xd8, 0x0e, 0x04, 0x00, 0x48, 0x30, 0x45,
        0x02, 0x21, 0x00, 0xa0, 0x12, 0x69, 0x1b, 0xa6,
        0xce, 0xa2, 0xf7, 0x3f, 0xa8, 0xba, 0xc3, 0x77,
        0x50, 0x47, 0x7e, 0x66, 0x36, 0x3c, 0x6d, 0x28,
        0x81, 0x3b, 0x0b, 0xb6, 0xda, 0x77, 0xc8, 0xeb,
        0x3f, 0xb0, 0x27, 0x02, 0x20, 0x36, 0x5e, 0x99,
        0xc5, 0x13, 0x04, 0xb0, 0xb1, 0xa6, 0xab, 0x9e,
        0xa1, 0xc8, 0x50, 0x0d, 0xb1, 0x86, 0x69, 0x3e,
        0x39, 0xec, 0x1a, 0xd5, 0x74, 0x3e, 0xe2, 0x31,
        0xb0, 0x13, 0x83, 0x84, 0xb9, 0x01, 0x47, 0x30,
        0x44, 0x02, 0x20, 0x07, 0x69, 0xba, 0x89, 0xc7,
        0x33, 0x0d, 0xfa, 0x4f, 0xeb, 0xa4, 0x47, 0xb6,
        0xe3, 0x22, 0x30, 0x5f, 0x12, 0xac, 0x7d, 0xac,
        0x70, 0xec, 0x6b, 0xa9, 0x97, 0xed, 0x7c, 0x1b,
        0x59, 0x8d, 0x08, 0x02, 0x20, 0x4f, 0xe8, 0xd3,
        0x37, 0xe7, 0xfe, 0xe7, 0x81, 0xf9, 0xb7, 0xb1,
        0xa0, 0x6e, 0x58, 0x0b, 0x22, 0xf4, 0xf7, 0x9d,
        0x74, 0x00, 0x59, 0x56, 0x01, 0x91, 0xd7, 0xdb,
        0x53, 0xf8, 0x76, 0x55, 0x52, 0x01, 0x47, 0x52,
        0x21, 0x02, 0x3d, 0xa0, 0x92, 0xf6, 0x98, 0x0e,
        0x58, 0xd2, 0xc0, 0x37, 0x17, 0x31, 0x80, 0xe9,
        0xa4, 0x65, 0x47, 0x60, 0x26, 0xee, 0x50, 0xf9,
        0x66, 0x95, 0x96, 0x3e, 0x8e, 0xfe, 0x43, 0x6f,
        0x54, 0xeb, 0x21, 0x03, 0x0e, 0x9f, 0x7b, 0x62,
        0x3d, 0x2c, 0xcc, 0x7c, 0x9b, 0xd4, 0x4d, 0x66,
        0xd5, 0xce, 0x21, 0xce, 0x50, 0x4c, 0x0a, 0xcf,
        0x63, 0x85, 0xa1, 0x32, 0xce, 0xc6, 0xd3, 0xc3,
        0x9f, 0xa7, 0x11, 0xc1, 0x52, 0xae, 0x3e, 0x19,
        0x52, 0x20,
    };
    //ptarm_print_rawtx(COMMIT_TX, sizeof(COMMIT_TX));
    ptarm_buf_t tx_buf;

    ptarm_tx_create(&tx_buf, &tx);
    ASSERT_EQ(0, memcmp(COMMIT_TX, tx_buf.buf, sizeof(COMMIT_TX)));
    ASSERT_EQ(sizeof(COMMIT_TX), tx_buf.len);
    ret = ptarm_tx_txid(txid_commit, &tx);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&tx_buf);

    ptarm_buf_free(&ws_local_buf);


    for (int lp = 0; lp < 5; lp++) {
        ptarm_buf_free((ptarm_buf_t *)&htlcinfos[lp].script);
    }
    ptarm_tx_free(&tx);
}


// name: commitment tx with 2 outputs untrimmed (maximum feerate)
//      Commitment Transaction
TEST_F(ln_bolt3_c, committx2max_commit)
{
    ptarm_tx_init(&tx);

    bool ret;

    //amounts
    const uint64_t MSAT_LOCAL = 6988000000LL;
    const uint64_t MSAT_REMOTE = 3000000000LL;


    feeinfo.feerate_per_kw = 9651180;
    uint64_t fee_act = ln_fee_calc(&feeinfo, (const ln_htlcinfo_t **)pp_htlcinfos, 5);

//    printf("base fee_committx=%llu\n", (unsigned long long)feeinfo.commit);
//    printf("actual fee_committx=%llu\n", (unsigned long long)fee_act);
//    printf("fee success=%d\n", (int)feeinfo.htlc_success);
//    printf("fee timeout=%d\n", (int)feeinfo.htlc_timeout);
    ASSERT_EQ(6784779, feeinfo.htlc_success);
    ASSERT_EQ(6398732, feeinfo.htlc_timeout);
    ASSERT_EQ(6987454, feeinfo.commit);
    ASSERT_EQ(6999454, fee_act);


    ///////////////////////////////////////
    const uint8_t WS_HTLC0[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0xb8, 0xbc, 0xb0,
        0x7f, 0x63, 0x44, 0xb4, 0x2a, 0xb0, 0x42, 0x50,
        0xc8, 0x6a, 0x6e, 0x8b, 0x75, 0xd3, 0xfd, 0xbb,
        0xc6, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf4, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC1[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b, 0x2e,
        0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb, 0x7b,
        0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc, 0xe2,
        0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC2[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e, 0x1b,
        0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c, 0xd9,
        0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9, 0xb5,
        0xd1, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC3[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48, 0x6f,
        0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39, 0xe2,
        0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0, 0x9d,
        0x5b, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC4[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc, 0x1a,
        0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d, 0x23,
        0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27, 0x43,
        0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };

    ///////////////////////////////////////

    const struct {
        const uint8_t *ws;
        size_t len;
    } SCRIPTS[] = {
        { WS_HTLC0, sizeof(WS_HTLC0) },
        { WS_HTLC1, sizeof(WS_HTLC1) },
        { WS_HTLC2, sizeof(WS_HTLC2) },
        { WS_HTLC3, sizeof(WS_HTLC3) },
        { WS_HTLC4, sizeof(WS_HTLC4) }
    };

    for (int lp = 0; lp < 5; lp++) {
        ln_create_htlcinfo(&pp_htlcinfos[lp]->script, pp_htlcinfos[lp]->type, LOCAL_KEY, LOCAL_REVO_KEY, REMOTE_KEY, pp_htlcinfos[lp]->preimage_hash, pp_htlcinfos[lp]->expiry);

        ASSERT_EQ(0, memcmp(SCRIPTS[lp].ws, htlcinfos[lp].script.buf, SCRIPTS[lp].len));
        ASSERT_EQ(SCRIPTS[lp].len, htlcinfos[lp].script.len);
    }


    //to-local wscript
    ptarm_buf_t ws_local_buf;

    ln_create_script_local(&ws_local_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);
//    dumpbin(ws_local_buf.buf, ws_local_buf.len);
//    printf("-[to-local]---------------------\n");
//    ptarm_print_script(ws_local_buf.buf, ws_local_buf.len);
//    printf("----------------------: %d\n", ws_local_buf.len);
    const uint8_t TO_LOCAL_WSCRIPT[] = {
        0x63, 0x21, 0x02, 0x12, 0xa1, 0x40, 0xcd, 0x0c,
        0x65, 0x39, 0xd0, 0x7c, 0xd0, 0x8d, 0xfe, 0x09,
        0x98, 0x4d, 0xec, 0x32, 0x51, 0xea, 0x80, 0x8b,
        0x89, 0x2e, 0xfe, 0xac, 0x3e, 0xde, 0x94, 0x02,
        0xbf, 0x2b, 0x19, 0x67, 0x02, 0x90, 0x00, 0xb2,
        0x75, 0x21, 0x03, 0xfd, 0x59, 0x60, 0x52, 0x8d,
        0xc1, 0x52, 0x01, 0x49, 0x52, 0xef, 0xdb, 0x70,
        0x2a, 0x88, 0xf7, 0x1e, 0x3c, 0x16, 0x53, 0xb2,
        0x31, 0x44, 0x31, 0x70, 0x1e, 0xc7, 0x7e, 0x57,
        0xfd, 0xe8, 0x3c, 0x68, 0xac,
    };
    ASSERT_EQ(0, memcmp(TO_LOCAL_WSCRIPT, ws_local_buf.buf, sizeof(TO_LOCAL_WSCRIPT)));
    ASSERT_EQ(sizeof(TO_LOCAL_WSCRIPT), ws_local_buf.len);


    //tx

    ln_tx_cmt_t lntx_commit;
    lntx_commit.fund.txid = TXID_FUND;
    lntx_commit.fund.txid_index = TXID_FUND_INDEX;
    lntx_commit.fund.satoshi = PTARM_MBTC2SATOSHI(100);
    lntx_commit.fund.p_script = &funding2of2;
    lntx_commit.local.satoshi = LN_MSAT2SATOSHI(MSAT_LOCAL);
    lntx_commit.local.p_script = &ws_local_buf;
    lntx_commit.remote.satoshi = LN_MSAT2SATOSHI(MSAT_REMOTE);
    lntx_commit.remote.pubkey = REMOTE_KEY;
    lntx_commit.obscured = obscured;
    lntx_commit.p_feeinfo = &feeinfo;
    lntx_commit.pp_htlcinfo = pp_htlcinfos;
    lntx_commit.htlcinfo_num = 5;
    ptarm_buf_t buf_sig_local;

    ret = ln_create_commit_tx(&tx, &buf_sig_local, &lntx_commit, true, &priv_data);
    ASSERT_TRUE(ret);


    const uint8_t LOCAL_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x51, 0x4f, 0x97, 0x7b,
        0xf7, 0xed, 0xc4, 0x42, 0xde, 0x8c, 0xe4, 0x3a,
        0xce, 0x96, 0x86, 0xe5, 0xeb, 0xdc, 0x0f, 0x89,
        0x30, 0x33, 0xf1, 0x3e, 0x40, 0xfb, 0x46, 0xc8,
        0xb8, 0xc6, 0xe1, 0xf9, 0x02, 0x20, 0x18, 0x80,
        0x06, 0x22, 0x7d, 0x17, 0x5f, 0x5c, 0x35, 0xda,
        0x0b, 0x09, 0x2c, 0x57, 0xbe, 0xa8, 0x25, 0x37,
        0xae, 0xd8, 0x9f, 0x77, 0x78, 0x20, 0x4d, 0xc5,
        0xba, 0xcf, 0x4f, 0x29, 0xf2, 0xb9, 0x01,
    };
    ASSERT_EQ(0, memcmp(LOCAL_SIGNATURE, buf_sig_local.buf, sizeof(LOCAL_SIGNATURE)));
    ASSERT_EQ(sizeof(LOCAL_SIGNATURE), buf_sig_local.len);

    const uint8_t REMOTE_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x37, 0xf8, 0x3f, 0xf0,
        0x0c, 0x8e, 0x5f, 0xb1, 0x8a, 0xe1, 0xf9, 0x18,
        0xff, 0xc2, 0x4e, 0x54, 0x58, 0x17, 0x75, 0xa2,
        0x0f, 0xf1, 0xae, 0x71, 0x92, 0x97, 0xef, 0x06,
        0x6c, 0x71, 0xca, 0xa9, 0x02, 0x20, 0x39, 0xc5,
        0x29, 0xcc, 0xcd, 0x89, 0xff, 0x6c, 0x5e, 0xd1,
        0xdb, 0x79, 0x96, 0x14, 0x53, 0x38, 0x44, 0xbd,
        0x6d, 0x10, 0x1d, 0xa5, 0x03, 0x76, 0x1c, 0x45,
        0xc7, 0x13, 0x99, 0x6e, 0x3b, 0xbd, 0x01,
    };
    ptarm_buf_t buf_sig_remote;
    ptarm_buf_alloccopy(&buf_sig_remote, REMOTE_SIGNATURE, sizeof(REMOTE_SIGNATURE));
    ret = set_vin_p2wsh_2of2(&tx, 0, key_fund_sort,
                &buf_sig_local,
                &buf_sig_remote,
                &funding2of2);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&buf_sig_local);
    ptarm_buf_free(&buf_sig_remote);

    //ptarm_print_tx(&tx);

    //TestVectorとのチェック
    const uint8_t COMMIT_TX[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xbe,
        0xf6, 0x7e, 0x4e, 0x2f, 0xb9, 0xdd, 0xee, 0xb3,
        0x46, 0x19, 0x73, 0xcd, 0x4c, 0x62, 0xab, 0xb3,
        0x50, 0x50, 0xb1, 0xad, 0xd7, 0x72, 0x99, 0x5b,
        0x82, 0x0b, 0x58, 0x4a, 0x48, 0x84, 0x89, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x38, 0xb0, 0x2b, 0x80,
        0x02, 0x22, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x00, 0x20, 0x4a, 0xdb, 0x4e, 0x2f,
        0x00, 0x64, 0x3d, 0xb3, 0x96, 0xdd, 0x12, 0x0d,
        0x4e, 0x7d, 0xc1, 0x76, 0x25, 0xf5, 0xf2, 0xc1,
        0x1a, 0x40, 0xd8, 0x57, 0xac, 0xcc, 0x86, 0x2d,
        0x6b, 0x7d, 0xd8, 0x0e, 0xc0, 0xc6, 0x2d, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x14, 0xcc,
        0xf1, 0xaf, 0x2f, 0x2a, 0xab, 0xee, 0x14, 0xbb,
        0x40, 0xfa, 0x38, 0x51, 0xab, 0x23, 0x01, 0xde,
        0x84, 0x31, 0x10, 0x04, 0x00, 0x47, 0x30, 0x44,
        0x02, 0x20, 0x51, 0x4f, 0x97, 0x7b, 0xf7, 0xed,
        0xc4, 0x42, 0xde, 0x8c, 0xe4, 0x3a, 0xce, 0x96,
        0x86, 0xe5, 0xeb, 0xdc, 0x0f, 0x89, 0x30, 0x33,
        0xf1, 0x3e, 0x40, 0xfb, 0x46, 0xc8, 0xb8, 0xc6,
        0xe1, 0xf9, 0x02, 0x20, 0x18, 0x80, 0x06, 0x22,
        0x7d, 0x17, 0x5f, 0x5c, 0x35, 0xda, 0x0b, 0x09,
        0x2c, 0x57, 0xbe, 0xa8, 0x25, 0x37, 0xae, 0xd8,
        0x9f, 0x77, 0x78, 0x20, 0x4d, 0xc5, 0xba, 0xcf,
        0x4f, 0x29, 0xf2, 0xb9, 0x01, 0x47, 0x30, 0x44,
        0x02, 0x20, 0x37, 0xf8, 0x3f, 0xf0, 0x0c, 0x8e,
        0x5f, 0xb1, 0x8a, 0xe1, 0xf9, 0x18, 0xff, 0xc2,
        0x4e, 0x54, 0x58, 0x17, 0x75, 0xa2, 0x0f, 0xf1,
        0xae, 0x71, 0x92, 0x97, 0xef, 0x06, 0x6c, 0x71,
        0xca, 0xa9, 0x02, 0x20, 0x39, 0xc5, 0x29, 0xcc,
        0xcd, 0x89, 0xff, 0x6c, 0x5e, 0xd1, 0xdb, 0x79,
        0x96, 0x14, 0x53, 0x38, 0x44, 0xbd, 0x6d, 0x10,
        0x1d, 0xa5, 0x03, 0x76, 0x1c, 0x45, 0xc7, 0x13,
        0x99, 0x6e, 0x3b, 0xbd, 0x01, 0x47, 0x52, 0x21,
        0x02, 0x3d, 0xa0, 0x92, 0xf6, 0x98, 0x0e, 0x58,
        0xd2, 0xc0, 0x37, 0x17, 0x31, 0x80, 0xe9, 0xa4,
        0x65, 0x47, 0x60, 0x26, 0xee, 0x50, 0xf9, 0x66,
        0x95, 0x96, 0x3e, 0x8e, 0xfe, 0x43, 0x6f, 0x54,
        0xeb, 0x21, 0x03, 0x0e, 0x9f, 0x7b, 0x62, 0x3d,
        0x2c, 0xcc, 0x7c, 0x9b, 0xd4, 0x4d, 0x66, 0xd5,
        0xce, 0x21, 0xce, 0x50, 0x4c, 0x0a, 0xcf, 0x63,
        0x85, 0xa1, 0x32, 0xce, 0xc6, 0xd3, 0xc3, 0x9f,
        0xa7, 0x11, 0xc1, 0x52, 0xae, 0x3e, 0x19, 0x52,
        0x20,
    };
    //ptarm_print_rawtx(COMMIT_TX, sizeof(COMMIT_TX));
    ptarm_buf_t tx_buf;

    ptarm_tx_create(&tx_buf, &tx);
    ASSERT_EQ(0, memcmp(COMMIT_TX, tx_buf.buf, sizeof(COMMIT_TX)));
    ASSERT_EQ(sizeof(COMMIT_TX), tx_buf.len);
    ret = ptarm_tx_txid(txid_commit, &tx);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&tx_buf);

    ptarm_buf_free(&ws_local_buf);


    for (int lp = 0; lp < 5; lp++) {
        ptarm_buf_free((ptarm_buf_t *)&htlcinfos[lp].script);
    }
    ptarm_tx_free(&tx);
}


// name: commitment tx with 1 output untrimmed (minimum feerate)
//      Commitment Transaction
TEST_F(ln_bolt3_c, committx1min_commit)
{
    ptarm_tx_init(&tx);

    bool ret;

    //amounts
    const uint64_t MSAT_LOCAL = 6988000000LL;
    const uint64_t MSAT_REMOTE = 3000000000LL;


    feeinfo.feerate_per_kw = 9651181;
    uint64_t fee_act = ln_fee_calc(&feeinfo, (const ln_htlcinfo_t **)pp_htlcinfos, 5);

//    printf("base fee_committx=%llu\n", (unsigned long long)feeinfo.commit);
    printf("actual fee_committx=%llu\n", (unsigned long long)fee_act);
//    printf("fee success=%d\n", (int)feeinfo.htlc_success);
//    printf("fee timeout=%d\n", (int)feeinfo.htlc_timeout);
    ASSERT_EQ(6784780, feeinfo.htlc_success);
    ASSERT_EQ(6398733, feeinfo.htlc_timeout);
    ASSERT_EQ(6987455, feeinfo.commit);
#warning これでよいのか不明(BOLTでは 7000000)
    ASSERT_EQ(6999455, fee_act);


    ///////////////////////////////////////
    const uint8_t WS_HTLC0[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0xb8, 0xbc, 0xb0,
        0x7f, 0x63, 0x44, 0xb4, 0x2a, 0xb0, 0x42, 0x50,
        0xc8, 0x6a, 0x6e, 0x8b, 0x75, 0xd3, 0xfd, 0xbb,
        0xc6, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf4, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC1[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b, 0x2e,
        0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb, 0x7b,
        0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc, 0xe2,
        0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC2[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e, 0x1b,
        0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c, 0xd9,
        0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9, 0xb5,
        0xd1, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC3[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48, 0x6f,
        0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39, 0xe2,
        0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0, 0x9d,
        0x5b, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC4[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc, 0x1a,
        0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d, 0x23,
        0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27, 0x43,
        0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };

    ///////////////////////////////////////

    const struct {
        const uint8_t *ws;
        size_t len;
    } SCRIPTS[] = {
        { WS_HTLC0, sizeof(WS_HTLC0) },
        { WS_HTLC1, sizeof(WS_HTLC1) },
        { WS_HTLC2, sizeof(WS_HTLC2) },
        { WS_HTLC3, sizeof(WS_HTLC3) },
        { WS_HTLC4, sizeof(WS_HTLC4) }
    };

    for (int lp = 0; lp < 5; lp++) {
        ln_create_htlcinfo(&pp_htlcinfos[lp]->script, pp_htlcinfos[lp]->type, LOCAL_KEY, LOCAL_REVO_KEY, REMOTE_KEY, pp_htlcinfos[lp]->preimage_hash, pp_htlcinfos[lp]->expiry);

        ASSERT_EQ(0, memcmp(SCRIPTS[lp].ws, htlcinfos[lp].script.buf, SCRIPTS[lp].len));
        ASSERT_EQ(SCRIPTS[lp].len, htlcinfos[lp].script.len);
    }


    //to-local wscript
    ptarm_buf_t ws_local_buf;

    ln_create_script_local(&ws_local_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);
//    dumpbin(ws_local_buf.buf, ws_local_buf.len);
//    printf("-[to-local]---------------------\n");
//    ptarm_print_script(ws_local_buf.buf, ws_local_buf.len);
//    printf("----------------------: %d\n", ws_local_buf.len);
    const uint8_t TO_LOCAL_WSCRIPT[] = {
        0x63, 0x21, 0x02, 0x12, 0xa1, 0x40, 0xcd, 0x0c,
        0x65, 0x39, 0xd0, 0x7c, 0xd0, 0x8d, 0xfe, 0x09,
        0x98, 0x4d, 0xec, 0x32, 0x51, 0xea, 0x80, 0x8b,
        0x89, 0x2e, 0xfe, 0xac, 0x3e, 0xde, 0x94, 0x02,
        0xbf, 0x2b, 0x19, 0x67, 0x02, 0x90, 0x00, 0xb2,
        0x75, 0x21, 0x03, 0xfd, 0x59, 0x60, 0x52, 0x8d,
        0xc1, 0x52, 0x01, 0x49, 0x52, 0xef, 0xdb, 0x70,
        0x2a, 0x88, 0xf7, 0x1e, 0x3c, 0x16, 0x53, 0xb2,
        0x31, 0x44, 0x31, 0x70, 0x1e, 0xc7, 0x7e, 0x57,
        0xfd, 0xe8, 0x3c, 0x68, 0xac,
    };
    ASSERT_EQ(0, memcmp(TO_LOCAL_WSCRIPT, ws_local_buf.buf, sizeof(TO_LOCAL_WSCRIPT)));
    ASSERT_EQ(sizeof(TO_LOCAL_WSCRIPT), ws_local_buf.len);


    //tx

    ln_tx_cmt_t lntx_commit;
    lntx_commit.fund.txid = TXID_FUND;
    lntx_commit.fund.txid_index = TXID_FUND_INDEX;
    lntx_commit.fund.satoshi = PTARM_MBTC2SATOSHI(100);
    lntx_commit.fund.p_script = &funding2of2;
    lntx_commit.local.satoshi = LN_MSAT2SATOSHI(MSAT_LOCAL);
    lntx_commit.local.p_script = &ws_local_buf;
    lntx_commit.remote.satoshi = LN_MSAT2SATOSHI(MSAT_REMOTE);
    lntx_commit.remote.pubkey = REMOTE_KEY;
    lntx_commit.obscured = obscured;
    lntx_commit.p_feeinfo = &feeinfo;
    lntx_commit.pp_htlcinfo = pp_htlcinfos;
    lntx_commit.htlcinfo_num = 5;
    ptarm_buf_t buf_sig_local;

    ret = ln_create_commit_tx(&tx, &buf_sig_local, &lntx_commit, true, &priv_data);
    ASSERT_TRUE(ret);


    const uint8_t LOCAL_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x31, 0xa8, 0x2b, 0x51,
        0xbd, 0x01, 0x49, 0x15, 0xfe, 0x68, 0x92, 0x8d,
        0x1a, 0xbf, 0x4b, 0x98, 0x85, 0x35, 0x3f, 0xb8,
        0x96, 0xca, 0xc1, 0x0c, 0x3f, 0xdd, 0x88, 0xd7,
        0xf9, 0xc7, 0xf2, 0xe0, 0x02, 0x20, 0x71, 0x6b,
        0xda, 0x81, 0x96, 0x41, 0xd2, 0xc6, 0x3e, 0x65,
        0xd3, 0x54, 0x9b, 0x61, 0x20, 0x11, 0x2e, 0x1a,
        0xea, 0xf1, 0x74, 0x2e, 0xed, 0x94, 0xa4, 0x71,
        0x48, 0x8e, 0x79, 0xe2, 0x06, 0xb1, 0x01,
    };
    ASSERT_EQ(0, memcmp(LOCAL_SIGNATURE, buf_sig_local.buf, sizeof(LOCAL_SIGNATURE)));
    ASSERT_EQ(sizeof(LOCAL_SIGNATURE), buf_sig_local.len);

    const uint8_t REMOTE_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x64, 0x90, 0x19, 0x50,
        0xbe, 0x92, 0x2e, 0x62, 0xcb, 0xe3, 0xf2, 0xab,
        0x93, 0xde, 0x2b, 0x99, 0xf3, 0x7c, 0xff, 0x9f,
        0xc4, 0x73, 0xe7, 0x3e, 0x39, 0x4b, 0x27, 0xf8,
        0x8e, 0xf0, 0x73, 0x1d, 0x02, 0x20, 0x6d, 0x1d,
        0xfa, 0x22, 0x75, 0x27, 0xb4, 0xdf, 0x44, 0xa0,
        0x75, 0x99, 0x28, 0x9e, 0x20, 0x7d, 0x6f, 0xd9,
        0xcc, 0xa6, 0x0c, 0x03, 0x65, 0x68, 0x2d, 0xcd,
        0x3d, 0xea, 0xf7, 0x39, 0x56, 0x7e, 0x01,
    };
    ptarm_buf_t buf_sig_remote;
    ptarm_buf_alloccopy(&buf_sig_remote, REMOTE_SIGNATURE, sizeof(REMOTE_SIGNATURE));
    ret = set_vin_p2wsh_2of2(&tx, 0, key_fund_sort,
                &buf_sig_local,
                &buf_sig_remote,
                &funding2of2);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&buf_sig_local);
    ptarm_buf_free(&buf_sig_remote);

    //ptarm_print_tx(&tx);

    //TestVectorとのチェック
    const uint8_t COMMIT_TX[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xbe,
        0xf6, 0x7e, 0x4e, 0x2f, 0xb9, 0xdd, 0xee, 0xb3,
        0x46, 0x19, 0x73, 0xcd, 0x4c, 0x62, 0xab, 0xb3,
        0x50, 0x50, 0xb1, 0xad, 0xd7, 0x72, 0x99, 0x5b,
        0x82, 0x0b, 0x58, 0x4a, 0x48, 0x84, 0x89, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x38, 0xb0, 0x2b, 0x80,
        0x01, 0xc0, 0xc6, 0x2d, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x16, 0x00, 0x14, 0xcc, 0xf1, 0xaf, 0x2f,
        0x2a, 0xab, 0xee, 0x14, 0xbb, 0x40, 0xfa, 0x38,
        0x51, 0xab, 0x23, 0x01, 0xde, 0x84, 0x31, 0x10,
        0x04, 0x00, 0x47, 0x30, 0x44, 0x02, 0x20, 0x31,
        0xa8, 0x2b, 0x51, 0xbd, 0x01, 0x49, 0x15, 0xfe,
        0x68, 0x92, 0x8d, 0x1a, 0xbf, 0x4b, 0x98, 0x85,
        0x35, 0x3f, 0xb8, 0x96, 0xca, 0xc1, 0x0c, 0x3f,
        0xdd, 0x88, 0xd7, 0xf9, 0xc7, 0xf2, 0xe0, 0x02,
        0x20, 0x71, 0x6b, 0xda, 0x81, 0x96, 0x41, 0xd2,
        0xc6, 0x3e, 0x65, 0xd3, 0x54, 0x9b, 0x61, 0x20,
        0x11, 0x2e, 0x1a, 0xea, 0xf1, 0x74, 0x2e, 0xed,
        0x94, 0xa4, 0x71, 0x48, 0x8e, 0x79, 0xe2, 0x06,
        0xb1, 0x01, 0x47, 0x30, 0x44, 0x02, 0x20, 0x64,
        0x90, 0x19, 0x50, 0xbe, 0x92, 0x2e, 0x62, 0xcb,
        0xe3, 0xf2, 0xab, 0x93, 0xde, 0x2b, 0x99, 0xf3,
        0x7c, 0xff, 0x9f, 0xc4, 0x73, 0xe7, 0x3e, 0x39,
        0x4b, 0x27, 0xf8, 0x8e, 0xf0, 0x73, 0x1d, 0x02,
        0x20, 0x6d, 0x1d, 0xfa, 0x22, 0x75, 0x27, 0xb4,
        0xdf, 0x44, 0xa0, 0x75, 0x99, 0x28, 0x9e, 0x20,
        0x7d, 0x6f, 0xd9, 0xcc, 0xa6, 0x0c, 0x03, 0x65,
        0x68, 0x2d, 0xcd, 0x3d, 0xea, 0xf7, 0x39, 0x56,
        0x7e, 0x01, 0x47, 0x52, 0x21, 0x02, 0x3d, 0xa0,
        0x92, 0xf6, 0x98, 0x0e, 0x58, 0xd2, 0xc0, 0x37,
        0x17, 0x31, 0x80, 0xe9, 0xa4, 0x65, 0x47, 0x60,
        0x26, 0xee, 0x50, 0xf9, 0x66, 0x95, 0x96, 0x3e,
        0x8e, 0xfe, 0x43, 0x6f, 0x54, 0xeb, 0x21, 0x03,
        0x0e, 0x9f, 0x7b, 0x62, 0x3d, 0x2c, 0xcc, 0x7c,
        0x9b, 0xd4, 0x4d, 0x66, 0xd5, 0xce, 0x21, 0xce,
        0x50, 0x4c, 0x0a, 0xcf, 0x63, 0x85, 0xa1, 0x32,
        0xce, 0xc6, 0xd3, 0xc3, 0x9f, 0xa7, 0x11, 0xc1,
        0x52, 0xae, 0x3e, 0x19, 0x52, 0x20,
    };
    //ptarm_print_rawtx(COMMIT_TX, sizeof(COMMIT_TX));
    ptarm_buf_t tx_buf;

    ptarm_tx_create(&tx_buf, &tx);
    ASSERT_EQ(0, memcmp(COMMIT_TX, tx_buf.buf, sizeof(COMMIT_TX)));
    ASSERT_EQ(sizeof(COMMIT_TX), tx_buf.len);
    ret = ptarm_tx_txid(txid_commit, &tx);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&tx_buf);

    ptarm_buf_free(&ws_local_buf);


    for (int lp = 0; lp < 5; lp++) {
        ptarm_buf_free((ptarm_buf_t *)&htlcinfos[lp].script);
    }
    ptarm_tx_free(&tx);
}


// name: commitment tx with fee greater than funder amount
//      Commitment Transaction
TEST_F(ln_bolt3_c, committx_commit)
{
    ptarm_tx_init(&tx);

    bool ret;

    //amounts
    const uint64_t MSAT_LOCAL = 6988000000LL;
    const uint64_t MSAT_REMOTE = 3000000000LL;

    feeinfo.feerate_per_kw = 9651936;
    uint64_t fee_act = ln_fee_calc(&feeinfo, (const ln_htlcinfo_t **)pp_htlcinfos, 5);

//    printf("base fee_committx=%llu\n", (unsigned long long)feeinfo.commit);
    printf("actual fee_committx=%llu\n", (unsigned long long)fee_act);
//    printf("fee success=%d\n", (int)feeinfo.htlc_success);
//    printf("fee timeout=%d\n", (int)feeinfo.htlc_timeout);
    ASSERT_EQ(6785311, feeinfo.htlc_success);
    ASSERT_EQ(6399233, feeinfo.htlc_timeout);
    ASSERT_EQ(6988001, feeinfo.commit);
#warning これでよいのか不明(BOLTでは 7000000)
    ASSERT_EQ(7000001, fee_act);


    ///////////////////////////////////////
    const uint8_t WS_HTLC0[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0xb8, 0xbc, 0xb0,
        0x7f, 0x63, 0x44, 0xb4, 0x2a, 0xb0, 0x42, 0x50,
        0xc8, 0x6a, 0x6e, 0x8b, 0x75, 0xd3, 0xfd, 0xbb,
        0xc6, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf4, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC1[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x4b, 0x6b, 0x2e,
        0x54, 0x44, 0xc2, 0x63, 0x9c, 0xc0, 0xfb, 0x7b,
        0xce, 0xa5, 0xaf, 0xba, 0x3f, 0x3c, 0xdc, 0xe2,
        0x39, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf5, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };
    const uint8_t WS_HTLC2[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0xb4, 0x3e, 0x1b,
        0x38, 0x13, 0x8a, 0x41, 0xb3, 0x7f, 0x7c, 0xd9,
        0xa1, 0xd2, 0x74, 0xbc, 0x63, 0xe3, 0xa9, 0xb5,
        0xd1, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC3[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x64, 0x75, 0x52, 0x7c, 0x21, 0x03,
        0x0d, 0x41, 0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8,
        0x8d, 0x5f, 0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57,
        0x97, 0x65, 0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81,
        0x3e, 0x21, 0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7,
        0x52, 0xae, 0x67, 0xa9, 0x14, 0x8a, 0x48, 0x6f,
        0xf2, 0xe3, 0x1d, 0x61, 0x58, 0xbf, 0x39, 0xe2,
        0x60, 0x88, 0x64, 0xd6, 0x3f, 0xef, 0xd0, 0x9d,
        0x5b, 0x88, 0xac, 0x68, 0x68,
    };
    const uint8_t WS_HTLC4[] = {
        0x76, 0xa9, 0x14, 0x14, 0x01, 0x1f, 0x72, 0x54,
        0xd9, 0x6b, 0x81, 0x9c, 0x76, 0x98, 0x6c, 0x27,
        0x7d, 0x11, 0x5e, 0xfc, 0xe6, 0xf7, 0xb5, 0x87,
        0x63, 0xac, 0x67, 0x21, 0x03, 0x94, 0x85, 0x4a,
        0xa6, 0xea, 0xb5, 0xb2, 0xa8, 0x12, 0x2c, 0xc7,
        0x26, 0xe9, 0xdd, 0xed, 0x05, 0x3a, 0x21, 0x84,
        0xd8, 0x82, 0x56, 0x81, 0x68, 0x26, 0xd6, 0x23,
        0x1c, 0x06, 0x8d, 0x4a, 0x5b, 0x7c, 0x82, 0x01,
        0x20, 0x87, 0x63, 0xa9, 0x14, 0x18, 0xbc, 0x1a,
        0x11, 0x4c, 0xcf, 0x9c, 0x05, 0x2d, 0x3d, 0x23,
        0xe2, 0x8d, 0x3b, 0x0a, 0x9d, 0x12, 0x27, 0x43,
        0x42, 0x88, 0x52, 0x7c, 0x21, 0x03, 0x0d, 0x41,
        0x7a, 0x46, 0x94, 0x63, 0x84, 0xf8, 0x8d, 0x5f,
        0x33, 0x37, 0x26, 0x7c, 0x5e, 0x57, 0x97, 0x65,
        0x87, 0x5d, 0xc4, 0xda, 0xca, 0x81, 0x3e, 0x21,
        0x73, 0x4b, 0x14, 0x06, 0x39, 0xe7, 0x52, 0xae,
        0x67, 0x75, 0x02, 0xf8, 0x01, 0xb1, 0x75, 0xac,
        0x68, 0x68,
    };

    ///////////////////////////////////////

    const struct {
        const uint8_t *ws;
        size_t len;
    } SCRIPTS[] = {
        { WS_HTLC0, sizeof(WS_HTLC0) },
        { WS_HTLC1, sizeof(WS_HTLC1) },
        { WS_HTLC2, sizeof(WS_HTLC2) },
        { WS_HTLC3, sizeof(WS_HTLC3) },
        { WS_HTLC4, sizeof(WS_HTLC4) }
    };

    for (int lp = 0; lp < 5; lp++) {
        ln_create_htlcinfo(&pp_htlcinfos[lp]->script, pp_htlcinfos[lp]->type, LOCAL_KEY, LOCAL_REVO_KEY, REMOTE_KEY, pp_htlcinfos[lp]->preimage_hash, pp_htlcinfos[lp]->expiry);

        ASSERT_EQ(0, memcmp(SCRIPTS[lp].ws, htlcinfos[lp].script.buf, SCRIPTS[lp].len));
        ASSERT_EQ(SCRIPTS[lp].len, htlcinfos[lp].script.len);
    }


    //to-local wscript
    ptarm_buf_t ws_local_buf;

    ln_create_script_local(&ws_local_buf, LOCAL_REVO_KEY, LOCAL_DELAYED_KEY, LOCAL_DELAY);
//    dumpbin(ws_local_buf.buf, ws_local_buf.len);
//    printf("-[to-local]---------------------\n");
//    ptarm_print_script(ws_local_buf.buf, ws_local_buf.len);
//    printf("----------------------: %d\n", ws_local_buf.len);
    const uint8_t TO_LOCAL_WSCRIPT[] = {
        0x63, 0x21, 0x02, 0x12, 0xa1, 0x40, 0xcd, 0x0c,
        0x65, 0x39, 0xd0, 0x7c, 0xd0, 0x8d, 0xfe, 0x09,
        0x98, 0x4d, 0xec, 0x32, 0x51, 0xea, 0x80, 0x8b,
        0x89, 0x2e, 0xfe, 0xac, 0x3e, 0xde, 0x94, 0x02,
        0xbf, 0x2b, 0x19, 0x67, 0x02, 0x90, 0x00, 0xb2,
        0x75, 0x21, 0x03, 0xfd, 0x59, 0x60, 0x52, 0x8d,
        0xc1, 0x52, 0x01, 0x49, 0x52, 0xef, 0xdb, 0x70,
        0x2a, 0x88, 0xf7, 0x1e, 0x3c, 0x16, 0x53, 0xb2,
        0x31, 0x44, 0x31, 0x70, 0x1e, 0xc7, 0x7e, 0x57,
        0xfd, 0xe8, 0x3c, 0x68, 0xac,
    };
    ASSERT_EQ(0, memcmp(TO_LOCAL_WSCRIPT, ws_local_buf.buf, sizeof(TO_LOCAL_WSCRIPT)));
    ASSERT_EQ(sizeof(TO_LOCAL_WSCRIPT), ws_local_buf.len);


    //tx

    ln_tx_cmt_t lntx_commit;
    lntx_commit.fund.txid = TXID_FUND;
    lntx_commit.fund.txid_index = TXID_FUND_INDEX;
    lntx_commit.fund.satoshi = PTARM_MBTC2SATOSHI(100);
    lntx_commit.fund.p_script = &funding2of2;
    lntx_commit.local.satoshi = LN_MSAT2SATOSHI(MSAT_LOCAL);
    lntx_commit.local.p_script = &ws_local_buf;
    lntx_commit.remote.satoshi = LN_MSAT2SATOSHI(MSAT_REMOTE);
    lntx_commit.remote.pubkey = REMOTE_KEY;
    lntx_commit.obscured = obscured;
    lntx_commit.p_feeinfo = &feeinfo;
    lntx_commit.pp_htlcinfo = pp_htlcinfos;
    lntx_commit.htlcinfo_num = 5;
    ptarm_buf_t buf_sig_local;

    ret = ln_create_commit_tx(&tx, &buf_sig_local, &lntx_commit, true, &priv_data);
    ASSERT_TRUE(ret);


    const uint8_t LOCAL_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x31, 0xa8, 0x2b, 0x51,
        0xbd, 0x01, 0x49, 0x15, 0xfe, 0x68, 0x92, 0x8d,
        0x1a, 0xbf, 0x4b, 0x98, 0x85, 0x35, 0x3f, 0xb8,
        0x96, 0xca, 0xc1, 0x0c, 0x3f, 0xdd, 0x88, 0xd7,
        0xf9, 0xc7, 0xf2, 0xe0, 0x02, 0x20, 0x71, 0x6b,
        0xda, 0x81, 0x96, 0x41, 0xd2, 0xc6, 0x3e, 0x65,
        0xd3, 0x54, 0x9b, 0x61, 0x20, 0x11, 0x2e, 0x1a,
        0xea, 0xf1, 0x74, 0x2e, 0xed, 0x94, 0xa4, 0x71,
        0x48, 0x8e, 0x79, 0xe2, 0x06, 0xb1, 0x01,
    };
    ASSERT_EQ(0, memcmp(LOCAL_SIGNATURE, buf_sig_local.buf, sizeof(LOCAL_SIGNATURE)));
    ASSERT_EQ(sizeof(LOCAL_SIGNATURE), buf_sig_local.len);

    const uint8_t REMOTE_SIGNATURE[] = {
        0x30, 0x44, 0x02, 0x20, 0x64, 0x90, 0x19, 0x50,
        0xbe, 0x92, 0x2e, 0x62, 0xcb, 0xe3, 0xf2, 0xab,
        0x93, 0xde, 0x2b, 0x99, 0xf3, 0x7c, 0xff, 0x9f,
        0xc4, 0x73, 0xe7, 0x3e, 0x39, 0x4b, 0x27, 0xf8,
        0x8e, 0xf0, 0x73, 0x1d, 0x02, 0x20, 0x6d, 0x1d,
        0xfa, 0x22, 0x75, 0x27, 0xb4, 0xdf, 0x44, 0xa0,
        0x75, 0x99, 0x28, 0x9e, 0x20, 0x7d, 0x6f, 0xd9,
        0xcc, 0xa6, 0x0c, 0x03, 0x65, 0x68, 0x2d, 0xcd,
        0x3d, 0xea, 0xf7, 0x39, 0x56, 0x7e, 0x01,
    };
    ptarm_buf_t buf_sig_remote;
    ptarm_buf_alloccopy(&buf_sig_remote, REMOTE_SIGNATURE, sizeof(REMOTE_SIGNATURE));
    ret = set_vin_p2wsh_2of2(&tx, 0, key_fund_sort,
                &buf_sig_local,
                &buf_sig_remote,
                &funding2of2);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&buf_sig_local);
    ptarm_buf_free(&buf_sig_remote);

    //ptarm_print_tx(&tx);

    //TestVectorとのチェック
    const uint8_t COMMIT_TX[] = {
        0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xbe,
        0xf6, 0x7e, 0x4e, 0x2f, 0xb9, 0xdd, 0xee, 0xb3,
        0x46, 0x19, 0x73, 0xcd, 0x4c, 0x62, 0xab, 0xb3,
        0x50, 0x50, 0xb1, 0xad, 0xd7, 0x72, 0x99, 0x5b,
        0x82, 0x0b, 0x58, 0x4a, 0x48, 0x84, 0x89, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x38, 0xb0, 0x2b, 0x80,
        0x01, 0xc0, 0xc6, 0x2d, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x16, 0x00, 0x14, 0xcc, 0xf1, 0xaf, 0x2f,
        0x2a, 0xab, 0xee, 0x14, 0xbb, 0x40, 0xfa, 0x38,
        0x51, 0xab, 0x23, 0x01, 0xde, 0x84, 0x31, 0x10,
        0x04, 0x00, 0x47, 0x30, 0x44, 0x02, 0x20, 0x31,
        0xa8, 0x2b, 0x51, 0xbd, 0x01, 0x49, 0x15, 0xfe,
        0x68, 0x92, 0x8d, 0x1a, 0xbf, 0x4b, 0x98, 0x85,
        0x35, 0x3f, 0xb8, 0x96, 0xca, 0xc1, 0x0c, 0x3f,
        0xdd, 0x88, 0xd7, 0xf9, 0xc7, 0xf2, 0xe0, 0x02,
        0x20, 0x71, 0x6b, 0xda, 0x81, 0x96, 0x41, 0xd2,
        0xc6, 0x3e, 0x65, 0xd3, 0x54, 0x9b, 0x61, 0x20,
        0x11, 0x2e, 0x1a, 0xea, 0xf1, 0x74, 0x2e, 0xed,
        0x94, 0xa4, 0x71, 0x48, 0x8e, 0x79, 0xe2, 0x06,
        0xb1, 0x01, 0x47, 0x30, 0x44, 0x02, 0x20, 0x64,
        0x90, 0x19, 0x50, 0xbe, 0x92, 0x2e, 0x62, 0xcb,
        0xe3, 0xf2, 0xab, 0x93, 0xde, 0x2b, 0x99, 0xf3,
        0x7c, 0xff, 0x9f, 0xc4, 0x73, 0xe7, 0x3e, 0x39,
        0x4b, 0x27, 0xf8, 0x8e, 0xf0, 0x73, 0x1d, 0x02,
        0x20, 0x6d, 0x1d, 0xfa, 0x22, 0x75, 0x27, 0xb4,
        0xdf, 0x44, 0xa0, 0x75, 0x99, 0x28, 0x9e, 0x20,
        0x7d, 0x6f, 0xd9, 0xcc, 0xa6, 0x0c, 0x03, 0x65,
        0x68, 0x2d, 0xcd, 0x3d, 0xea, 0xf7, 0x39, 0x56,
        0x7e, 0x01, 0x47, 0x52, 0x21, 0x02, 0x3d, 0xa0,
        0x92, 0xf6, 0x98, 0x0e, 0x58, 0xd2, 0xc0, 0x37,
        0x17, 0x31, 0x80, 0xe9, 0xa4, 0x65, 0x47, 0x60,
        0x26, 0xee, 0x50, 0xf9, 0x66, 0x95, 0x96, 0x3e,
        0x8e, 0xfe, 0x43, 0x6f, 0x54, 0xeb, 0x21, 0x03,
        0x0e, 0x9f, 0x7b, 0x62, 0x3d, 0x2c, 0xcc, 0x7c,
        0x9b, 0xd4, 0x4d, 0x66, 0xd5, 0xce, 0x21, 0xce,
        0x50, 0x4c, 0x0a, 0xcf, 0x63, 0x85, 0xa1, 0x32,
        0xce, 0xc6, 0xd3, 0xc3, 0x9f, 0xa7, 0x11, 0xc1,
        0x52, 0xae, 0x3e, 0x19, 0x52, 0x20,
    };
    //ptarm_print_rawtx(COMMIT_TX, sizeof(COMMIT_TX));
    ptarm_buf_t tx_buf;

    ptarm_tx_create(&tx_buf, &tx);
    ASSERT_EQ(0, memcmp(COMMIT_TX, tx_buf.buf, sizeof(COMMIT_TX)));
    ASSERT_EQ(sizeof(COMMIT_TX), tx_buf.len);
    ret = ptarm_tx_txid(txid_commit, &tx);
    ASSERT_TRUE(ret);
    ptarm_buf_free(&tx_buf);

    ptarm_buf_free(&ws_local_buf);


    for (int lp = 0; lp < 5; lp++) {
        ptarm_buf_free((ptarm_buf_t *)&htlcinfos[lp].script);
    }
    ptarm_tx_free(&tx);
}


TEST_F(ln_bolt3_c, fin)
{
    ptarm_buf_free(&funding2of2);
    ptarm_term();

    free(pp_htlcinfos);

    ASSERT_EQ(0, ptarm_dbg_malloc_cnt());
}
