/*
    Appendix D: Per-commitment Secret Generation Test Vectors
        https://github.com/lightningnetwork/lightning-rfc/blob/master/03-transactions.md#appendix-d-per-commitment-secret-generation-test-vectors
*/

////////////////////////////////////////////////////////////////////////
//FAKE関数

//FAKE_VALUE_FUNC(int, external_function, int);

////////////////////////////////////////////////////////////////////////

class ln_bolt3_d: public testing::Test {
protected:
    virtual void SetUp() {
        //RESET_FAKE(external_function)
        ptarm_init(PTARM_TESTNET, true);
    }

    virtual void TearDown() {
        ASSERT_EQ(0, ptarm_dbg_malloc_cnt());
        ptarm_term();
    }

    static ln_derkey_storage storage;

public:
    static void DumpBin(const uint8_t *pData, uint16_t Len)
    {
        for (uint16_t lp = 0; lp < Len; lp++) {
            printf("%02x", pData[lp]);
        }
        printf("\n");
    }
};

ln_derkey_storage ln_bolt3_d::storage;


////////////////////////////////////////////////////////////////////////

//
// Generate Test
//      https://github.com/lightningnetwork/lightning-rfc/blob/master/03-transactions.md#generation-tests
//

//name: generate_from_seed 0 final node
TEST_F(ln_bolt3_d, gene1)
{
    const uint8_t SEED[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    const uint64_t I = 281474976710655;
    const uint8_t OUTPUT[] = {
        0x02, 0xa4, 0x0c, 0x85, 0xb6, 0xf2, 0x8d, 0xa0,
        0x8d, 0xfd, 0xbe, 0x09, 0x26, 0xc5, 0x3f, 0xab,
        0x2d, 0xe6, 0xd2, 0x8c, 0x10, 0x30, 0x1f, 0x8f,
        0x7c, 0x40, 0x73, 0xd5, 0xe4, 0x2e, 0x31, 0x48,
    };

    uint8_t output[PTARM_SZ_PRIVKEY];
    ln_derkey_create_secret(output, SEED, I);
    //DumpBin(output, PTARM_SZ_PRIVKEY);
    ASSERT_EQ(0, memcmp(OUTPUT, output, PTARM_SZ_PRIVKEY));
}


//name: generate_from_seed FF final node
TEST_F(ln_bolt3_d, gene2)
{
    const uint8_t SEED[32] = {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    };
    const uint64_t I = 281474976710655;
    const uint8_t OUTPUT[] = {
        0x7c, 0xc8, 0x54, 0xb5, 0x4e, 0x3e, 0x0d, 0xcd,
        0xb0, 0x10, 0xd7, 0xa3, 0xfe, 0xe4, 0x64, 0xa9,
        0x68, 0x7b, 0xe6, 0xe8, 0xdb, 0x3b, 0xe6, 0x85,
        0x4c, 0x47, 0x56, 0x21, 0xe0, 0x07, 0xa5, 0xdc,
    };

    uint8_t output[PTARM_SZ_PRIVKEY];
    ln_derkey_create_secret(output, SEED, I);
    //DumpBin(output, PTARM_SZ_PRIVKEY);
    ASSERT_EQ(0, memcmp(OUTPUT, output, PTARM_SZ_PRIVKEY));
}


//name: generate_from_seed FF alternate bits 1
TEST_F(ln_bolt3_d, gene3)
{
    const uint8_t SEED[32] = {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    };
    const uint64_t I = 0xaaaaaaaaaaa;
    const uint8_t OUTPUT[] = {
        0x56, 0xf4, 0x00, 0x8f, 0xb0, 0x07, 0xca, 0x9a,
        0xcf, 0x0e, 0x15, 0xb0, 0x54, 0xd5, 0xc9, 0xfd,
        0x12, 0xee, 0x06, 0xce, 0xa3, 0x47, 0x91, 0x4d,
        0xdb, 0xae, 0xd7, 0x0d, 0x1c, 0x13, 0xa5, 0x28,
    };

    uint8_t output[PTARM_SZ_PRIVKEY];
    ln_derkey_create_secret(output, SEED, I);
    //DumpBin(output, PTARM_SZ_PRIVKEY);
    ASSERT_EQ(0, memcmp(OUTPUT, output, PTARM_SZ_PRIVKEY));
}


//name: generate_from_seed FF alternate bits 2
TEST_F(ln_bolt3_d, gene4)
{
    const uint8_t SEED[32] = {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    };
    const uint64_t I = 0x555555555555;
    const uint8_t OUTPUT[] = {
        0x90, 0x15, 0xda, 0xae, 0xb0, 0x6d, 0xba, 0x4c,
        0xcc, 0x05, 0xb9, 0x1b, 0x2f, 0x73, 0xbd, 0x54,
        0x40, 0x5f, 0x2b, 0xe9, 0xf2, 0x17, 0xfb, 0xac,
        0xd3, 0xc5, 0xac, 0x2e, 0x62, 0x32, 0x7d, 0x31,
    };

    uint8_t output[PTARM_SZ_PRIVKEY];
    ln_derkey_create_secret(output, SEED, I);
    //DumpBin(output, PTARM_SZ_PRIVKEY);
    ASSERT_EQ(0, memcmp(OUTPUT, output, PTARM_SZ_PRIVKEY));
}


//name: generate_from_seed 01 last nontrivial node
TEST_F(ln_bolt3_d, gene5)
{
    const uint8_t SEED[32] = {
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    };
    const uint64_t I = 1;
    const uint8_t OUTPUT[] = {
        0x91, 0x5c, 0x75, 0x94, 0x2a, 0x26, 0xbb, 0x3a,
        0x43, 0x3a, 0x8c, 0xe2, 0xcb, 0x04, 0x27, 0xc2,
        0x9e, 0xc6, 0xc1, 0x77, 0x5c, 0xfc, 0x78, 0x32,
        0x8b, 0x57, 0xf6, 0xba, 0x7b, 0xfe, 0xaa, 0x9c,
    };

    uint8_t output[PTARM_SZ_PRIVKEY];
    ln_derkey_create_secret(output, SEED, I);
    //DumpBin(output, PTARM_SZ_PRIVKEY);
    ASSERT_EQ(0, memcmp(OUTPUT, output, PTARM_SZ_PRIVKEY));
}


TEST_F(ln_bolt3_d, where)
{
    int bit;

    bit = where_to_put_secret(0);
    ASSERT_EQ(48, bit);

    bit = where_to_put_secret(0x01000000000000);
    ASSERT_EQ(48, bit);

    bit = where_to_put_secret(1);
    ASSERT_EQ(0, bit);

    bit = where_to_put_secret(2);
    ASSERT_EQ(1, bit);

    bit = where_to_put_secret(0x00400000000000);
    ASSERT_EQ(46, bit);

    bit = where_to_put_secret(0x00800000000000);
    ASSERT_EQ(47, bit);

    bit = where_to_put_secret(0x00800000000001);
    ASSERT_EQ(0, bit);
}


//
// Storage Test
//      https://github.com/lightningnetwork/lightning-rfc/blob/master/03-transactions.md#storage-tests
//


//name: generate_from_seed FF final node
TEST_F(ln_bolt3_d, storage0)
{
    bool ret;
    uint8_t output[PTARM_SZ_PRIVKEY];

    ln_derkey_storage_init(&storage);

    const uint8_t SEED[32] = {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    };
    uint64_t I = 281474976710655;


    const uint8_t OUTPUT1[] = {
        0x7c, 0xc8, 0x54, 0xb5, 0x4e, 0x3e, 0x0d, 0xcd,
        0xb0, 0x10, 0xd7, 0xa3, 0xfe, 0xe4, 0x64, 0xa9,
        0x68, 0x7b, 0xe6, 0xe8, 0xdb, 0x3b, 0xe6, 0x85,
        0x4c, 0x47, 0x56, 0x21, 0xe0, 0x07, 0xa5, 0xdc,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT1, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;
    ASSERT_EQ(281474976710654, I);

    const uint8_t OUTPUT2[] = {
        0xc7, 0x51, 0x8c, 0x8a, 0xe4, 0x66, 0x0e, 0xd0,
        0x28, 0x94, 0xdf, 0x89, 0x76, 0xfa, 0x1a, 0x36,
        0x59, 0xc1, 0xa8, 0xb4, 0xb5, 0xbe, 0xc0, 0xc4,
        0xb8, 0x72, 0xab, 0xeb, 0xa4, 0xcb, 0x89, 0x64,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT2, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;
    ASSERT_EQ(281474976710653, I);

    const uint8_t OUTPUT3[] = {
        0x22, 0x73, 0xe2, 0x27, 0xa5, 0xb7, 0x44, 0x9b,
        0x6e, 0x70, 0xf1, 0xfb, 0x46, 0x52, 0x86, 0x40,
        0x38, 0xb1, 0xcb, 0xf9, 0xcd, 0x7c, 0x04, 0x3a,
        0x7d, 0x64, 0x56, 0xb7, 0xfc, 0x27, 0x5a, 0xd8,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT3, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;
    ASSERT_EQ(281474976710652, I);

    const uint8_t OUTPUT4[] = {
        0x27, 0xcd, 0xda, 0xa5, 0x62, 0x45, 0x34, 0xcb,
        0x6c, 0xb9, 0xd7, 0xda, 0x07, 0x7c, 0xf2, 0xb2,
        0x2a, 0xb2, 0x1e, 0x9b, 0x50, 0x6f, 0xd4, 0x99,
        0x8a, 0x51, 0xd5, 0x45, 0x02, 0xe9, 0x91, 0x16,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT4, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;
    ASSERT_EQ(281474976710651, I);

    const uint8_t OUTPUT5[] = {
        0xc6, 0x57, 0x16, 0xad, 0xd7, 0xaa, 0x98, 0xba,
        0x7a, 0xcb, 0x23, 0x63, 0x52, 0xd6, 0x65, 0xca,
        0xb1, 0x73, 0x45, 0xfe, 0x45, 0xb5, 0x5f, 0xb8,
        0x79, 0xff, 0x80, 0xe6, 0xbd, 0x0c, 0x41, 0xdd,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT5, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;
    ASSERT_EQ(281474976710650, I);

    const uint8_t OUTPUT6[] = {
        0x96, 0x96, 0x60, 0x04, 0x2a, 0x28, 0xf3, 0x2d,
        0x9b, 0xe1, 0x73, 0x44, 0xe0, 0x93, 0x74, 0xb3,
        0x79, 0x96, 0x2d, 0x03, 0xdb, 0x15, 0x74, 0xdf,
        0x5a, 0x8a, 0x5a, 0x47, 0xe1, 0x9c, 0xe3, 0xf2,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT6, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;
    ASSERT_EQ(281474976710649, I);

    const uint8_t OUTPUT7[] = {
        0xa5, 0xa6, 0x44, 0x76, 0x12, 0x2c, 0xa0, 0x92,
        0x5f, 0xb3, 0x44, 0xbd, 0xc1, 0x85, 0x4c, 0x1c,
        0x0a, 0x59, 0xfc, 0x61, 0x42, 0x98, 0xe5, 0x0a,
        0x33, 0xe3, 0x31, 0x98, 0x0a, 0x22, 0x0f, 0x32,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT7, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;
    ASSERT_EQ(281474976710648, I);

    const uint8_t OUTPUT8[] = {
        0x05, 0xcd, 0xe6, 0x32, 0x3d, 0x94, 0x99, 0x33,
        0xf7, 0xf7, 0xb7, 0x87, 0x76, 0xbc, 0xc1, 0xea,
        0x6d, 0x9b, 0x31, 0x44, 0x77, 0x32, 0xe3, 0x80,
        0x2e, 0x1f, 0x7a, 0xc4, 0x4b, 0x65, 0x0e, 0x17,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT8, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);


//    for (int lp = 0; lp < 49; lp++) {
//        if (storage.storage[lp].index != 0x0000123456789abcULL) {
//            printf("[%2d]I=%016llx\n", lp, (unsigned long long)storage.storage[lp].index);
//            printf("    S:");
//            DumpBin(storage.storage[lp].secret, PTARM_SZ_PRIVKEY);
//            printf("\n");
//        }
//    }

    //
    ret = ln_derkey_storage_get_secret(output, &storage, 281474976710648ULL);
    ASSERT_TRUE(ret);
    DumpBin(output, PTARM_SZ_PRIVKEY);
    ASSERT_EQ(0, memcmp(OUTPUT8, output, PTARM_SZ_PRIVKEY));
    //
    ret = ln_derkey_storage_get_secret(output, &storage, 281474976710649ULL);
    ASSERT_TRUE(ret);
    DumpBin(output, PTARM_SZ_PRIVKEY);
    ASSERT_EQ(0, memcmp(OUTPUT7, output, PTARM_SZ_PRIVKEY));
    //
    ret = ln_derkey_storage_get_secret(output, &storage, 281474976710650ULL);
    ASSERT_TRUE(ret);
    DumpBin(output, PTARM_SZ_PRIVKEY);
    ASSERT_EQ(0, memcmp(OUTPUT6, output, PTARM_SZ_PRIVKEY));
    //
    ret = ln_derkey_storage_get_secret(output, &storage, 281474976710651ULL);
    ASSERT_TRUE(ret);
    DumpBin(output, PTARM_SZ_PRIVKEY);
    ASSERT_EQ(0, memcmp(OUTPUT5, output, PTARM_SZ_PRIVKEY));
    //
    ret = ln_derkey_storage_get_secret(output, &storage, 281474976710652ULL);
    ASSERT_TRUE(ret);
    DumpBin(output, PTARM_SZ_PRIVKEY);
    ASSERT_EQ(0, memcmp(OUTPUT4, output, PTARM_SZ_PRIVKEY));
    //
    ret = ln_derkey_storage_get_secret(output, &storage, 281474976710653ULL);
    ASSERT_TRUE(ret);
    DumpBin(output, PTARM_SZ_PRIVKEY);
    ASSERT_EQ(0, memcmp(OUTPUT3, output, PTARM_SZ_PRIVKEY));
    //
    ret = ln_derkey_storage_get_secret(output, &storage, 281474976710654ULL);
    ASSERT_TRUE(ret);
    DumpBin(output, PTARM_SZ_PRIVKEY);
    ASSERT_EQ(0, memcmp(OUTPUT2, output, PTARM_SZ_PRIVKEY));
    //
    ret = ln_derkey_storage_get_secret(output, &storage, 281474976710655ULL);
    ASSERT_TRUE(ret);
    DumpBin(output, PTARM_SZ_PRIVKEY);
    ASSERT_EQ(0, memcmp(OUTPUT1, output, PTARM_SZ_PRIVKEY));
}


//name: insert_secret #1 incorrect
TEST_F(ln_bolt3_d, storage1)
{
    bool ret;
    uint8_t output[PTARM_SZ_PRIVKEY];

    const uint8_t SEED[32] = {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    };
    const uint8_t SEED_FAIL[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    uint64_t I = 281474976710655;

    const uint8_t OUTPUT1[] = {
        0x02, 0xa4, 0x0c, 0x85, 0xb6, 0xf2, 0x8d, 0xa0,
        0x8d, 0xfd, 0xbe, 0x09, 0x26, 0xc5, 0x3f, 0xab,
        0x2d, 0xe6, 0xd2, 0x8c, 0x10, 0x30, 0x1f, 0x8f,
        0x7c, 0x40, 0x73, 0xd5, 0xe4, 0x2e, 0x31, 0x48,
    };
    ln_derkey_create_secret(output, SEED_FAIL, I);
    ASSERT_EQ(0, memcmp(OUTPUT1, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT2[] = {
        0xc7, 0x51, 0x8c, 0x8a, 0xe4, 0x66, 0x0e, 0xd0,
        0x28, 0x94, 0xdf, 0x89, 0x76, 0xfa, 0x1a, 0x36,
        0x59, 0xc1, 0xa8, 0xb4, 0xb5, 0xbe, 0xc0, 0xc4,
        0xb8, 0x72, 0xab, 0xeb, 0xa4, 0xcb, 0x89, 0x64,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT2, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_FALSE(ret);

    I--;
}


//name: insert_secret #2 incorrect (#1 derived from incorrect)
TEST_F(ln_bolt3_d, storage2)
{
    bool ret;
    uint8_t output[PTARM_SZ_PRIVKEY];

    const uint8_t SEED[32] = {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    };
    const uint8_t SEED_FAIL[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    uint64_t I = 281474976710655;

    const uint8_t OUTPUT1[] = {
        0x02, 0xa4, 0x0c, 0x85, 0xb6, 0xf2, 0x8d, 0xa0,
        0x8d, 0xfd, 0xbe, 0x09, 0x26, 0xc5, 0x3f, 0xab,
        0x2d, 0xe6, 0xd2, 0x8c, 0x10, 0x30, 0x1f, 0x8f,
        0x7c, 0x40, 0x73, 0xd5, 0xe4, 0x2e, 0x31, 0x48,
    };
    ln_derkey_create_secret(output, SEED_FAIL, I);
    ASSERT_EQ(0, memcmp(OUTPUT1, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT2[] = {
        0xdd, 0xdc, 0x3a, 0x8d, 0x14, 0xfd, 0xdf, 0x2b,
        0x68, 0xfa, 0x8c, 0x7f, 0xba, 0xd2, 0x74, 0x82,
        0x74, 0x93, 0x74, 0x79, 0xdd, 0x0f, 0x89, 0x30,
        0xd5, 0xeb, 0xb4, 0xab, 0x6b, 0xd8, 0x66, 0xa3,
    };
    ln_derkey_create_secret(output, SEED_FAIL, I);
    ASSERT_EQ(0, memcmp(OUTPUT2, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT3[] = {
        0x22, 0x73, 0xe2, 0x27, 0xa5, 0xb7, 0x44, 0x9b,
        0x6e, 0x70, 0xf1, 0xfb, 0x46, 0x52, 0x86, 0x40,
        0x38, 0xb1, 0xcb, 0xf9, 0xcd, 0x7c, 0x04, 0x3a,
        0x7d, 0x64, 0x56, 0xb7, 0xfc, 0x27, 0x5a, 0xd8,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT3, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT4[] = {
        0x27, 0xcd, 0xda, 0xa5, 0x62, 0x45, 0x34, 0xcb,
        0x6c, 0xb9, 0xd7, 0xda, 0x07, 0x7c, 0xf2, 0xb2,
        0x2a, 0xb2, 0x1e, 0x9b, 0x50, 0x6f, 0xd4, 0x99,
        0x8a, 0x51, 0xd5, 0x45, 0x02, 0xe9, 0x91, 0x16,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT4, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_FALSE(ret);

    I--;
}


//name: insert_secret #3 incorrect
TEST_F(ln_bolt3_d, storage3)
{
    bool ret;
    uint8_t output[PTARM_SZ_PRIVKEY];

    const uint8_t SEED[32] = {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    };
    const uint8_t SEED_FAIL[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    uint64_t I = 281474976710655;

    const uint8_t OUTPUT1[] = {
        0x02, 0xa4, 0x0c, 0x85, 0xb6, 0xf2, 0x8d, 0xa0,
        0x8d, 0xfd, 0xbe, 0x09, 0x26, 0xc5, 0x3f, 0xab,
        0x2d, 0xe6, 0xd2, 0x8c, 0x10, 0x30, 0x1f, 0x8f,
        0x7c, 0x40, 0x73, 0xd5, 0xe4, 0x2e, 0x31, 0x48,
    };
    ln_derkey_create_secret(output, SEED_FAIL, I);
    ASSERT_EQ(0, memcmp(OUTPUT1, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT2[] = {
        0xc7, 0x51, 0x8c, 0x8a, 0xe4, 0x66, 0x0e, 0xd0,
        0x28, 0x94, 0xdf, 0x89, 0x76, 0xfa, 0x1a, 0x36,
        0x59, 0xc1, 0xa8, 0xb4, 0xb5, 0xbe, 0xc0, 0xc4,
        0xb8, 0x72, 0xab, 0xeb, 0xa4, 0xcb, 0x89, 0x64,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT2, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_FALSE(ret);

    I--;
}


//name: insert_secret #4 incorrect (1,2,3 derived from incorrect)
TEST_F(ln_bolt3_d, storage4)
{
    bool ret;
    uint8_t output[PTARM_SZ_PRIVKEY];

    const uint8_t SEED[32] = {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    };
    const uint8_t SEED_FAIL[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    uint64_t I = 281474976710655;

    const uint8_t OUTPUT1[] = {
        0x02, 0xa4, 0x0c, 0x85, 0xb6, 0xf2, 0x8d, 0xa0,
        0x8d, 0xfd, 0xbe, 0x09, 0x26, 0xc5, 0x3f, 0xab,
        0x2d, 0xe6, 0xd2, 0x8c, 0x10, 0x30, 0x1f, 0x8f,
        0x7c, 0x40, 0x73, 0xd5, 0xe4, 0x2e, 0x31, 0x48,
    };
    ln_derkey_create_secret(output, SEED_FAIL, I);
    ASSERT_EQ(0, memcmp(OUTPUT1, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT2[] = {
        0xdd, 0xdc, 0x3a, 0x8d, 0x14, 0xfd, 0xdf, 0x2b,
        0x68, 0xfa, 0x8c, 0x7f, 0xba, 0xd2, 0x74, 0x82,
        0x74, 0x93, 0x74, 0x79, 0xdd, 0x0f, 0x89, 0x30,
        0xd5, 0xeb, 0xb4, 0xab, 0x6b, 0xd8, 0x66, 0xa3,
    };
    ln_derkey_create_secret(output, SEED_FAIL, I);
    ASSERT_EQ(0, memcmp(OUTPUT2, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT3[] = {
        0xc5, 0x1a, 0x18, 0xb1, 0x3e, 0x85, 0x27, 0xe5,
        0x79, 0xec, 0x56, 0x36, 0x54, 0x82, 0xc6, 0x2f,
        0x18, 0x0b, 0x7d, 0x57, 0x60, 0xb4, 0x6e, 0x94,
        0x77, 0xda, 0xe5, 0x9e, 0x87, 0xed, 0x42, 0x3a,
    };
    ln_derkey_create_secret(output, SEED_FAIL, I);
    ASSERT_EQ(0, memcmp(OUTPUT3, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT4[] = {
        0xba, 0x65, 0xd7, 0xb0, 0xef, 0x55, 0xa3, 0xba,
        0x30, 0x0d, 0x4e, 0x87, 0xaf, 0x29, 0x86, 0x8f,
        0x39, 0x4f, 0x8f, 0x13, 0x8d, 0x78, 0xa7, 0x01,
        0x16, 0x69, 0xc7, 0x9b, 0x37, 0xb9, 0x36, 0xf4,
    };
    ln_derkey_create_secret(output, SEED_FAIL, I);
    ASSERT_EQ(0, memcmp(OUTPUT4, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT5[] = {
        0xc6, 0x57, 0x16, 0xad, 0xd7, 0xaa, 0x98, 0xba,
        0x7a, 0xcb, 0x23, 0x63, 0x52, 0xd6, 0x65, 0xca,
        0xb1, 0x73, 0x45, 0xfe, 0x45, 0xb5, 0x5f, 0xb8,
        0x79, 0xff, 0x80, 0xe6, 0xbd, 0x0c, 0x41, 0xdd,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT5, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT6[] = {
        0x96, 0x96, 0x60, 0x04, 0x2a, 0x28, 0xf3, 0x2d,
        0x9b, 0xe1, 0x73, 0x44, 0xe0, 0x93, 0x74, 0xb3,
        0x79, 0x96, 0x2d, 0x03, 0xdb, 0x15, 0x74, 0xdf,
        0x5a, 0x8a, 0x5a, 0x47, 0xe1, 0x9c, 0xe3, 0xf2,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT6, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT7[] = {
        0xa5, 0xa6, 0x44, 0x76, 0x12, 0x2c, 0xa0, 0x92,
        0x5f, 0xb3, 0x44, 0xbd, 0xc1, 0x85, 0x4c, 0x1c,
        0x0a, 0x59, 0xfc, 0x61, 0x42, 0x98, 0xe5, 0x0a,
        0x33, 0xe3, 0x31, 0x98, 0x0a, 0x22, 0x0f, 0x32,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT7, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT8[] = {
        0x05, 0xcd, 0xe6, 0x32, 0x3d, 0x94, 0x99, 0x33,
        0xf7, 0xf7, 0xb7, 0x87, 0x76, 0xbc, 0xc1, 0xea,
        0x6d, 0x9b, 0x31, 0x44, 0x77, 0x32, 0xe3, 0x80,
        0x2e, 0x1f, 0x7a, 0xc4, 0x4b, 0x65, 0x0e, 0x17,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT8, output, PTARM_SZ_PRIVKEY));
    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_FALSE(ret);

    I--;
}


//name: insert_secret #5 incorrect
TEST_F(ln_bolt3_d, storage5)
{
    bool ret;
    uint8_t output[PTARM_SZ_PRIVKEY];

    ln_derkey_storage_init(&storage);

    const uint8_t SEED[32] = {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    };
    const uint8_t SEED_FAIL[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    uint64_t I = 281474976710655;


    const uint8_t OUTPUT1[] = {
        0x7c, 0xc8, 0x54, 0xb5, 0x4e, 0x3e, 0x0d, 0xcd,
        0xb0, 0x10, 0xd7, 0xa3, 0xfe, 0xe4, 0x64, 0xa9,
        0x68, 0x7b, 0xe6, 0xe8, 0xdb, 0x3b, 0xe6, 0x85,
        0x4c, 0x47, 0x56, 0x21, 0xe0, 0x07, 0xa5, 0xdc,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT1, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT2[] = {
        0xc7, 0x51, 0x8c, 0x8a, 0xe4, 0x66, 0x0e, 0xd0,
        0x28, 0x94, 0xdf, 0x89, 0x76, 0xfa, 0x1a, 0x36,
        0x59, 0xc1, 0xa8, 0xb4, 0xb5, 0xbe, 0xc0, 0xc4,
        0xb8, 0x72, 0xab, 0xeb, 0xa4, 0xcb, 0x89, 0x64,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT2, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT3[] = {
        0x22, 0x73, 0xe2, 0x27, 0xa5, 0xb7, 0x44, 0x9b,
        0x6e, 0x70, 0xf1, 0xfb, 0x46, 0x52, 0x86, 0x40,
        0x38, 0xb1, 0xcb, 0xf9, 0xcd, 0x7c, 0x04, 0x3a,
        0x7d, 0x64, 0x56, 0xb7, 0xfc, 0x27, 0x5a, 0xd8,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT3, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT4[] = {
        0x27, 0xcd, 0xda, 0xa5, 0x62, 0x45, 0x34, 0xcb,
        0x6c, 0xb9, 0xd7, 0xda, 0x07, 0x7c, 0xf2, 0xb2,
        0x2a, 0xb2, 0x1e, 0x9b, 0x50, 0x6f, 0xd4, 0x99,
        0x8a, 0x51, 0xd5, 0x45, 0x02, 0xe9, 0x91, 0x16,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT4, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT5[] = {
        0x63, 0x13, 0x73, 0xad, 0x5f, 0x9e, 0xf6, 0x54,
        0xbb, 0x3d, 0xad, 0xe7, 0x42, 0xd0, 0x95, 0x04,
        0xc5, 0x67, 0xed, 0xd2, 0x43, 0x20, 0xd2, 0xfc,
        0xd6, 0x8e, 0x3c, 0xc4, 0x7e, 0x2f, 0xf6, 0xa6,
    };
    ln_derkey_create_secret(output, SEED_FAIL, I);
    ASSERT_EQ(0, memcmp(OUTPUT5, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT6[] = {
        0x96, 0x96, 0x60, 0x04, 0x2a, 0x28, 0xf3, 0x2d,
        0x9b, 0xe1, 0x73, 0x44, 0xe0, 0x93, 0x74, 0xb3,
        0x79, 0x96, 0x2d, 0x03, 0xdb, 0x15, 0x74, 0xdf,
        0x5a, 0x8a, 0x5a, 0x47, 0xe1, 0x9c, 0xe3, 0xf2,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT6, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_FALSE(ret);

    I--;
}


//name: insert_secret #6 incorrect (5 derived from incorrect)
TEST_F(ln_bolt3_d, storage6)
{
    bool ret;
    uint8_t output[PTARM_SZ_PRIVKEY];

    ln_derkey_storage_init(&storage);

    const uint8_t SEED[32] = {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    };
    const uint8_t SEED_FAIL[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    uint64_t I = 281474976710655;


    const uint8_t OUTPUT1[] = {
        0x7c, 0xc8, 0x54, 0xb5, 0x4e, 0x3e, 0x0d, 0xcd,
        0xb0, 0x10, 0xd7, 0xa3, 0xfe, 0xe4, 0x64, 0xa9,
        0x68, 0x7b, 0xe6, 0xe8, 0xdb, 0x3b, 0xe6, 0x85,
        0x4c, 0x47, 0x56, 0x21, 0xe0, 0x07, 0xa5, 0xdc,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT1, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT2[] = {
        0xc7, 0x51, 0x8c, 0x8a, 0xe4, 0x66, 0x0e, 0xd0,
        0x28, 0x94, 0xdf, 0x89, 0x76, 0xfa, 0x1a, 0x36,
        0x59, 0xc1, 0xa8, 0xb4, 0xb5, 0xbe, 0xc0, 0xc4,
        0xb8, 0x72, 0xab, 0xeb, 0xa4, 0xcb, 0x89, 0x64,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT2, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT3[] = {
        0x22, 0x73, 0xe2, 0x27, 0xa5, 0xb7, 0x44, 0x9b,
        0x6e, 0x70, 0xf1, 0xfb, 0x46, 0x52, 0x86, 0x40,
        0x38, 0xb1, 0xcb, 0xf9, 0xcd, 0x7c, 0x04, 0x3a,
        0x7d, 0x64, 0x56, 0xb7, 0xfc, 0x27, 0x5a, 0xd8,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT3, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT4[] = {
        0x27, 0xcd, 0xda, 0xa5, 0x62, 0x45, 0x34, 0xcb,
        0x6c, 0xb9, 0xd7, 0xda, 0x07, 0x7c, 0xf2, 0xb2,
        0x2a, 0xb2, 0x1e, 0x9b, 0x50, 0x6f, 0xd4, 0x99,
        0x8a, 0x51, 0xd5, 0x45, 0x02, 0xe9, 0x91, 0x16,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT4, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT5[] = {
        0x63, 0x13, 0x73, 0xad, 0x5f, 0x9e, 0xf6, 0x54,
        0xbb, 0x3d, 0xad, 0xe7, 0x42, 0xd0, 0x95, 0x04,
        0xc5, 0x67, 0xed, 0xd2, 0x43, 0x20, 0xd2, 0xfc,
        0xd6, 0x8e, 0x3c, 0xc4, 0x7e, 0x2f, 0xf6, 0xa6,
    };
    ln_derkey_create_secret(output, SEED_FAIL, I);
    ASSERT_EQ(0, memcmp(OUTPUT5, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT6[] = {
        0xb7, 0xe7, 0x6a, 0x83, 0x66, 0x8b, 0xde, 0x38,
        0xb3, 0x73, 0x97, 0x01, 0x55, 0xc8, 0x68, 0xa6,
        0x53, 0x30, 0x43, 0x08, 0xf9, 0x89, 0x66, 0x92,
        0xf9, 0x04, 0xa2, 0x37, 0x31, 0x22, 0x4b, 0xb1,
    };
    ln_derkey_create_secret(output, SEED_FAIL, I);
    ASSERT_EQ(0, memcmp(OUTPUT6, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT7[] = {
        0xa5, 0xa6, 0x44, 0x76, 0x12, 0x2c, 0xa0, 0x92,
        0x5f, 0xb3, 0x44, 0xbd, 0xc1, 0x85, 0x4c, 0x1c,
        0x0a, 0x59, 0xfc, 0x61, 0x42, 0x98, 0xe5, 0x0a,
        0x33, 0xe3, 0x31, 0x98, 0x0a, 0x22, 0x0f, 0x32,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT7, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT8[] = {
        0x05, 0xcd, 0xe6, 0x32, 0x3d, 0x94, 0x99, 0x33,
        0xf7, 0xf7, 0xb7, 0x87, 0x76, 0xbc, 0xc1, 0xea,
        0x6d, 0x9b, 0x31, 0x44, 0x77, 0x32, 0xe3, 0x80,
        0x2e, 0x1f, 0x7a, 0xc4, 0x4b, 0x65, 0x0e, 0x17,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT8, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_FALSE(ret);

    I--;
}


//name: insert_secret #7 incorrect
TEST_F(ln_bolt3_d, storage7)
{
    bool ret;
    uint8_t output[PTARM_SZ_PRIVKEY];

    ln_derkey_storage_init(&storage);

    const uint8_t SEED[32] = {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    };
    const uint8_t SEED_FAIL[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    uint64_t I = 281474976710655;


    const uint8_t OUTPUT1[] = {
        0x7c, 0xc8, 0x54, 0xb5, 0x4e, 0x3e, 0x0d, 0xcd,
        0xb0, 0x10, 0xd7, 0xa3, 0xfe, 0xe4, 0x64, 0xa9,
        0x68, 0x7b, 0xe6, 0xe8, 0xdb, 0x3b, 0xe6, 0x85,
        0x4c, 0x47, 0x56, 0x21, 0xe0, 0x07, 0xa5, 0xdc,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT1, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT2[] = {
        0xc7, 0x51, 0x8c, 0x8a, 0xe4, 0x66, 0x0e, 0xd0,
        0x28, 0x94, 0xdf, 0x89, 0x76, 0xfa, 0x1a, 0x36,
        0x59, 0xc1, 0xa8, 0xb4, 0xb5, 0xbe, 0xc0, 0xc4,
        0xb8, 0x72, 0xab, 0xeb, 0xa4, 0xcb, 0x89, 0x64,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT2, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT3[] = {
        0x22, 0x73, 0xe2, 0x27, 0xa5, 0xb7, 0x44, 0x9b,
        0x6e, 0x70, 0xf1, 0xfb, 0x46, 0x52, 0x86, 0x40,
        0x38, 0xb1, 0xcb, 0xf9, 0xcd, 0x7c, 0x04, 0x3a,
        0x7d, 0x64, 0x56, 0xb7, 0xfc, 0x27, 0x5a, 0xd8,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT3, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT4[] = {
        0x27, 0xcd, 0xda, 0xa5, 0x62, 0x45, 0x34, 0xcb,
        0x6c, 0xb9, 0xd7, 0xda, 0x07, 0x7c, 0xf2, 0xb2,
        0x2a, 0xb2, 0x1e, 0x9b, 0x50, 0x6f, 0xd4, 0x99,
        0x8a, 0x51, 0xd5, 0x45, 0x02, 0xe9, 0x91, 0x16,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT4, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT5[] = {
        0xc6, 0x57, 0x16, 0xad, 0xd7, 0xaa, 0x98, 0xba,
        0x7a, 0xcb, 0x23, 0x63, 0x52, 0xd6, 0x65, 0xca,
        0xb1, 0x73, 0x45, 0xfe, 0x45, 0xb5, 0x5f, 0xb8,
        0x79, 0xff, 0x80, 0xe6, 0xbd, 0x0c, 0x41, 0xdd,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT5, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT6[] = {
        0x96, 0x96, 0x60, 0x04, 0x2a, 0x28, 0xf3, 0x2d,
        0x9b, 0xe1, 0x73, 0x44, 0xe0, 0x93, 0x74, 0xb3,
        0x79, 0x96, 0x2d, 0x03, 0xdb, 0x15, 0x74, 0xdf,
        0x5a, 0x8a, 0x5a, 0x47, 0xe1, 0x9c, 0xe3, 0xf2,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT6, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT7[] = {
        0xe7, 0x97, 0x1d, 0xe7, 0x36, 0xe0, 0x1d, 0xa8,
        0xed, 0x58, 0xb9, 0x4c, 0x2f, 0xc2, 0x16, 0xcb,
        0x1d, 0xca, 0x9e, 0x32, 0x6f, 0x3a, 0x96, 0xe7,
        0x19, 0x4f, 0xe8, 0xea, 0x8a, 0xf6, 0xc0, 0xa3,
    };
    ln_derkey_create_secret(output, SEED_FAIL, I);
    ASSERT_EQ(0, memcmp(OUTPUT7, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT8[] = {
        0x05, 0xcd, 0xe6, 0x32, 0x3d, 0x94, 0x99, 0x33,
        0xf7, 0xf7, 0xb7, 0x87, 0x76, 0xbc, 0xc1, 0xea,
        0x6d, 0x9b, 0x31, 0x44, 0x77, 0x32, 0xe3, 0x80,
        0x2e, 0x1f, 0x7a, 0xc4, 0x4b, 0x65, 0x0e, 0x17,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT8, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_FALSE(ret);

    I--;
}


//name: insert_secret #8 incorrect
TEST_F(ln_bolt3_d, storage8)
{
    bool ret;
    uint8_t output[PTARM_SZ_PRIVKEY];

    ln_derkey_storage_init(&storage);

    const uint8_t SEED[32] = {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    };
    const uint8_t SEED_FAIL[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    uint64_t I = 281474976710655;


    const uint8_t OUTPUT1[] = {
        0x7c, 0xc8, 0x54, 0xb5, 0x4e, 0x3e, 0x0d, 0xcd,
        0xb0, 0x10, 0xd7, 0xa3, 0xfe, 0xe4, 0x64, 0xa9,
        0x68, 0x7b, 0xe6, 0xe8, 0xdb, 0x3b, 0xe6, 0x85,
        0x4c, 0x47, 0x56, 0x21, 0xe0, 0x07, 0xa5, 0xdc,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT1, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT2[] = {
        0xc7, 0x51, 0x8c, 0x8a, 0xe4, 0x66, 0x0e, 0xd0,
        0x28, 0x94, 0xdf, 0x89, 0x76, 0xfa, 0x1a, 0x36,
        0x59, 0xc1, 0xa8, 0xb4, 0xb5, 0xbe, 0xc0, 0xc4,
        0xb8, 0x72, 0xab, 0xeb, 0xa4, 0xcb, 0x89, 0x64,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT2, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT3[] = {
        0x22, 0x73, 0xe2, 0x27, 0xa5, 0xb7, 0x44, 0x9b,
        0x6e, 0x70, 0xf1, 0xfb, 0x46, 0x52, 0x86, 0x40,
        0x38, 0xb1, 0xcb, 0xf9, 0xcd, 0x7c, 0x04, 0x3a,
        0x7d, 0x64, 0x56, 0xb7, 0xfc, 0x27, 0x5a, 0xd8,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT3, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT4[] = {
        0x27, 0xcd, 0xda, 0xa5, 0x62, 0x45, 0x34, 0xcb,
        0x6c, 0xb9, 0xd7, 0xda, 0x07, 0x7c, 0xf2, 0xb2,
        0x2a, 0xb2, 0x1e, 0x9b, 0x50, 0x6f, 0xd4, 0x99,
        0x8a, 0x51, 0xd5, 0x45, 0x02, 0xe9, 0x91, 0x16,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT4, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT5[] = {
        0xc6, 0x57, 0x16, 0xad, 0xd7, 0xaa, 0x98, 0xba,
        0x7a, 0xcb, 0x23, 0x63, 0x52, 0xd6, 0x65, 0xca,
        0xb1, 0x73, 0x45, 0xfe, 0x45, 0xb5, 0x5f, 0xb8,
        0x79, 0xff, 0x80, 0xe6, 0xbd, 0x0c, 0x41, 0xdd,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT5, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT6[] = {
        0x96, 0x96, 0x60, 0x04, 0x2a, 0x28, 0xf3, 0x2d,
        0x9b, 0xe1, 0x73, 0x44, 0xe0, 0x93, 0x74, 0xb3,
        0x79, 0x96, 0x2d, 0x03, 0xdb, 0x15, 0x74, 0xdf,
        0x5a, 0x8a, 0x5a, 0x47, 0xe1, 0x9c, 0xe3, 0xf2,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT6, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT7[] = {
        0xa5, 0xa6, 0x44, 0x76, 0x12, 0x2c, 0xa0, 0x92,
        0x5f, 0xb3, 0x44, 0xbd, 0xc1, 0x85, 0x4c, 0x1c,
        0x0a, 0x59, 0xfc, 0x61, 0x42, 0x98, 0xe5, 0x0a,
        0x33, 0xe3, 0x31, 0x98, 0x0a, 0x22, 0x0f, 0x32,
    };
    ln_derkey_create_secret(output, SEED, I);
    ASSERT_EQ(0, memcmp(OUTPUT7, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_TRUE(ret);

    I--;

    const uint8_t OUTPUT8[] = {
        0xa7, 0xef, 0xbc, 0x61, 0xaa, 0xc4, 0x6d, 0x34,
        0xf7, 0x77, 0x78, 0xba, 0xc2, 0x2c, 0x8a, 0x20,
        0xc6, 0xa4, 0x6c, 0xa4, 0x60, 0xad, 0xdc, 0x49,
        0x00, 0x9b, 0xda, 0x87, 0x5e, 0xc8, 0x8f, 0xa4,
    };
    ln_derkey_create_secret(output, SEED_FAIL, I);
    ASSERT_EQ(0, memcmp(OUTPUT8, output, PTARM_SZ_PRIVKEY));

    ret = ln_derkey_storage_insert_secret(&storage, output, I);
    ASSERT_FALSE(ret);

    I--;
}


//何度もln_derkey_create_secret()を呼んでも、期待したOUTPUTになるのだろうか？
TEST_F(ln_bolt3_d, seedFF_multi)
{
    const uint8_t SEED[32] = {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    };

    const uint64_t I1 = 281474976710655;
    const uint8_t OUTPUT1[] = {
        0x7c, 0xc8, 0x54, 0xb5, 0x4e, 0x3e, 0x0d, 0xcd,
        0xb0, 0x10, 0xd7, 0xa3, 0xfe, 0xe4, 0x64, 0xa9,
        0x68, 0x7b, 0xe6, 0xe8, 0xdb, 0x3b, 0xe6, 0x85,
        0x4c, 0x47, 0x56, 0x21, 0xe0, 0x07, 0xa5, 0xdc,
    };

    const uint64_t I2 = 0xaaaaaaaaaaa;
    const uint8_t OUTPUT2[] = {
        0x56, 0xf4, 0x00, 0x8f, 0xb0, 0x07, 0xca, 0x9a,
        0xcf, 0x0e, 0x15, 0xb0, 0x54, 0xd5, 0xc9, 0xfd,
        0x12, 0xee, 0x06, 0xce, 0xa3, 0x47, 0x91, 0x4d,
        0xdb, 0xae, 0xd7, 0x0d, 0x1c, 0x13, 0xa5, 0x28,
    };

    const uint64_t I3 = 0x555555555555;
    const uint8_t OUTPUT3[] = {
        0x90, 0x15, 0xda, 0xae, 0xb0, 0x6d, 0xba, 0x4c,
        0xcc, 0x05, 0xb9, 0x1b, 0x2f, 0x73, 0xbd, 0x54,
        0x40, 0x5f, 0x2b, 0xe9, 0xf2, 0x17, 0xfb, 0xac,
        0xd3, 0xc5, 0xac, 0x2e, 0x62, 0x32, 0x7d, 0x31,
    };

    uint8_t output[PTARM_SZ_PRIVKEY];

    ln_derkey_create_secret(output, SEED, I1);
    ASSERT_EQ(0, memcmp(OUTPUT1, output, PTARM_SZ_PRIVKEY));

    ln_derkey_create_secret(output, SEED, I2);
    ASSERT_EQ(0, memcmp(OUTPUT2, output, PTARM_SZ_PRIVKEY));

    ln_derkey_create_secret(output, SEED, I3);
    ASSERT_EQ(0, memcmp(OUTPUT3, output, PTARM_SZ_PRIVKEY));

    ln_derkey_create_secret(output, SEED, I1);
    ASSERT_EQ(0, memcmp(OUTPUT1, output, PTARM_SZ_PRIVKEY));

    ln_derkey_create_secret(output, SEED, I2);
    ASSERT_EQ(0, memcmp(OUTPUT2, output, PTARM_SZ_PRIVKEY));

    ln_derkey_create_secret(output, SEED, I3);
    ASSERT_EQ(0, memcmp(OUTPUT3, output, PTARM_SZ_PRIVKEY));
}

